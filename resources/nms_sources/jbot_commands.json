[
  {
    "title": "alarmsAckAlarmCommand",
    "description": "Acknowledges a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"AckAlarmCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsAckControlFailureCommand",
    "description": "Acknowledges a control failure alarm when the control failure dialog is closed",
    "code": "<PressPerform>\n        <Command value=\"AckControlFailureCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsClearAlarmCommand",
    "description": "Clears a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"ClearAlarmCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsClearPreviewAlarmsCommand",
    "description": "Clears a set of preview alarms",
    "code": "<PressPerform>\n        <Command value=\"ClearPreviewAlarmsCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsDeleteAlarmPreviewCommand",
    "description": "Command to clear alarm preview rows in the relevant tool.",
    "code": "<PressPerform>\n        <Command value=\"DeleteAlarmPreviewCommand\">\n           <Config name=\"runInTool\" value=\"com.splwg.oms.client.alarms.ActiveAlarmsConfig\"/>\n           <Config name=\"datastore\" value=\"DS_NMS_ALARMS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsFreezeAlarmsCommand",
    "description": "Freeze the alarms selected by user.",
    "code": "<PressPerform>\n       <Command value=\"FreezeAlarmsCommand\">\n       </Command>    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsFreezeUnfreezeCommand",
    "description": "Freeze/Unfreeze alarms display",
    "code": "<PressPerform>\n       <Command value=\"FreezeUnfreezeCommand\">\n            <Config name=\"frozen\" value=\"true\"/>\n       </Command>    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsLoadAlarmsCommand",
    "description": "Loads an alarm display at startup",
    "code": "<PressPerform>\n        <Command value=\"LoadAlarmsCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsPopulateEventHistoricAlarmsCommand",
    "description": "This Command populates the Historic Alarms Tool using the tool's loadEventAlarms() method.",
    "code": "<PressPerform>\n        <Command value=\"PopulateEventHistoricAlarmsCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsPreviewAlarmDefinitionCommand",
    "description": "Clears a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"PreviewAlarmDefinitionCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsSetAlarmsActiveAudibleCommand",
    "description": "Silence all alarm sounds for a specified duration or indefintely",
    "code": "<PressPerform>\n        <Command action=\"Selected\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsSetAlarmSelectionCommand",
    "description": "Sets the selected row in the alarm display",
    "code": "<PressPerform>\n        <Command value=\"SetAlarmSelectionCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsShelveAlarmsCommand",
    "description": "Shelve a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"ShelveAlarmsCommand\">\n            <Config name=\"one_shot\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsShowChildAlarmsCommand",
    "description": "Displays the child alarms for an alarm group",
    "code": "<PressPerform>\n       <Command value=\"ShowChildAlarmsCommand\"\"> \n           <Config name=\"when_column_selected\" value=\"childCountText\"/>\n           <Config name=\"components\" value=\"#PNL_ACTIVE_ALARMS_CHILD_HEADER\"/>\n           <Config name=\"background_color\" value=\"blue\"/>\n       </Command>    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsSilenceAlarmCommand",
    "description": "Silence a set of selected alarms (or all alarms if none are selected)",
    "code": "<PressPerform>\n        <Command value=\"SilenceAlarmCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsSilenceAlarmsConfigAsstCommand",
    "description": "Silence a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"SilenceAlarmsConfigAsstCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsToggleShowMilliSecs",
    "description": "Toggles between seconds and milliseconds for date formats",
    "code": "<PressPerform>\n       <Command value=\"ToggleShowMilliSecs\"\"> \n       </Command>    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmsUnFreezeAlarmsCommand",
    "description": "Unfreeze selected alarms",
    "code": "<PressPerform>\n       <Command value=\"UnFreezeAlarmsCommand\">\n       </Command>    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventBackCommand",
    "description": "Moves to the previous stage in the create shelve event dialog",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventBackCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventCommand",
    "description": "Creates a shelving event",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventNextCommand",
    "description": "Moves to the next stage in the create shelve event dialog",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventNextCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventPopulateCommand",
    "description": "A command that initializes the Create Shelve Event dialog",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventPopulateCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventRefreshNextCommand",
    "description": "A command that sets the state of the next button in the Create Shelve Event dialog",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventRefreshNextCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventRefreshZonesCommand",
    "description": "A command that refreshes the Create Shelve Event dialog zones",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventRefreshZonesCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingCreateShelveEventsCommand",
    "description": "A command that sets the durations for the selected group",
    "code": "<PressPerform>\n        <Command value=\"CreateShelveEventsCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingExtendShelveGroupCommand",
    "description": "A command that handles the extending of an alarm shelve group",
    "code": "<PressPerform>\n        <Command value=\"ExtendShelveGroupCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingPopulateExtendDlgCommand",
    "description": "A command that populates values in extend shelve event dialog",
    "code": "<SelectPerform>\n        <Command value=\"PopulateExtendDlgCommand\"/>\n    </SelectPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingPopulateShowExecutionCommand",
    "description": "A command that populates values in shelve execution tool",
    "code": "<SelectPerform>\n        <Command value=\"PopulateShowExecutionCommand\"/>\n    </SelectPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingSetShowExecutionFlag",
    "description": "A command that sets flags for view execution dialog",
    "code": "<PressPerform>\n        <Command value=\"SetShowExecutionFlag\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingUnshelveAlarmsCommand",
    "description": "Unshelve a set of selected alarms",
    "code": "<PressPerform>\n        <Command value=\"UnshelveAlarmsCommand\">\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "alarmshelvingUnshelveEventCommand",
    "description": "A command that unshelves the selected event",
    "code": "<PressPerform>\n        <Command value=\"UnshelveEventCommand\">\n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "authorityCancelSearchCommand",
    "description": "Clears the last search text and last found nodes from the AuthorityDataStore to enable the control zone search command to repopulate the nodes on its next execution.",
    "code": "<PressPerform>\n        <Command value=\"CancelSearchCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityChangeOMASelfAssignCommand",
    "description": "Changes the OMA self-assign flag for a set of control zones. This prevents or allows OMA users to assign events to themselves in this zone.",
    "code": "<PressPerform>\n        <Command value=\"ChangeOMASelfAssignCommand\">\n            <Config name=\"flag_value\" value=\"#falg_value#\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityChangeRulesetCommand",
    "description": "Changes the ruleset for a set of control zones if the user is authorized.",
    "code": "<PressPerform>\n        <Command value=\"ChangeRulesetCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityChangeSuppressCallbacksCommand",
    "description": "Changes the suppress callback generation flag for a set of control zones.",
    "code": "<PressPerform>\n        <Command value=\"ChangeSuppressCallbacksCommand\">\n            <Config name=\"flag_value\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "authorityCheckSelectedZonesCommand",
    "description": "This command sets the context of buttons based on how many zones are selected.",
    "code": "<PressPerform>\n        <Command value=\"CheckSelectedZonesCommand\">\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityCloseCommand",
    "description": "Unsubscribes the user from the subscribed control zones on logout.",
    "code": "It should be called from the environment to close down the \n    Authority tool when the user logs out",
    "icon": "üíª"
  },
  {
    "title": "authorityControlZoneActionCommand",
    "description": "This command subscribes or unsubscribes a user to a selected control zone depending upon the way it is configured in the command tag in the XML file.",
    "code": "<PressPerform>\n        <Command value=\"ControlZoneActionCommand\">\n            <Config name=\"flag\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityControlZoneSearchCommand",
    "description": "Search for a node in the control zone tree.",
    "code": "<PressPerform>\n        <Command value=\"ControlZoneSearchCommand\">\n            <Config name=\"match_case\" value=\"false\"/>\n            <Config name=\"whole_words\" value=\"false\"/>\n        </Command>\n    </PressPerform>\n    \n    This command goes recursively to find out all the nodes which matches the\n    search criterion entered by the user.",
    "icon": "üíª"
  },
  {
    "title": "authorityInvisibleToolCommand",
    "description": "Make the tool invisible",
    "code": "<PressPerform>\n        <Command value=\"InvisibleToolCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityLoadZonesCommand",
    "description": "This command populates the whole tree with the control zones and initially selects the first child of the root node.",
    "code": "<PressPerform>\n        <Command value=\"LoadZonesCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "authorityLoadZonesForAllUsersCommand",
    "description": "This command populates the tree with all those control zones which any of the user has subscribed",
    "code": "<PressPerform>\n        <Command value=\"LoadZonesForAllUsersCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "authorityLoadZonesForUserCommand",
    "description": "This command populates the tree with only those control zones which the current application user has subscribed to.",
    "code": "<PressPerform>\n        <Command value=\"LoadZonesForUserCommand\">\n            <Config name=\"user\" value=\"system\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "authorityPopulateAlarmsCommand",
    "description": "This command populates the AlarmsDataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAlarmsCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "authorityPopulateAvailableRulesetsCommand",
    "description": "This command populates the AvailableRulesetsDataStore.",
    "code": "<Perform>\n        <Command value=\"PopulateAvailableRulesetsCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "authoritySetCheckBoxesCommand",
    "description": "This command sets the checkbox of the selected rows in the AuthorityDataStore.",
    "code": "<PressPerform>\n        <Command value=\"SetCheckBoxesCommand\">\n            <Config name=\"check\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authoritySetUserAndZoneCommand",
    "description": "Set the user and the zone name as per the control zone selected in the tree. Also set the flag to indicate if the current user has already subscribed to this control zone node",
    "code": "<PressPerform>\n        <Command value=\"SetUserAndZoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityUnsubscribeAllCommand",
    "description": "This command removes all subscriptions.",
    "code": "<PressPerform>\n        <Command value=\"UnsubscribeAllCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "authorityUpdateSubscriptionCommand",
    "description": "This command updates the subscribed channels.",
    "code": "<PressPerform>\n        <Command value=\"UpdateSubscriptionCommand\"/>\n    </PressPerform>\n    \n    This command is executed during initialisation of the tool, \n    as well as everytime the user subscribes or unsubscribed from a control zone",
    "icon": "üíª"
  },
  {
    "title": "callentryCallIDPopulateCommand",
    "description": "This command populates the DS_CUST_INFO DataStore.",
    "code": "<PressPerform>\n        <Command value=\"CallIDPopulateCommand\">\n            <Config name=\"customer_phone_parentheses\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryCancelCallCommand",
    "description": "Edit the DS_CALL_HISTORY to create a cancel call request. Sends in cancellation reason and cancel call trouble code.",
    "code": "<PressPerform>\n        <Command value=\"CancelCallCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryClearCancelReasonCommand",
    "description": "Clears the CallHistoryDataStore.REASON field from CallHistoryDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ClearCancelReasonCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"ClearCancelReasonCommand\" \n        class=\"com.ces.centricity.ops.callentry.ClearCancelReasonCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "callentryClearCommand",
    "description": "Clears all data in the DS_CALL_DATA and DS_CUST_INFO DataStores.",
    "code": "<PressPerform>\n        <Command value=\"ClearCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryCloseDialogNoBusyCursorCommand",
    "description": "Closes and disposes the dalog. This also supresses the busy cursor.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"CloseDialogNoBusyCursorCommand\"/>\n    </Perform>",
    "icon": "üìÇ"
  },
  {
    "title": "callentryEditFuzzyCommand",
    "description": "Sets the DS_CALL_DATA.CALLBACK_REQUEST to the configured default DEFAULT_CALLBACK_REQUEST.",
    "code": "<PressPerform>\n        <Command value=\"EditFuzzyCommand\">\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryEditIncidentCommand",
    "description": "Edit the Call Data for an Incident.",
    "code": "<PressPerform>\n        <Command value=\"EditIncidentCommand\"/>\n    </PressPerform>\n     \n    Normally used to change an appointment, or customer comments.",
    "icon": "üíª"
  },
  {
    "title": "callentryEnableClearCommand",
    "description": "Sets the MODIFIED internal state flag, which enables the ACT_CLEAR, in the usual configuration.",
    "code": "<SelectPerform>\n        <Command value=\"EnableClearCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryEnableSearchCommand",
    "description": "Sets the SEARCHABLE internal state flag to true, which enablesthe ACT_SEARCH in the usual configuration.",
    "code": "<ModifiedPerform>\n        <Command value=\"EnableSearchCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryGetUserCommand",
    "description": "Populate the user name field.",
    "code": "<ModifiedPerform>\n        <Command value=\"GetUserCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryIntersectionSearchCommand",
    "description": "Searches for a street intersection call based on one or two street names entered into the Intersection Search section.",
    "code": "<PressPerform>\n        <Command value=\"IntersectionSearchCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryPopulateCallHistoryCommand",
    "description": "This command populates the DS_CALL_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCallHistoryCommand\">\n           <Config name=\"fromWW\" value=\"false\"/>\n           <Config name=\"datastore\" value=\"DS_CUST_INFO\"/>\n           <Config name=\"customerId\" value=\"ID\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryPopulateOutageHistoryCommand",
    "description": "This command populates the DS_OUTAGE_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateOutageHistoryCommand\">\n           <Config name=\"fromWW\" value=\"false\"/>\n           <Config name=\"datastore\" value=\"DS_CUST_INFO\"/>\n           <Config name=\"customerId\" value=\"ID\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryPopulateOutagesSummaryCommand",
    "description": "This command retrieves outages from the globalProperties and populates into the  DS_WA_ALARMS DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateOutagesSummaryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySaveCommand",
    "description": "Saves the DS_CALL_DATA as an Incident and reports it to JMService.",
    "code": "<PressPerform>\n        <Command value=\"SaveCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySearchCallsCommand",
    "description": "This command populates the DS_CUST_INFO DataStore by searching the INCIDENTS table based on the values entered in the customer fields. If no rows result, displays an error. If more than one row is found, displays a selection dialog.  If one row is found, populates the GUI with that customer.",
    "code": "<PressPerform>\n        <Command value=\"SearchCallsCommand\">\n            <Config name=\"customer_phone_parentheses\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySearchCommand",
    "description": "This command populates the DS_CUST_INFO DataStore based on the informationprovided in the call entry window",
    "code": "<PressPerform>\n        <Command value=\"SearchCommand\">\n            <Config name=\"loading_customer_info_by_call_id\" value=\"true\"/>\n        </Command>\n    </PressPerform>\n    \n    If no rows result, displays an error. If more than one row is found, \n    displays a selection dialog. If one row is found, populates the GUI with \n    that customer.",
    "icon": "üíª"
  },
  {
    "title": "callentrySetAppointmentCommand",
    "description": "Clear the appt_time or appt_range depending on the appt_time selected from from Type drop down.",
    "code": "<PressPerform>\n        <Command value=\"SetAppointmentCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySetCallbackCommand",
    "description": "Sets the current time to the DS_CALL_DATA DataStore for the current value key. Clears the old value from the DataStore.",
    "code": "<SelectPerform>\n        <Command value=\"SetCallbackCommand\"/>\n    </SelectPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "callentrySetExactMatchSearchingCommand",
    "description": "Set the useExactMatchSearch flag in DS_CUST_INFO to the configured value.",
    "code": "<PressPerform>\n        <Command value=\"SetExactMatchSearchingCommand\">\n            <Config name=\"flag\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySetMaxSearchCommand",
    "description": "Sets the callentry's maximum number of customers that one can retreive from the database.",
    "code": "<PressPerform>\n        <Command value=\"SetMaxSearchCommand\"/>\n    </PressPerform>\n    \n    This will validate that the user did not enter a value too large\n    in the set max search result dialog.  It first will look for\n    the configured maximum (as set in the CallEntry.xml file global\n    properties as MAX_RESULT) If not found it will use the default value of 200.",
    "icon": "üíª"
  },
  {
    "title": "callentrySetSoundexSearchingCommand",
    "description": "Set the useSoundexSearch flag in DS_CUST_INFO to the configured value.",
    "code": "<PressPerform>\n        <Command value=\"SetSoundexSearchingCommand\">\n            <Config name=\"flag\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySetWildcardSearchingAfterCommand",
    "description": "Sets the wildcardSearchingAfter flag in DS_CUST_INFO to the configured value.",
    "code": "<PressPerform>\n        <Command value=\"SetWildcardSearchingAfterCommand\">\n            <Config name=\"flag\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentrySetWildcardSearchingBeforeCommand",
    "description": "Sets the wildcardSearchingBefore flag in DS_CUST_INFO to the configured value.",
    "code": "<PressPerform>\n        <Command value=\"SetWildcardSearchingBeforeCommand\">\n            <Config name=\"flag\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryShowCustomerInformationCommand",
    "description": "Display the customer data selected in the DS_CUST_INFO DataStore.",
    "code": "<PressPerform>\n        <Command value=\"ShowCustomerInformationCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryShowOutageDetailsCommand",
    "description": "Display the DLG_OUTAGE_DETAILS for the first selected row in the DS_OUTAGE_HISTORY.",
    "code": "<PressPerform>\n        <Command value=\"ShowOutageDetailsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryShowSetMaxSearchingResultCommand",
    "description": "Displays a dialog that sets the callentry's maximum number of customers that one can retreive from the database.",
    "code": "<PressPerform>\n        <Command value=\"ShowSetMaxSearchingResultCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "callentryValidateCallDataCommand",
    "description": "Validates DS_CALL_DATA entries.",
    "code": "<PressPerform>\n        <Command value=\"ValidateCallDataCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "conditionPopulateConditionsCommand",
    "description": "Populate conditions in the specified ObjectDataStore.",
    "code": "<Command value=\"PopulateConditionsCommand\">\n              <Config name=\"datastore\" value=\"DS_NOTE_SUMMARY\"/>\n              <Config name=\"condition_type\" value=\"note\"/>\n              <Config name=\"use_zones\" value=\"true\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsAddFilterCommand",
    "description": "This commands checks whether the newly entered filter present in the existing list of filters or not. It will add a filter if it does not exist",
    "code": "<PressPerform>\n        <Command value=\"AddFilterCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsAddMobileUserTypeCommand",
    "description": "This command adds a user type.",
    "code": "<PressPerform>\n        <Command value=\"AddUserTypeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsAddUserTypeCommand",
    "description": "This command adds a user type.",
    "code": "<PressPerform>\n        <Command value=\"AddUserTypeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsApplySRSRuleFilterCommand",
    "description": "Turns on the SRS rules filter.",
    "code": "<SelectPerform>\n        <Command value=\"ApplySRSRuleFilterCommand\"/>\n    <SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCancelSRSRuleDefinitionSearchCommand",
    "description": "Cancel the search (filter) on the SRS Rules tree. This Command also sets the SRS_RULE_DEFINITION_FILTERED status flag to false and clears the DS_SRS_RULES_DEFAULT.RULE_DEFINITION_SEARCH_TEXT",
    "code": "<PressPerform>\n        <Command value=\"CancelSRSRuleDefinitionSearchCommand\"/>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsChangeCesParameterCommand",
    "description": "This command updates the CES parameters tab",
    "code": "<SelectPerform>\n        <Command value=\"ChangeCesParameterCommand\">\n            <Config name=\"parameter_name\"\n                    value=\"LDAP_DIRECTORY_SERVICES_LEVEL\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsChangeEDMenuOptionOrderCommand",
    "description": "Change the option menu ordering for an Event Details option Menu.",
    "code": "<PressPerform>\n       <Command value=\"ChangeEDMenuOptionOrderCommand\">\n           <Config name=\"action\"\n                    value=\"MOVE_UP\"/>\n       </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsChangeMobileUserTypeOrderCommand",
    "description": "Change the mobile user type ordering for a user",
    "code": "<PressPerform>\n        <Command value=\"ChangeMobileUserTypeOrderCommand\">\n            <Config name=\"action\" value=\"MOVE_UP\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsChangeUserTypeOrderCommand",
    "description": "Change the user type ordering for a user",
    "code": "<PressPerform>\n        <Command value=\"ChangeUserTypeOrderCommand\">\n            <Config name=\"action\" value=\"MOVE_UP\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCheckAuthenticationModeCommand",
    "description": "Checks the authentication mode of the user.",
    "code": "<SelectPerform>\n        <Command value=\"CheckAuthenticationModeCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCheckLogoutStatusCommand",
    "description": "This command checks the logout status of the user.",
    "code": "<SelectPerform>\n        <Command value=\"CheckLogoutStatusCommand\"/>\n    </SelectPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsClearTextFieldCommand",
    "description": "Command to clear text fields.",
    "code": "<Command value=\"ClearTextFieldCommand\" when = \"(ADDING_SRS_RULE and !CONFIG_INCIDENT and!CMB_SRS_DISPLAY_NAME_POPULATED)\">\n<Config name=\"text_field\" value=\"TXT_SRS_TEMP_DISPLAY_NAME\"/>\n </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsCreateInstallerCommand",
    "description": "Creates a client installer for this environment.",
    "code": "<PressPerform>\n        <Command value=\"CreateInstallerCommand\"/>\n        <Config name=\"include_jre\" value=\"true\"/>\n        <Config name=\"products\" value=\"true\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCurrentMobileUserTypeSelectedCommand",
    "description": "This command sets the current select mobileuser type.",
    "code": "<SelectPerform>\n        <Command value=\"CurrentUserTypeSelectedCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCurrentUserTypeSelectedCommand",
    "description": "This command sets the current select user type.",
    "code": "<SelectPerform>\n        <Command value=\"CurrentUserTypeSelectedCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDDSRecacheControlZonesCommand",
    "description": "This command recaches the control zones.",
    "code": "<PressPerform>\n        <Command value=\"DDSRecacheControlZonesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteAlarmShelveConfirmationCommand",
    "description": "This command confirms with the user, then deletes the selected Alarm Shelve row and all LIMITS rows for that group.",
    "code": "<PressPerform>\n        <Command value=\"DeleteAlarmShelveConfirmationCommand\">\n            <Config name=\"datastore\" value=\"DS_NMS_ALARM_SHELVE_REASON\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsDeleteFilterCommand",
    "description": "This command deletes a filter from current filter datastore.",
    "code": "<PressPerform>\n        <Command value=\"DeleteFilterCommand\"/> \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteLimitBandCommand",
    "description": "This command performs some validation then deletes the selected limit band from the LIMITS database table.",
    "code": "<PressPerform>\n        <Command value=\"DeleteLimitBandCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteLimitGroupCommand",
    "description": "This command confirms with the user, then deletes the LIMIT_GROUPS row and all LIMITS rows for that group.",
    "code": "<PressPerform>\n        <Command value=\"DeleteLimitGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteLimitSetCommand",
    "description": "This command confirms with the user, then deletes the chosen limit set and all limit bands associated with it, across all limit groups.",
    "code": "<PressPerform>\n        <Command value=\"DeleteLimitSetCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteMobileUserMembersCommand",
    "description": "This command removes the selected user type.",
    "code": "<PressPerform>\n        <Command value=\"DeleteUserTypeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteMobileUserTypeCommand",
    "description": "This command removes the selected user type.",
    "code": "<PressPerform>\n        <Command value=\"DeleteUserTypeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteOptionCommand",
    "description": "This command removes an Event Details option menu.",
    "code": "<PressPerform>\n        <Command value=\"DeleteOptionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteSchematicOptionCommand",
    "description": "This command removes Schematic Option from the table.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSchematicOptionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteSRSRuleCommand",
    "description": "This command removes the SRS rule.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSRSRuleCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteUserCommand",
    "description": "This command deletes the selected user account.",
    "code": "<PressPerform>\n        <Command value=\"DeleteUserCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDeleteUserTypeCommand",
    "description": "This command removes the selected user type.",
    "code": "<PressPerform>\n        <Command value=\"DeleteUserTypeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsEDMenuOptionSelectedCommand",
    "description": "This command sets the current selected menu option.",
    "code": "<PressPerform>\n        <Command value=\"EDMenuOptionSelectedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsExitConfirmedCommand",
    "description": "Command to add WA filter or repopulate the specified tabs.",
    "code": "<SelectPerform>\n        <Command value=\"ExitConfirmedCommand\">\n            <Config name=\"process\" value=\"add\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFilterSRSRuleDefinitionCommand",
    "description": "Search (filter) on the SRS Rules tree based on the DS_SRS_RULES_DEFAULT.RULE_DEFINITION_SEARCH_TEXT value. This Command also sets the SRS_RULE_DEFINITION_FILTERED status flag to true.",
    "code": "<PressPerform>\n        <Command value=\"FilterSRSRuleDefinitionCommand\"/>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsGenerateSQLCommand",
    "description": "Generate SQL for a set of tables.",
    "code": "<Command value=\"GenerateSQLCommand\">\n        <Config name=\"tables\"\n                value=\"CES_USER, ENV_ACCESS\"/>\n        <Config name=\"queries\"\n                value=\"select USER_NAME, FULL_NAME, PASSWORD, DEFAULT_ZONE_SET, EXCLUDED_ZONE_SET, EXTERNAL, PRIORITY, ACTIVE from CES_USER order by user_name|select PRODUCT, USER_NAME, ENVIRONMENT, ENV_ORDER from ENV_ACCESS order by USER_NAME, PRODUCT, ENV_ORDER\"/>\n        <Config name=\"comments\"\n                value=\"/* CES_USER table */|/* ENV_ACCESS table */\"/>\n        <Config name=\"pre_statements\"\n                value=\"delete from CES_USER_ST;|delete from ENV_ACCESS_ST;\"/>\n        <Config name=\"post_statements\"\n                value=\"commit;|commit;\"/>\n        <Config name=\"append\" value=\"false\"/>\n        <Config name=\"staging_tables\"\n                value=\"CES_USER_ST, ENV_ACCESS_ST\"/>\n        <Config name=\"keep_progress_bar_visible\"\n                value=\"true\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsInitFilterTableCommand",
    "description": "Initializes the Work Agenda filter table and datastore.",
    "code": "<Perform>\n        <Command value=\"InitFilterTableCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsLimitSetSelectedCommand",
    "description": "From the key DS_LIMITS_DEFAULT.LIMIT_SET_ID, set the DS_LIMITS_DEFAULT.LIMIT_SET_NAME.",
    "code": "<PressPerform>\n        <Command value=\"LimitSetSelectedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateCesParametersCommand",
    "description": "Populates the DS_CES_PARAMETERS DataStore.",
    "code": "<Perform>\n        <Command value=\"PopulateCesParametersCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateCommand",
    "description": "Command to populate a datastore (that implements the OMSConfigToolDataStore interface).",
    "code": "<Command value=\"PopulateCommand\">\n        <Config name=\"datastore_name\" value=\"DS_CURRENT_SRS_RULES\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateFilterTableCommand",
    "description": "Populates the Work Agenda filter table and datastore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateFilterTableCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateFlmCustomModesCommand",
    "description": "Command to populate a FLM custom modes from srs rules table",
    "code": "<Command value=\"PopulateFlmCustomModesCommand\">\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateNCGCommand",
    "description": "Command to populate NCG_CLS and NCG_IDX for a selected ZONE",
    "code": "<Command value=\"PopulateNCGCommand\">\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateNCGZoneCommand",
    "description": "Command to populate Zone for a selected SRS Rule",
    "code": "<Command value=\"PopulateNCGZoneCommand\">\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateSRSRuleDocumentationCommand",
    "description": "This command populates the SRS_RULE_DOCUMENTATION of the DS_SRS_RULES_DEFAULT DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateSRSRuleDocumentationCommand\"/>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateTeOptionsCommand",
    "description": "State Transitions window in CA tool provides 3 options as combo boxes(CB) to usersBased on each selection the other combo box items gets changes.This command helps to populate the other combo boxes based on one CB selction",
    "code": "<SelectPerform>\n        <Command value=\"PopulateTeOptionsCommand\">\n            <Config name=\"source\"\n                    value=\"Combo Box Name in State transitions window of CA tool\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateValuesforSRSDialogCommand",
    "description": "Populates the DS_SELECTED_SRS_RULE if there is no row selected from TBL_CURRENT_SRS_RULES  and the selected node from the tree is an actual rule.",
    "code": "<SelectPerform>\n        <Command value=\"PopulateValuesforSRSDialogCommand\"/>\n    <SelectPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsRefreshStateTransitionsCommand",
    "description": "This command reloads the state transitions related data from the DB.",
    "code": "<SelectPerform>\n        <Command value=\"RefreshStateTransitionsCommand\">\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsResetLoginCommand",
    "description": "Logs the user out of the system by marking the database row as logged off (forced).",
    "code": "<PressPerform>\n        <Command value=\"ResetLoginCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsSaveConfigCommand",
    "description": "This command saves the user configuration as an SQL file.",
    "code": "<PressPerform>\n        <Command value=\"SaveConfigCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveFeederStatusCommand",
    "description": "This command saves the status of the different DMS applications to the database.",
    "code": "<PressPerform>\n        <Command value=\"SaveFeederStatusCommand\"/>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsSaveFilterCommand",
    "description": "This command saves the filters",
    "code": "<PressPerform>\n        <Command value=\"SaveFilterCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveLimitBandCommand",
    "description": "This command performs some validation against the new limit band then saves it to the database.",
    "code": "<PressPerform>\n        <Command value=\"SaveLimitBandCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveLimitGroupCommand",
    "description": "This command saves the limit group to the LIMIT_GROUPS database table.",
    "code": "<PressPerform>\n        <Command value=\"SaveLimitGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveLimitSetCommand",
    "description": "This command saves the limit set to the database.",
    "code": "<PressPerform>\n        <Command value=\"SaveLimitSetCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveOptionCommand",
    "description": "this command saves the Options configuration.",
    "code": "<PressPerform>\n        <Command value=\"SaveOptionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveSchematicOptionCommand",
    "description": "this command saves the Options configuration.",
    "code": "<PressPerform>\n        <Command value=\"SaveSchematicOptionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveSchematicOptionPackCommand",
    "description": "this command saves the Options configuration.",
    "code": "<PressPerform>\n        <Command value=\"SaveSchematicOptionPackCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsSaveSRSRuleCommand",
    "description": "this command saves the SRS rule to the database.",
    "code": "<PressPerform>\n        <Command value=\"SaveSRSRuleCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveUserCommand",
    "description": "This command saves the user to the database.",
    "code": "<PressPerform>\n        <Command value=\"SaveUserCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSearchforRuleDisplayNameCommand",
    "description": "Command to verify the modified value of code rule name/display name. If there is an associated display name/code rule name for the modified value, Populate the associated text boxes or combo box.",
    "code": "<Command value=\"SearchforRuleDisplayNameCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsSendHighLevelMessageCommand",
    "description": "Command to send a high-level message.",
    "code": "<PressPerform>\n        <Command value=\"SendHighLevelMessageCommand\">\n            <Config name=\"node\" value=\"any\"/>\n            <Config name=\"process\" value=\"JMService\"/>\n            <Config name=\"message_string\" value=\"recache\"/>\n            <Config name=\"tools_only\" value=\"false\"/>\n            <Config name=\"services_only\" value=\"true\"/>\n            <Config name=\"send_synchronously\" value=\"false\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetErtDeviceClassCommand",
    "description": "Store device class selected by user into DS_ERT_EDITOR datastore",
    "code": "<Action name=\"ACT_DEVICE_CLASS_SELECTED\">\n<Command value=\"SetErtDeviceClassCommand\"/>\n</Action>",
    "icon": "üìò"
  },
  {
    "title": "commandsSetFeederStatusCommand",
    "description": "This command changes the status of the different DMS applications.",
    "code": "<PressPerform>\n       <Command value=\"SetFeederStatusCommand\">\n          <Config name=\"status\" value=\"A\"/>\n          <Config name=\"application\" value=\"flisr\"/>\n       </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsSetWeightedCustomerCountCommand",
    "description": "Saves a new weighted customer priorty for the customer loaded in the DS_CUST_INFO datastore.  Account number comes from DS_CUST_INFO.ACCOUNT_NUMBER and the new weighted custoemr priority valuecomes from DS_CUST_INFO.NEW_WEIGHT.\n\nIf this command fails, one of the following error codes is used:\nOmsClientException.SET_WEIGHT_BAD_ACCOUNT - Invalid account number\nOmsClientException.SET_WEIGHT_BAD_WEIGHT - Invalid weighted priority\nOmsClientException.SET_WEIGHT_DATABASE_ERROR - Error writing to database\nOmsClientException.SET_WEIGHT_NOT_CONFIGURED - Weighted customer counts are not configured in services\nOmsClientException.SET_WEIGHT_FAILED - General failure\nOmsClientException.SET_WEIGHT_BAD_PARAM - Bad input parameter",
    "code": "This command is only applicable if the setWeightedCounts srs rule is enabled. Here is an example:\n  <PressPerform>\n<Command value=\"SetWeightedCustomerCountCommand\"/>\n</PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSortDataStoreCommand",
    "description": "Command to sort a datastore by the configured colum.",
    "code": "<Command value=\"SortDataStoreCommand\">\n        <Config name=\"data_store\" value=\"DS_SRS_RULE_SETS\"/>\n        <Config name=\"column\" value=\"#SET_NAME\"/>\n    </Command>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsSSClearRulesetCacheCommand",
    "description": "This command clears the Suggested Switching Ruleset cache allowing it to be re-cached.",
    "code": "<PressPerform>\n        <Command value=\"SSClearRulesetCacheCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsUpdateStateTransitionsCommand",
    "description": "Filters the state transitions based on the APP, GROUP and STATE combo box selections and update the same in the table and graph areas",
    "code": "<SelectPerform>\n        <Command value=\"UpdateStateTransitionsCommand\">\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsUpdateZoneSetCommand",
    "description": "This command updates the Default/Excluded Zone Set datastore used in Configuration Assistant. If the a selection is made in the Default Zone Set, the selection is removed from the list in Excluded Zone Set and vice versa. This is implemented to prevent the user from having a zone set that is both  in its Default Zone Set and Excluded Zone Set.",
    "code": "<SelectPerform>\n        <Command value=\"UpdateZoneSetCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsValidateFeederSelectionCommand",
    "description": "This command validates the selection of mutiple feeders for volt var settings.",
    "code": "<PressPerform>\n       <Command value=\"validateFeederSelectionCommand\">\n       </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsVerifySRSRuleTableSelectionCommand",
    "description": "Verify the SRS rule table selection.",
    "code": "<SelectPerform>\n        <Command value=\"VerifySRSRuleTableSelectionCommand\"/>\n    <SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlAddConditionDataCommand",
    "description": "This command is for the notes panel which sets the flag to indicate that now the panel is in adding mode.",
    "code": "<PressPerform>\n        <Command value=\"AddConditionDataCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "controlAddEditCancelCommand",
    "description": "This command cancels the Add/Edit mode in the notes panel",
    "code": "<PressPerform>\n        <Command value=\"AddEditCancelCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlAddEditTextModifiedCommand",
    "description": "Enables/disables the save button on the notes panel",
    "code": "<ModifiedPerform>\n        <Command value=\"AddEditTextModifiedCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlAddGroundCommand",
    "description": "Adds a ground to the selected Object.",
    "code": "<PressPerform>\n        <Command value=\"AddGroundCommand\">\n           <Config name=\"dialog_name\" value=\"DLG_GROUND_SECONDARY_SELECTION\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlBypassJumperCommand",
    "description": "Performs an inline jumper with a bypass switch. Asks the user to select a side for the bypass. Then Uses the -bypassCls, -bypassSymbolCls, -bypassDistancearguments from the CONTROL_ACT record to place the bypass switch and configure its symbol.",
    "code": "<PressPerform>\n        <Command value=\"BypassJumperCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlChangeFlisrStatusCommand",
    "description": "This command will enable or disable a FLISR status for a device.",
    "code": "</PressPerform>\n        <Command value=\"ChangeFlisrStatusCommand\">\n            <Config name=\"action\" value=\"enable\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "controlChangeLoadCommand",
    "description": "This Command uses the \"USE_AMPS\" status flag to detemine whether to pass DS_CONTROL_DEFAULT.AMPS or DS_CONTROL_DEFAULT.KW and DS_CONTROL_DEFAULT.KVAR to PFService as the hard-coded load for the selected device.",
    "code": "<PressPerform>\n        <Command value=\"ChangeLoadCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "controlChangeNPStatusCommand",
    "description": "This command will change the status of the network protectors to enable, disable, or place in manual mode",
    "code": "</PressPerform>\n        <Command value=\"ChangeNPStatusCommand\">\n            <Config name=\"action\" value=\"enable\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "controlChangeProtSchemeStatusCommand",
    "description": "This command will add or remove a dynamic protection scheme disable condition",
    "code": "</PressPerform>\n        <Command value=\"ChangeProtSchemeStatusCommand\">\n            <Config name=\"action\" value=\"enable\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "controlChangeVoltVarStatusCommand",
    "description": "This command will enable or disable the VoltVar status for a device.",
    "code": "</PressPerform>\n        <Command value=\"ChangeVoltVarStatusCommand\">\n            <Config name=\"action\" value=\"enable\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "controlCheckCrewsDownstreamCommand",
    "description": "Check whether there are crews downstream. This uses the Work Agenda to find outages with crews on downstream devices. So your control hierarchy must include downstream zones. If any crews are found, this displays the DLG_CONFIRM_QUARANTINE_CREWS dialog to ask the user whether to continue.",
    "code": "<PressPerform>\n        <Command value=\"CheckCrewsDownstreamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlCloseDeviceCommand",
    "description": "This command brings up the LookAhead dialog.",
    "code": "<PressPerform>\n        <Command value=\"CloseDeviceCommand/\">\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlCollectInstructedStepsCommand",
    "description": "This command collects and instructed steps from the active sheet and applies them locally to the Control Tool for use in the current instruct action. This will then use them in computing the Look Ahead data and associated warnings. See also the \"apply_instructed_steps_to_lookahead\" option to ExecuteStepsCommand.",
    "code": "<PressPerform>\n        <Command value=\"CollectInstructedStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlCommitConditionDataCommand",
    "description": "This command saves the changes being done in the notes panel.",
    "code": "<PressPerform>\n        <Command value=\"CommitConditionDataCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "controlCompleteInstructCommand",
    "description": "This command executes the selected instruct from the DS_INSTRUCTS by parsing the Condition's text for the instructed action key, then using the Control.executeAction() method.",
    "code": "<PressPerform>\n        <Command value=\"CompleteInstructCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlConditionAddCommand",
    "description": "This command creates and applies a new condition for the device.",
    "code": "</PressPerform>\n        <Command value=\"ConditionAddCommand\">\n            <Config name=\"class\" value=\"tag\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlConditionRemoveCommand",
    "description": "This command populates the TagDataStore depending upon the conditions for this device. It is called in preparation for bringing up a dialog to remove the condition.",
    "code": "<PressPerform>\n        <Command value=\"ConditionRemoveCommand\">\n            <Config name=\"class\" value=\"tag\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlCreateFLAFaultCommand",
    "description": "This command triggers the FLA algorithm using the fault currents for the selected device. If use_fault_current is true, the Command submits the currents. Otherwise, it lets PFService calculate them for the conductor.",
    "code": "<PressPerform>\n        <Command value=\"CreateFLAFaultCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlCreateFLISREventCommand",
    "description": "This command triggers the FLISR algorithm by simulating a fault at the selected device.",
    "code": "<PressPerform>\n        <Command value=\"CreateFLISREventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "controlCreateMomentaryCommand",
    "description": "This command creates a momentary event.",
    "code": "<PressPerform>\n        <Command value=\"CreateMomentaryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlDeleteNoteCommand",
    "description": "This command is for the notes panel which sets the flag to indicate that now the panel is in deleting mode.",
    "code": "<PressPerform>\n        <Command value=\"DeleteNoteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlDisplayCallEntryCommand",
    "description": "This command starts (if necessary) and displays the Web Call Entry tool for the Control Tool's device and triggers the SearchCommand, which displays a list of matching customers. If the Web Call Entry is already populated, this Command clears it first using the ClearCommand.",
    "code": "<PressPerform>\n        <Command value=\"DisplayCallEntryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlDisplayLoadChangeDialogCommand",
    "description": "Displays the passed load change dialog after initializing the DS_CONTROL_DEFAULT.AMPS, KW, KVAR values and setting or clearing the USE_PHASES ststus flag.",
    "code": "<PressPerform>\n        <Command value=\"DisplayLoadChangeDialogCommand\">\n            <Command name=\"load_type\" value=\"amps\"/>\n            <Command name=\"dialog\" value=\"DLG_LOAD_CHANGE\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "controlDisplaySheetForInstructCommand",
    "description": "Load the matching switch sheet for the selected instruct action and focus on the matching step. If this is a Misc Log, just load the appropriate day.",
    "code": "<PressPerform>\n        <Command value=\"DisplaySheetForInstructCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlDisplaySimulateLoadDialogCommand",
    "description": "Displays the simulate load dialog after initializing the DS_CONTROL_DEFAULT.SIMULATE_LOAD_AMPS value.",
    "code": "<PressPerform>\n        <Command value=\"DisplaySimulateLoadDialogCommand\">\n            <Command name=\"dialog\" value=\"DLG_SIMULATE_LOAD\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "controlEditAttributesCommand",
    "description": "Allows the user to edit the attributes for the selected objects. The DLG_PROMPT_ATTRIBUTES  is displayed to the user, with prompts taken from the CONTROL_ACT record and the CONTROL_ACT_PROMPTS table, and populated initially from the ATT_xxx_VIEW for the selected object. Note that the prompt names need to match the attribute ATT_xxx_VIEW names to pre-populate it correctly.",
    "code": "<Command value=\"EditAttributesCommand\">\n   <Config name=\"temp_gen\" value=\"true\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "controlEditConditionCommand",
    "description": "This command is for the notes panel which sets the flag to indicate that now the panel is in editing mode.",
    "code": "<PressPerform>\n        <Command value=\"EditConditionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlGenerateIsolateStepsCommand",
    "description": "This command generates a new block of switching steps with actions to isolate the selected object. The code will generate steps to open and tag all instances of ss_isolate subclasses that bound the selected object. It will also add steps to tag any instances of ss_secure subclasses that are already open.  Any list of control action keys can be specified for the isolate_act_keys and secure_act_keys parameters.  Aggregate actions can be specified, but aggregate actions are currently not supported with SCADA devices.",
    "code": "<Command value=\"GenerateIsolateStepsCommand\">\n        <Config name=\"isolate_act_keys\" value=\"150,100\"/>\n        <Config name=\"secure_act_keys\" value=\"100\"/>\n        <Config name=\"block_act_key\" value=\"6500\"/>\n        <Config name=\"skip_condition_class\" value=\"tag\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "controlGenerateTagStepsCommand",
    "description": "This command generates a new block of switching steps with actions to tag devices upstream of the the selected object. The code will generate steps for each \"tag_act_keys\" action on every upstream device that belongs to the \"search_class\" abstract device class.\n If the \"meas_idx\" is specified, then all devices found that contain a digital measurement with the \"search_class\" attribute index will also get steps using the \"meas_is_on_act_keys\" or \"meas_is_off_act_keys\", depending on the current measurement value. These measurement steps preceed the tag steps.",
    "code": "<Command value=\"GenerateTagStepsCommand\">\n        <Config name=\"tag_act_keys\" value=\"6040,6041,6430\"/>\n        <Config name=\"meas_is_on_act_keys\" value=\"20030\"/>\n        <Config name=\"meas_is_off_act_keys\" value=\"355\"/>\n        <Config name=\"meas_idx\" value=\"3\"/>\n        <Config name=\"search_class\" value=\"switch\"/>\n        <Config name=\"block_act_key\" value=\"6495\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "controlGetProtSchemeCommand",
    "description": "Populates the protection scheme  details in the DS_CONTROL_TOOL for the selected device. These fields are used in the ACT_PROT_SCHEME_DIALOG dialog.",
    "code": "<PressPerform>\n        <Command value=\"GetProtSchemeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlGetRegulationDetailsCommand",
    "description": "Populates the regulation details in the DS_CONTROL_TOOL or DS_REGULATION_SETTINGS_BALLOON for the selected device based on the source of invocation (Control tool/Viewer). These fields are used in the DLG_REGULATION_DEVICE dialog.\nThe following status flags are set depending on the selected device class inheritance:\n        pf_transformers or pf_regulators: IS_DEVICE_REGULATOR\n        pf_capacitors: IS_DEVICE_CAPACITOR\n        pf_dist_gen: IS_DEVICE_DIST_GENERATOR\n        pf_src_feeder_cls or 299: IS_DEVICE_GENERATOR",
    "code": "<PressPerform>\n        <Command value=\"GetRegulationDetailsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlInlineCrossJumperCommand",
    "description": "Performs an inline cross phase jumper on the first appropriate upstream device. This is used to correct mismodeled phases.",
    "code": "<PressPerform>\n        <Command value=\"InlineCrossJumperCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlInlineJumperCommand",
    "description": "Performs an inline jumper of a conductor.",
    "code": "<PressPerform>\n        <Command value=\"InlineJumperCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlIsolateOrSecureCommand",
    "description": "This command performs an isolate or a secure action on the selected device.",
    "code": "<PressPerform>\n        <Command value=\"IsolateOrSecureCommand\">\n            <Config name=\"action\" value=\"secure\"/>\n        </Command/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlMoveOutageCommand",
    "description": "This command moves the outage upstream or downstream as configured in the xml file.",
    "code": "<PressPerform>\n        <Command value=\"MoveOutageCommand\">\n            <Config name=\"UPSTREAM\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlOpenDeviceCommand",
    "description": "This command brings up the LookAhead dialog for device open operation.",
    "code": "<PressPerform>\n        <Command value=\"OpenDeviceCommand\">\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlOperateDeviceCommand",
    "description": "This command opens or closes a device depending upon the action and phases which are required to be operated.",
    "code": "<PressPerform>\n        <Command value=\"OperateDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlOperateWorkagendaCommand",
    "description": "This command selects a row in the Work Agenda table for an event on the selected device. If none exists, it selects a Work Agenda row for an event with an active call on the selected device.",
    "code": "<PressPerform>\n        <Command value=\"OperateWorkagendaCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPlaceInstructCommand",
    "description": "This command creates and applies a new Instruct condition for the device and control action.",
    "code": "<PressPerform>\n        <Command value=\"PlaceInstructCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPopulateConditionHistoryCommand",
    "description": "Populates the DS_CONDITION_HIST for the currently selected condition in the DS_CONDITIONS DataStore. Used in the DLG_CONDITION_DATA dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateConditionHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPopulateDeviceNotesCommand",
    "description": "Populates the NotesDataStore for the selected device.",
    "code": "<PressPerform>\n        <Command value=\"PopulateDeviceNotesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPopulateRegulatorPromptsCommand",
    "description": "This command updates the Control Tool attribute prompts. Used when the user selects a temporary generator for a model edit.",
    "code": "<PressPerform>\n        <Command value=\"PopulateRegulatorPromptsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPPCrossJumperCommand",
    "description": "Performs a point to point cross phase jumper.",
    "code": "<PressPerform>\n        <Command value=\"PPCrossJumperCommand\">\n           <Config name=\"dialog_name\" value=\"DLG_SECONDARY_SELECTION\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlPPJumperCommand",
    "description": "Performs a point to point jumper.",
    "code": "<PressPerform>\n        <Command value=\"PPJumperCommand\">\n           <Config name=\"dialog_name\" value=\"DLG_SECONDARY_SELECTION\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlRemoveGroundCommand",
    "description": "Removes a ground to the selected object.",
    "code": "<PressPerform>\n        <Command value=\"RemoveGroundCommand\">\n           <Config name=\"dialog_name\" value=\"DLG_GROUND_SECONDARY_SELECTION\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlRemoveInstructCommand",
    "description": "This command removes the selected Instruct condition in the DS_INSTRUCTS.",
    "code": "<PressPerform>\n        <Command value=\"RemoveInstructCommand\">\n            <Config name=\"action\" value=\"abort_step\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlRemoveJumperCommand",
    "description": "Removes the jumper associated with the selected device.",
    "code": "<PressPerform>\n        <Command value=\"RemoveJumperCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlRemoveOldPFSolutionCommand",
    "description": "This command asks PFService to clear the DS_CONTROL_TOOL.SOLUTION_ID from the FLM database tables. This is called when closing the Look Ahead dialog.",
    "code": "<PressPerform>\n        <Command value=\"RemoveOldPFSolutionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlResetControlTimeCommand",
    "description": "Resets the time on the Control tool to the current time.",
    "code": "<PressPerform>\n        <Command value=\"ResetControlTimeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlResetDistGenTtlCommand",
    "description": "Resets the time-to-live (TTL) of a distributed generator.  The expiration will be set based on the static TTL field in minutes.",
    "code": "<PressPerform>\n        <Command value=\"ResetDistGenTtlCommmand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlResetDynamicControlDataCommand",
    "description": "Resets the dynamic control data on the Control tool.",
    "code": "<PressPerform>\n        <Command value=\"ResetDynamicControlDataCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "controlRevertLoadChangeCommand",
    "description": "This Command uses the \"USE_AMPS\" status flag to detemine whether to pass DS_CONTROL_DEFAULT.AMPS or DS_CONTROL_DEFAULT.KW and DS_CONTROL_DEFAULT.KVAR to PFService as the hard-coded load for the selected device.",
    "code": "<PressPerform>\n        <Command value=\"RevertLoadChangeCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "controlRunPowerFlowCommand",
    "description": "This command executes the power flow solution for the current device operation.",
    "code": "<PressPerform>\n        <Command value=\"RunPowerFlowCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"RunPowerFlowCommand\" \n        class=\"com.ces.centricity.ops.control.RunPowerFlowCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "controlSaveProtSchemeCommand",
    "description": "Saves the protection scheme details from the DS_CONTROL_DEFAULT for the selected device,  attribute, and value.",
    "code": "<PressPerform>\n        <Command value=\"SaveProtSchemeCommand\">\n            <Config name=\"attribute\" value=\"{DS_CONTROL_TOOL.PROT_SCHEME_ATTRIBUTE}\"/>\n            <Config name=\"value\" value=\"2\"/>\n        </Command/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSaveRegulationDeviceCommand",
    "description": "Saves the regulation details from the DS_CONTROL_DEFAULT for the selected device, attribute, and value. This command is expected to be called once for each changed attribute from the DLG_REGULATION_DEVICE dialog.",
    "code": "<PressPerform>\n        <Command value=\"SaveRegulationDeviceCommand\">\n            <Config name=\"act_key\" value=\"260401\"/>\n            <Config name=\"attribute\" value=\"AUTO\"/>\n            <Config name=\"value\" value=\"{DS_CONTROL_TOOL.AUTOMATIC}\"/>\n        </Command/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSelectLastConditionCommand",
    "description": "This command is executed on selecting the rows in TBL_NOTES_LIST table and sets the selected row to the newly added row in the table.",
    "code": "<SelectPerform>\n        <Command value=\"SelectLastConditionCommand\" when=\"ADDING_NOTE\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSendManualOutputCommand",
    "description": "Actions a manual update from the DS_CONTROL_DEFAULT for the selected device, attribute, and value. This command is expected to be called once for each step in a training scenario step created from a manual update.",
    "code": "<PressPerform>\n        <Command value=\"SendManualOutputCommand\" when=\"SILENT or FROM_SWITCHING\">\n            <Config name=\"attribute\" value=\"{DS_CONTROL_TOOL.ATTRIBUTE}\"/>\n            <Config name=\"value\" value=\"{DS_CONTROL_TOOL.SET_VALUE}\"/>\n        </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSendRegDevsToSwitchingCommand",
    "description": "This command accesses the set of regulation device steps from the ControlDataStore and asks the SwmanService to save them to the current sheet. This is very similar to SendToSwitchingCommand.",
    "code": "<PressPerform>\n        <Command value=\"SendRegDevsToSwitchingCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSendToSwitchingCommand",
    "description": "This command copies the current action and device information into a new step and asks the SwmanService to save it to the current sheet.",
    "code": "<PressPerform>\n        <Command value=\"SendToSwitchingCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSetSelectedProtSchemeCommand",
    "description": "This command sets the context of buttons on the protection scheme dialog.",
    "code": "<PressPerform>\n        <Command value=\"SetSelectedProtSchemeCommand\">\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSetViolationsCountsCommand",
    "description": "This command recalculates numbers violations for each type of violations.",
    "code": "<PressPerform>\n        <Command value=\"SetViolationsCountsCommand\">\n           <Config name=\"filter\" value=\"DS_VIOLATIONS_OPTIONS.STATUS_FILTER\"/>\n           <Config name=\"severity\" value=\"DS_VIOLATIONS_OPTIONS.VIOLATIONS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSimulateLoadAmpsCommand",
    "description": "Instruct EMService to simulate a load amperage using set_amp_load high-level message.",
    "code": "<PressPerform>\n  <Command value=\"SimulateLoadAmpsCommand\">\n  </Command>\n </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "controlSimulateOperationCommand",
    "description": "Instruct EMService to simulate measurements as if this device has been operated.",
    "code": "<PressPerform>\n  <Command value=\"SimulateOperationCommand\">\n    <Config name=\"action\" value=\"clear\"/>\n  </Command>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlSubmitCallsDownstreamCommand",
    "description": "This command submits calls from a random set of downstream customers into the system. Parameters control the percentage of downstream customers, whether the calls are from AMR customers only, and the call code to use.",
    "code": "<PressPerform>\n        <Command value=\"SubmitCallsDownstreamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlTabSelectionCommand",
    "description": "This command enable either the Open device or Close device button as the case may be, if the requisite conditions are fulfilled",
    "code": "<SelectPerform>\n        <Command value=\"TabSelectionCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlTapGeneratorCommand",
    "description": "Performs a point to point jumper.",
    "code": "<PressPerform>\n        <Command value=\"TapGeneratorCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlToggleCallDisplayCommand",
    "description": "This command Toggles the display of incidents for a particular device.",
    "code": "<PressPerform>\n        <Command value=\"ToggleCallDisplayCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlUpdateCheckBoxCommand",
    "description": "This command ensures that either 'ALL' checkbox or a set of other checkboxes are selected at a point of time.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCheckBoxCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlUpdateDigitalCommand",
    "description": "This command sends a control to the SCADA system to update a digital measurement when instructed. If not instructing, it asks the user to submit a digital measurement",
    "code": "<PressPerform>\n        <Command value=\"UpdateDigitalCommand\">\n            <Config name=\"value\" value=\"1\"/>\n            <Config name=\"attribute\" value=\"3\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlUpdateStatusQualityCommand",
    "description": "This command performs the configured action parameter on the selected Control Tool device's status measurement.",
    "code": "<PressPerform>\n        <Command value=\"UpdateStatusQualityCommand\">\n            <Config name=\"action\" value=\"INHIBIT\"/>\n        </Command>\n    </PressPerform>\n        \n Values for \"action\" parameter:\n   \"INHIBIT\" - Inhibit the Status Measurement\n   \"CANCEL_INHIBIT\" - Cancel the Inhibit on the Status Measurement\n   \"INHIBIT_ALL\" - Inhibit all measurements on the device\n   \"UNINHIBIT_ALL\" - Cancel the Inhibit for all measurements on the device\n   \"CANCEL_OVERRIDE\" - Cancels the override on the Status Measurement\n   \"ALARM_DISABLE\" - Disables alarms on the Status Measurement\n   \"CANCEL_ALARM_DISABLE\" - Reinstates alarms on the Status Measurement",
    "icon": "üìä"
  },
  {
    "title": "controlUseAggregateModelDeviceCommand",
    "description": "This command instructs the Control Tool to perform subsequent actions on the passed aggregate device, as opposed to the selected device.",
    "code": "<PressPerform>\n        <Command value=\"UseAggregateModelDeviceCommand\">\n            <Config name=\"aggregate_index\" value=\"1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlUsePrimaryDeviceCommand",
    "description": "This command instructs the Control Tool to perform subsequent actions on the selected device, as opposed to an aggregate device.",
    "code": "<PressPerform>\n        <Command value=\"UsePrimaryDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "controlValidateFlisrOperationCommand",
    "description": "This command will validate a FLISR operation before it is performed.",
    "code": "</PressPerform>\n        <Command value=\"ValidateFlisrOperationCommand\">\n            <Config name=\"action\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewAdvancedCrewCommand",
    "description": "This command is called when the OK button in DLG_ADVANCED_CREW dialog has been selected and actions the selected options",
    "code": "<PressPerform>\n        <Command value=\"AdvancedCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewAssignCrewCommand",
    "description": "Assigns a crew to one or more selected events.",
    "code": "<PressPerform>\n        <Command value=\"AssignCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewAvailableFlagCommand",
    "description": "This command changes the availability state of a crew.",
    "code": "<SelectPerform>\n        <Command value=\"AvailableFlagCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewChangeTruckLocationStatusCommand",
    "description": "This command updates the corresponding truck_location condition to the specified status.",
    "code": "<PressPerform>\n        <Command value=\"ChangeTruckLocationStatusCommand\">\n            <Config name=\"status\" value=\"200\"/>\n        </Command>",
    "icon": "üìä"
  },
  {
    "title": "crewCheckEnroutesCommand",
    "description": "This command checks whether the current crew can be enrouted.",
    "code": "<PressPerform>\n        <Command value=\"CheckEnroutesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewActivateCommand",
    "description": "Activates selected crews on the component named LST_INACTIVE or LST_ACTIVE depending on the the status of the config parameter activate.",
    "code": "<PressPerform>\n        <Command value=\"CrewActivateCommand\">\n            <Config name=\"activate\" value=\"true\"/>\n        </Command>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewChangeFocusCommand",
    "description": "This command changes focus to the selected crew. Determines the crew that was changed and updates the crew.",
    "code": "<SelectPerform>\n        <Command value=\"CrewChangeFocusCommand/\">\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewDeleteCommand",
    "description": "This command deletes the current crew.",
    "code": "<PressPerform>\n        <Command value=\"CrewDeleteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewOnShiftCommand",
    "description": "Sets selected crews on shift or off shift depending on the the status of the config parameter on_shift.",
    "code": "<PressPerform>\n        <Command value=\"CrewOnShiftCommand\">\n            <Config name=\"on_shift\" value=\"true\"/>\n            <Config name=\"when_source\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewToggleMobileCommand",
    "description": "Toggles the current CentricityCrewInfo's mobile flag from 'Y' to 'O', which signifies an overridden mobile crew.",
    "code": "<PressPerform>\n        <Command value=\"CrewToggleMobileCommand\">\n            <Config name=\"activate\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewCrewToTempCommand",
    "description": "Copies a row from the DS_CURRENT_CREW datastore to a temporary datastore. This is used to make make edits to a datastore that can be saved or discarded.",
    "code": "<PressPerform>\n        <Command value=\"CrewToTempCommand\">\n            <Config name=\"new\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewEnrouteCrewCommand",
    "description": "This command enroutes a crew to an event.",
    "code": "<PressPerform>\n        <Command value=\"EnrouteCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewEnrouteToAssignmentCommand",
    "description": "Enroutes a crew to and assigned outage. It will enroute to the rows selected in DS_CREW_ASSIGNMENTS.",
    "code": "<PressPerform>\n        <Command value=\"EnrouteToAssignmentCommand\"/> \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewFilterSelectedZoneCommand",
    "description": "Updates the crew filter to only display crews assigned to the same zone. It also sets the ZONE_FILTER_ENABLED status flag as appropriate.",
    "code": "<PressPerform>\n        <Command value=\"FilterSelectedZoneCommand\"/> \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewInitAdvancedCrewCommand",
    "description": "Populates the DLG_ADVANCED_CREW DataStore with the possible crew options for the selected outage(s). Then displays the DLG_ADVANCED_CREW dialog and allows crew status and location updates",
    "code": "<PressPerform>\n        <Command value=\"AdvancedCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewInitializeCrewTypeFilterCommand",
    "description": "Initializes the crew type filter menu to be able to filter on the various crew types.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n         <Command value=\"InitializeCrewTypeFilterCommand\">\n             <Config name=\"menu\" value=\"MNU_FILTER_TYPE\"/>\n             <Config name=\"all_filter_name\" value=\"PROPERTY.FILTER_CREW_TYPE_ALL.text\"/>\n         </Command>\n     </Perform>",
    "icon": "üíª"
  },
  {
    "title": "crewLoadOMAUsersCommand",
    "description": "Replace the subset of OMA users in the passed DataStore with the current set, as queried from the MOBILE_USERS table for the current crew.",
    "code": "<PressPerform>\n        <Command value=\"LoadOMAUsersCommand\">\n            <Config name=\"datastore\" value=\"DS_CURRENT_CREW_MEMBERS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "crewOffsiteCommand",
    "description": "Sets an en route crew to offsite.",
    "code": "<PressPerform>\n        <Command value=\"OffsiteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewOnsiteCommand",
    "description": "Sets an en route crew to onsite.",
    "code": "<PressPerform>\n        <Command value=\"OnsiteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewOpenCrewSwitchingCommand",
    "description": "This command opens a single switching sheet or a list of sheets that it finds are associated to the events the crew is assigned, on-site, en-route or suspened to.  See Oracle views ACTIVE_CREW_EVENTS and SWMAN_CREW_EVENT for rules on determining what type of crew/event associations should be included in the check.",
    "code": "When called from a Crew Tool OpenCrewSwitchingCommand:\n   -  Retrieves list of SwmanCrewEvent objects for selected crews\n   -  Displays OPEN_CREW_SWITCHING.NO_SWITCHING_MESSAGE message \n       if there are no objects in the list\n   -  Opens the switching plan If there is only one object in the list\n   -  Displays DLG_CREW_SWITCHING dialog if there is more than one objects in the list\nWhen called from the DLG_CREW_SWITCHING dialog OpenCrewSwitchingCommand:\n   -  Opens selected in the dialog switch sheet(s).\n\n    <PressPerform>\n        <Command value=\"OpenCrewSwitchingCommand\">\n            <Config name=\"from_sheet_selection_list\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewPopulateGlobalCrewMemberListCommand",
    "description": "This command populates the DS_MEMBERS_LIST DataStore.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"PopulateGlobalCrewMemberListCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "crewPopulateGlobalCrewVehicleListCommand",
    "description": "This command populates the DS_VEHICLES_LIST DataStore.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"PopulateGlobalCrewVehicleListCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "crewRefreshCrewsCommand",
    "description": "Reloads the list of crews. This should be used when the All Zones option is toggeld on or off. That Y/N flag is obtained from DS_CREW_DEFAULT.SHOW_ALL_ZONES.",
    "code": "<PressPerform>\n        <Command value=\"RefreshCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewRefreshEnrouteCommand",
    "description": "Refreshes the current enroute object to get rid of any local changes.",
    "code": "<Perform name=\"Show\" category=\"showed\">\n        <Command value=\"RefreshEnrouteCommand\">\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "crewReleaseCommand",
    "description": "Releases a crew from the specified event",
    "code": "<PressPerform>\n        <Command value=\"ReleaseCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewReleaseFromAllEventsCommand",
    "description": "Releases a crew from all events",
    "code": "<PressPerform>\n        <Command value=\"ReleaseFromAllEventsCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "crewReleaseTemporaryZoneCommand",
    "description": "Releases the temporary control zone of the currently selected crew.",
    "code": "<PressPerform>\n        <Command value=\"ReleaseTemporaryZoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewRelocateCrewCommand",
    "description": "Relocates the crew to a particular device.",
    "code": "<PressPerform>\n        <Command value=\"RelocateCrewCommand\">\n            <Config name=\"event\" value=\"DS_CREW_LIST_MODEL.crewDispatch.event_hdl\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSaveEnrouteCommand",
    "description": "This command saves changes to a enroute.",
    "code": "<PressPerform>\n        <Command value=\"SaveEnrouteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSaveTempCommand",
    "description": "Saves the temp copy of the crew datastores out to the real datastore.",
    "code": "<PressPerform>\n        <Command value=\"SaveTempCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSelectCrewCommand",
    "description": "Select the crew in CrewList that matches the configured datasource's crew key.This crew will also be set to the current crew, and available to populatethe CrewInfo tool.",
    "code": "<PressPerform>\n        <Command value=\"SelectCrewCommand\">\n            <Config name=\"datasource\" value=\"DS_CREWS_LOCAL.crew.crewKey\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSelectDispatchCommand",
    "description": "This command returns the single dispatch for the active crew, or asks the user to choose one in the DLG_SELECT_ACTIVE_JOB dialog.",
    "code": "<PressPerform>\n        <Command value=\"SelectDispatchCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSelectEnrouteCommand",
    "description": "This command returns the single enroute for the active crew, or asks the user to choose one in the DLG_SELECT_ACTIVE_JOB dialog.",
    "code": "<PressPerform>\n        <Command value=\"SelectEnrouteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSendCrewAssignmentCommand",
    "description": "Sets a crew assignment as sent/dispatched to the crew.",
    "code": "<PressPerform>\n        <Command value=\"SendCrewAssignmentCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSendCrewInfoAssignmentCommand",
    "description": "Sends/dispatches an assignment to a crew, using the selected rows in DS_CREW_ASSIGNMENTS.",
    "code": "<PressPerform>\n        <Command value=\"SendCrewInfoAssignmentCommand\"/> \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSetCrewAvailabilityCommand",
    "description": "Sets the availability of the current crew.",
    "code": "<PressPerform>\n        <Command value=\"SetCrewAvailabilityCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSetSelectionCommand",
    "description": "This command sets the currently selected crew, device, and event in this environment.",
    "code": "<PressPerform>\n        <Command value=\"SetSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewSuspendCommand",
    "description": "Suspends a currently active crew from the specified event",
    "code": "<PressPerform>\n        <Command value=\"SuspendCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewTransferTemporaryZoneCommand",
    "description": "Transfer's a crew to a new temporary control zone.",
    "code": "<PressPerform>\n        <Command value=\"TransferTemporaryZoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewUnassignCrewCommand",
    "description": "Unassigns a crew from one or more events. It will unassign the events thatare selected in DS_CREW_ASSIGNMENTS.",
    "code": "<PressPerform>\n        <Command value=\"UnassignCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewUnenrouteCrewCommand",
    "description": "Unenroutes a crew.",
    "code": "<PressPerform>\n        <Command value=\"UnenrouteCrewCommand\">\n            <Config name=\"event\" value=\"DS_CREW_LIST_MODEL.crewDispatch.event_hdl\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewUpdateCrewInfoTimeCommand",
    "description": "Updates the onsite/offsite time using the hours field for the database DS_CREW_LIST_MODEL.",
    "code": "<PressPerform>\n        <Command value=\"UpdateEstRestoreTimeCommand\"/>\n            <Config name=\"fromArrive\" value=\"true\" />\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewValidateTransferZoneCommand",
    "description": "Validates the control zone selection in the crew transfer zone dialog, setting the VALID_TRANSFER_ZONE_SELECTED status flag accordingly.",
    "code": "<PressPerform>\n        <Command value=\"ValidateTransferZoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewVerifyMembersCommand",
    "description": "This command verifies there are no duplicate member rows.",
    "code": "<PressPerform>\n        <Command value=\"VerifyMembersCommand\">\n            <Config name=\"datastore\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT_1\"/>\n            <Config name=\"dupe_message\" value=\"CREW.DUPLICATED_MEMBER\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewVerifyVehiclesCommand",
    "description": "Verifies there are no duplicate vehicle rows.",
    "code": "<PressPerform>\n        <Command value=\"VerifyVehiclesCommand\">\n            <Config name=\"datastore\" value=\"DS_CURRENT_CREW_VEHICLES_EDIT_1\"/>\n            <Config name=\"dupe_message\" value=\"CREW.DUPLICATED_VEHICLE\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "crewViewCommand",
    "description": "This command searches and then selects the row in the workagenda table as per the earliest dispatch of the crew.",
    "code": "<PressPerform>\n        <Command value=\"ViewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damageAddDamagePartCommand",
    "description": "Adds selected damaged asset to the DS_DAMAGE_ASSETS datastore.",
    "code": "<PressPerform>\n        <Command value=\"AddDamagePartCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damageAttachmentOpenCommand",
    "description": "Opens damage assessment attachments. If an attachment is stored in NMS database then it is opened with the application associated with the file type of the attachment. In this case if the ALLOW_DOCUMENT_EDITS flag is set to false the file will be set to read-only. When this flag is set to false and a modification is made to an opened attachment by the user, the flag UNALLOWED_EDITS will be set to true. Attachments stored as links are opened in a browser window.",
    "code": "<PressPerform>\n        <Command value=\"AttachmentOpenCommand\">\n            <Config name=\"path\" value=\"$java.io.tmpdir$/OracleNMS/Damage\"/>\n            <Config name=\"modify_flag\" value=\"REPORT_MODIFIED\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damageCollectSelectedPartDetailsCommand",
    "description": "This Command sets members from the DS_DEFAULT.PART DamagePart to the DS_DEFAULT's PART_ID, PART_NAME, PART_SOURCE, PART_SEQ fields. This is used when the OK button is pressed, to prepare fields for validation. (Since DS_DEFAULT is not an ObjectDataStore, the fields cannot be accessed via configuration directly.)",
    "code": "<PressPerform>\n        <Command value=\"CollectSelectedPartDetailsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damagePopulateCrewsCommand",
    "description": "Populates datastore DS_DAMAGE_CREWS with all active crews.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damageRemoveDamagePartCommand",
    "description": "Marks rows selected in the DS_DAMAGE_ASSETS datastore as deleted",
    "code": "<PressPerform>\n        <Command value=\"RemoveDamagePartCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "damageSetDamageCrewCommand",
    "description": "Sets crew information in damage report. Sets the crewId by default, or the assignCrewId if the \"SET_ASSIGN_CREW\" flag is set.",
    "code": "<PressPerform>\n        <Command value=\"SetDamageCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "dmsGetDmsSummaryCommand",
    "description": "This command gets the summary of distribution system through database queries.",
    "code": "<SelectPerform>\n        <Command value=\"GetDmsSummaryCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "dmsGetDmsSummaryDevicesCommand",
    "description": "This command gets the summary of distribution system through database queries.",
    "code": "<SelectPerform>\n        <Command value=\"GetSystemSummaryDevices\">          <Config name=\"dev_type\" value=\"0\"/>        </Command>    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "dmsUpdateSelectedFeederCommand",
    "description": "This command updates the feeder selection edited by user.",
    "code": "<SelectPerform>\n        <Command value=\"UpdateSelectedFeederCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "eventdetailsABNRadio1Command",
    "description": "This is a command that is attached to the CB_OVERHEAD, CB_UNDERGROUND, and CB_OTHER check boxes in the AbnormalConditions screen of the EventDetails tool.",
    "code": "<PressPerform>\n        <Command value=\"ABNRadio1Command\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsABNRadio2Command",
    "description": "This is a command that is attached to the CB_PRIMARY, CB_SECONDARY and CB_TRANS check boxes of the AbnormalConditions screen of the EventDetails tool.",
    "code": "<PressPerform>\n        <Command value=\"ABNRadio2Command\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsABNRadio3Command",
    "description": "This is a command that is attached to the CB_NO and CB_YES check boxes on the AbnormalConditions screen of the EventDetails tool.",
    "code": "<PressPerform>\n        <Command value=\"ABNRadio3Command\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsCancelCompletionLogCommand",
    "description": "This command cancels the completion log update in the event details.",
    "code": "<PressPerform>\n        <Command value=\"CancelCompletionLogCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsClearErtCommand",
    "description": "This command clears estimated restore time in Event Details tool",
    "code": "<PressPerform>\n        <Command value=\"ClearErtCommand\"/>\n            <Config name=\"manual\" value=\"flase\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsClearTroubleCommand",
    "description": "This is a command used to complete an event from the EventDetails tool.If the particular event is already completed, a dialog box will display an error message",
    "code": "<PressPerform>\n        <Command value=\"ClearTroubleCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsCloseCommand",
    "description": "This is a command that closes the EventDetails Tool.",
    "code": "<PressPerform>\n        <Command value=\"CloseCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsCommodityFieldsCommand",
    "description": "This command populates a number of fields in the EquipFail panel of the EventDetails tool based on the commodity number pulldown menu.",
    "code": "<PressPerform>\n        <Command value=\"CommodityFieldsCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsCopyToRelatedEventsCommand",
    "description": "This command Performs the copy PaneTree action.  All of the data in the picklist info tables for the event is copied to related events.",
    "code": "<SelectPerform>\n        <Command value=\"CopyToRelatedEventsCommand\">\n            <Config name=\"relation_types\" value=\"4,8\"/>\n         </Command>\n     </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsDisplayEDMainPanelCommand",
    "description": "This is a command that displays the EventDetails tool main panel.",
    "code": "<PressPerform>\n        <Command value=\"DisplayEDMainPanelCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsEFRadioButtonCommand",
    "description": "This is a command that is attached to the CB_SINGLE_PHASE and the CB_THREE_PHASE check boxes in the Equipment Failure screen of the EventDetails  tool.",
    "code": "<PressPerform>\n        <Command value=\"EFRadioButtonCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsEventDetailsCommand",
    "description": "This abstract command accepts an \"include_sub_events\" parameter. Used by commands that extend this abstract command.",
    "code": "<PressPerform>\n      <Command value=\"ClearTroubleCommand\">\n        <Config name=\"include_sub_events\" value=\"false\"/>\n      </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsEventDetailsFocusCommand",
    "description": "This command focuses the Viewer on the selected Event Details device. If the selected event is condensed, the Viewer focuses on the set of devices.",
    "code": "<PressPerform>\n      <Command value=\"EventDetailsFocusCommand\">\n        <Config name=\"viewer_name\" value=\"com.splwg.oms.client.viewer.Viewer1\"/>\n      </Command> \n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsExitConfirmedCommand",
    "description": "This command confirms if exit is to be done and checks if there were modifications to be saved before exit.  This command can be run in one of two ways:  If no validation needs to be run, then ExitConfirmedCommand can be run once without the only_confirm andconfirmed parameters.  If validation needs to be run, then ExitConfirmedCommand can be run first with the only_confirm parameter set to true, followed by whatever validation needs to be run (typically one or more invocations of RunValidationCommand), and then ExitConfirmedCommand with the confirmed parameter set to true.  This makes it so that validation is run only when the user chooses 'Yes' when prompted to save unsaved changes.",
    "code": "<Perform name=\"Window\" category=\"windowClosing\">\n        <Command value=\"ExitConfirmedCommand\">\n            <Config name=\"completing_event\" value=\"false\"/>\n            <Config name=\"only_confirm\" value=\"true\"/>\n        </Command>\n        <Command value=\"RunValidationCommand\" when=\"!SWITCHING_EVENT\">\n            <Config name=\"group\" value=\"VERIFY_FORM\"/>\n        </Command>\n        <Command value=\"RunValidationCommand\" when=\"SWITCHING_EVENT\">\n            <Config name=\"group\" value=\"VERIFY_FORM_SWITCHING\"/>\n        </Command>\n        <Command value=\"ExitConfirmedCommand\">\n            <Config name=\"completing_event\" value=\"false\"/>\n            <Config name=\"confirmed\" value=\"true\"/>\n        </Command>\n    </Perform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsMaintenanceCommand",
    "description": "This is a command to change the status of an event to MNP(Maintenance Pending).",
    "code": "<PressPerform>\n        <Command value=\"MaintenanceCommand\">\n            <Config name =\"applied_rule\" value=\"27\">\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsPopulateCommand",
    "description": "This is a command that populate the EventDetails tool GUI panels based  on selected tabs.  The following status flags are set based on the event type: FUZZY_EVENT, PROBABLE_SERVICE_OUTAGE, PROBABLE_DEVICE_OUTAGE, REAL_DEVICE_OUTAGE, NON_OUTAGE, CRITICAL_MEET, FUTURE_MEET, CONFIRMED_SERVICE_OUTAGE, CONFIRMED_SECONDARY_OUTAGE, PROBABLE_MOMENTARY_OUTAGE, REAL_MOMENTARY_OUTAGE, PLANNED_EVENT, NON_ELECTRIC_EVENT, SWITCHING_EVENT, FAULT_CURRENT_EVENT, VOLTVAR_JOB, ANMS_JOB, PROT_SCHEME_EVENT, MEET_EVENT (if CRITICAL_MEET or FUTURE_MEET)\nThe following status flags are also set:\nCOMPLETED_EVENT if the event is completed\nMAINTENANCE_EVENT if the event is in a state that allows the maintenance state transition\\n\nEVENT_DETAILS_EDITED is set to false\nE911 if the DS_EVENT_DETAILS.E911_FLAG field exists and DS_EVENT_DETAILS_MSCL.trouble_code includes the text \"E911\"",
    "code": "<PressPerform>\n        <Command value=\"PopulateCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsPopulateEquipmentFailureItemCommand",
    "description": "This is a command that changes the Item text on the EquipmentFailure screen when the FAILURE_OM combobox value is changed on the EventDetails main panel.",
    "code": "<SelectPerform>\n        <Command value=\"PopulateEquipmentFailureItemCommand\"/>\n    </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsRefreshEventDetailsCommand",
    "description": "This command refreshes the Event Details screen with the currently loaded event.",
    "code": "<PressPerform>\n        <Command value=\"RefreshCommand\"/>\n            <Config name=\"allow_save\" value=\"true\">\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsReleaseCrewCommand",
    "description": "Releases all crews (assignments and dispatches) from the selected outage.",
    "code": "<SelectPerform>\n        <Command value=\"ReleaseCrewCommand\"/>\n    </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsSaveJobCommentCommand",
    "description": "This command add a job comment step to the event log using the data in the specified field.\n\nIf this command fails, one of the following error codes is used:\nOmsClientException.SAVE_JOB_COMMENT_NO_EVENT - Invalid or missing event\nOmsClientException.SAVE_JOB_COMMENT_EMPTY_COMMENT - Empty comment\nOmsClientException.SAVE_JOB_COMMENT_FAILED - Database error",
    "code": "<ReturnPerform>\n        <Command value=\"SaveJobCommentCommand\">\n            <Config name=\"event\" value=\"DS_EVENT_LOG_INFO.EVENT_IDX\"/>\n            <Config name=\"comment\" value=\"DS_EVENT_LOG_INFO.COMMENT\"/>\n        </Command>\n    </ReturnPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsStoreSelectedEventCommand",
    "description": "Command to store an event selection in DS_SELECTED_EVENT under the DS_SELECTED_EVENT column.  If the datasouce is not defined, and it is called from a viewer, it will use the viewer's selected incident or event",
    "code": "<PressPerform>\n        <Command value=\"StoreSelectedEventCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "eventdetailsUpdateCommand",
    "description": "This is a command that creates the update string for the EventDetails tool main panel data, and then sends this information to the EventDetailsBean so that the information can be updated in the DB tables.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCommand\">\n            <Config name=\"completing_event\" value=\"false\"/>\n        </Command>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateCompletionLogCommand",
    "description": "When an event is updated after is has been completed, the operator needs to specify the reason for updating a completed outage. This command updates the user entered message in the completion log",
    "code": "<PressPerform>\n        <Command value=\"UpdateCompletionLogCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateCrewContactCommand",
    "description": "This is a command updates the Crew Contact time in the Crew Contact table.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCrewContactCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateCrewForEventCommand",
    "description": "Perform an action for the selected rows in the Event Details Crews table.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCrewForEventCommand\">\n            <Config name=\"action\" value=\"SNT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateCrewTimeCommand",
    "description": "Runs a method on the tool that calls this method.",
    "code": "<ReturnPerform        <Command value=\"UpdateCrewTimeCommand\">\n            <Config name=\"time\" value=\"initStormAdmin\"/>\n        </Command>\n    </ReturnPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateEquipFailCommand",
    "description": "This is a command that creates the update string for the Equipment Failure data, and then sends this information to the EventDetailsBean so that the information can be updated in the DB tables.",
    "code": "<PressPerform>\n        <Command value=\"UpdateEquipFailCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "eventdetailsUpdateTimeCommand",
    "description": "This command updates the Time and Date fields in the EventDetails tool main panel for estimated restore date, and estimated restore time.",
    "code": "<PressPerform>\n        <Command value=\"UpdateTimeCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "flisrGenerateFlisrPlanCommand",
    "description": "This Command will generate a FLISR Switch Sheet using the selected restoration options in the DS_FLISR_PLANS.",
    "code": "<PressPerform>\n        <Command value=\"GenerateFlisrPlanCommand\"/>\n                <Config name=\"flisr_sheet_cls\" value=\"3111\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "flisrPopulateFLISRCommand",
    "description": "This Command populates the FLISR Tool using the tool's load() method. When dealing with a completed event, the status flag FLISR_EVENT_COMPLETED will be set to true.",
    "code": "<PressPerform>\n        <Command value=\"PopulateFLISRCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "flisrPopulateFLISRFlowsCommand",
    "description": "This Command populates the FLISR Tool's DS_FLISR_FLOWS datastorefor the selected row in the supplied datastore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateFLISRFlowsCommand\">\n          <Config name=\"data_store\" value=\"DS_FLISR_MULTI_TIER\"/>\n        <Command/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "flisrRestorePlanSelectedCommand",
    "description": "This Command should be triggered when a row in a flisr plan datastore is checked. This will then un-select the other restore plans for the common isolation switch and update the datastore table accordingly.",
    "code": "<PressPerform>\n        <Command value=\"RestorePlanSelectedCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "loadshedGenerateLoadShedPlanCommand",
    "description": "This Command generates a Load Shed switching sheet from the load groups in the selected in the Load Shed and Restoration UI.",
    "code": "<PressPerform>\n        <Command value=\"GenerateLoadShedPlanCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "loadshedInitLoadGroupsCommand",
    "description": "This Command initializes the load groups from LOAD_SHED_VIEW and stores the data in DS_LOAD_GROUPS data store.",
    "code": "<PressPerform>\n        <Command value=\"InitLoadGroupsCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "loadshedUpdateLoadGroupSelectionCommand",
    "description": "This Command updates the selections of feeders in a group base on its selection/unselection",
    "code": "<PressPerform>\n       <Command value=\"UpdateLoadGroupSelectionCommand\">\n      <Config name=\"manual_plan\" value=\"false\"/>\n    </Command>     </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "loginCheckPasswordCommand",
    "description": "This command will attempt to verify the checkin.",
    "code": "<PressPerform>\n        <Command value=\"CheckPasswordCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "loginEnterSystemCommand",
    "description": "This will enter the system after choosing the user type.",
    "code": "<PressPerform>\n        <Command value=\"EnterSystemCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "loginLogoutCommand",
    "description": "This command will unvalidate and logout a user.",
    "code": "<PressPerform>\n        <Command value=\"LogoutCommand\">\n            <Config name=\"VERIFY_LOGOUT\" value=\"true\" />\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "loginSetUsernameCommand",
    "description": "This command will attempt to set the login username if in LDAP mode.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"SetUsernameCommand\"/>\n    </Perform>",
    "icon": "üìÇ"
  },
  {
    "title": "modelmanagementBuildPatchCommand",
    "description": "This extracts the import files from the selected rows in the passed datastore and passes them to the nms-build-maps script. This script runs in the background and displays the result dialog when done",
    "code": "<PressPerform>\n         <Command value=\"BuildPatchCommand\">\n             <Config name=\"datastore\" value=\"DS_PATCHES\"/>\n         </Command>\n     </PressPerform>\n    \n     <CommandClass name=\"BuildPatchCommand\"\n                   class=\"com.splwg.oms.client.modelmanagement.BuildPatchCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementDeleteMapConfirmCommand",
    "description": "This extracts the selected rows from DS_PENDING_MAPS and saves them in the DS_MODEL_MGMT_DEFAULT.SELECTED_MAPS, in preparation for a subsequent call to ExecuteSystemCommand to remove them.\nThis generates an error if there are no selected rows, or if a selected row is a preprocessor file.\nIf no errors are present, displays the DELETE_MAP_CONFIRM question to confirm the action.",
    "code": "<PressPerform>\n    <Command value=\"DeleteMapConfirmCommand\"/>\n    <Command value=\"ExecuteSystemCommand\">\n         <Config name=\"command\" value=\"prod_model_remove_maps.ces \"/>\n         <Config name=\"arg_01\" value=\"{DS_MODEL_MGMT_DEFAULT.SELECTED_MAPS}\"/>\n         <Config name=\"run_on_cgw_server\" value=\"true\"/>\n    </Command>\n    <Command value=\"PopulateModelManagementCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"DeleteMapConfirmCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.DeleteMapConfirmCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementGetMapHistoryCommand",
    "description": "This extracts the first selected row from DS_PENDING_MAPS.MAP_NAME and calls populate in the DS_PATCHES_HISTORY for it.",
    "code": "<PressPerform>\n    <Command value=\"GetMapHistoryCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetMapHistoryCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetMapHistoryCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementGetModelBuildLogCommand",
    "description": "This uses the ExecuteSystemCommand to cat the model build process log file",
    "code": "<PressPerform>\n    <Command value=\"GetModelBuildLogCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetModelBuildLogCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetModelBuildLogCommand\"/>",
    "icon": "üìÇ"
  },
  {
    "title": "modelmanagementGetPatchLogCommand",
    "description": "This uses the ExecuteSystemCommand to cat the log file for the selected patch row.",
    "code": "<PressPerform>\n    <Command value=\"GetPatchLogCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetPatchLogCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetPatchLogCommand\"/>",
    "icon": "üìÇ"
  },
  {
    "title": "modelmanagementGetPatchReportCommand",
    "description": "This uses the ExecuteSystemCommand to cat the report file for the selected patch row.",
    "code": "<PressPerform>\n    <Command value=\"GetPatchReportCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetPatchReportCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetPatchReportCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementGetPostBuildProcessLogCommand",
    "description": "This uses the ExecuteSystemCommand to cat the post build process log file",
    "code": "<PressPerform>\n    <Command value=\"GetPostBuildProcessLogCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetPreprocessorLogCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetPreprocessorLogCommand\"/>",
    "icon": "üìÇ"
  },
  {
    "title": "modelmanagementGetPreprocessorLogCommand",
    "description": "This uses the ExecuteSystemCommand to cat the log file for the selected row in DS_PENDING_MAPS.",
    "code": "<PressPerform>\n    <Command value=\"GetPreprocessorLogCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"GetPreprocessorLogCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.GetPreprocessorLogCommand\"/>",
    "icon": "üìÇ"
  },
  {
    "title": "modelmanagementHaltModelBuildCommand",
    "description": "This calls the MBService API to halt an existing model build.",
    "code": "<PressPerform>\n    <Command value=\"HaltModelBuildCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"HaltModelBuildCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.HaltModelBuildCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementPopulateModelManagementCommand",
    "description": "This command refreshes the ModelManagement tool.",
    "code": "<PressPerform>\n    <Command value=\"PopulateModelManagementCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"PopulateModelManagementCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.PopulateModelManagementCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementStartModelBuildCommand",
    "description": "This calls the MBService API to resume a halted model build. Note that this does not start a new model build.",
    "code": "<PressPerform>\n    <Command value=\"StartModelBuildCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"StartModelBuildCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.StartModelBuildCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "modelmanagementToggleModelBuildReportingCommand",
    "description": "This calls the MBService API to toggle model build reporting. It uses the DS_MODEL_MGMT_DEFAULT.REPORTS_ON flag to determine whether to enable or disable the feature.",
    "code": "<PressPerform>\n    <Command value=\"ToggleModelBuildReportingCommand\"/>\n</PressPerform>\n    \n<CommandClass name=\"ToggleModelBuildReportingCommand\"\n              class=\"com.splwg.oms.client.modelmanagement.ToggleModelBuildReportingCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "myMYCSaveAcctDeviceCommand",
    "description": "This command updates the account device information.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAcctDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCActivateContactCommand",
    "description": "This command activates/inactivates the contact depending on the value set for activate.",
    "code": "<PressPerform>\n        <Command value=\"MYCActivateContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCAddAccountCommand",
    "description": "This command inserts an account from CES_CUSTOMERS table into MYC_ACCOUNTS table.",
    "code": "<PressPerform>\n        <Command value=\"MYCAddAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCAddContactForGroupCommand",
    "description": "This command adds a contact to a group.",
    "code": "<PressPerform>\n        <Command value=\"MYCAddContactForGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCAddGroupCommand",
    "description": "This command adds a Service Alert contact group to the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCAddGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCAddParamDeviceCommand",
    "description": "This command adds rows selected in the DS_SELECT_DEVICE datastore to the DS_PARAM_DEVICES datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCAddParamDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCCancelAddEditAttributeCommand",
    "description": "This command cancels the adding or editing of an attribute.",
    "code": "<PressPerform>\n        <Command value=\"MYCCancelAddEditAttributeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCCancelAddEditContactCommand",
    "description": "This command cancels the adding or editing of a contact.",
    "code": "<PressPerform>\n        <Command value=\"MYCCancelAddEditContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCCancelAddEditParamCommand",
    "description": "This command cancels the adding or editing of a parameter.",
    "code": "<PressPerform>\n        <Command value=\"MYCCancelAddEditParamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCCancelEditAccountCommand",
    "description": "This command cancels account edit mode.",
    "code": "<PressPerform>\n        <Command value=\"MYCCancelEditAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearAcctDevicesCommand",
    "description": "This command clears the devices for the selected account.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearAcctDevicesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearAddAccountCommand",
    "description": "This command clears the datastores which contain the search parameters(text and param) and search results.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearAddAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearAddAttributeDeviceCommand",
    "description": "This command clears the datastores which contain the search parameters(text and param) and search results.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearAddAttributeDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearAddContactCommand",
    "description": "This command clears the datastores which contain the search parameters(text and param) and search results.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearAddContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearAddDeviceCommand",
    "description": "This command clears the datastores which contain the search parameters(text and param) and search results.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearAddDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearContactPhonesCommand",
    "description": "This command populates the phone records for the contact selected.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearContactPhonesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearContactsCommand",
    "description": "This command populates the phone records for the contact selected.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearContactsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearCurrentAccountCommand",
    "description": "This command clears the current account extra information datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearCurrentAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearFieldCommand",
    "description": "This command clears the configured text field.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearFieldCommand\">\n            <Config name=\"field\" value=\"PARAM_TIME\"/>\n            <Config name=\"datastore\" value=\"DS_ADD_EDIT_PARAM\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCClearSelectedEventStatesCommand",
    "description": "This command clears the selected event states.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearSelectedEventStatesCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandsMYCClearSelectedEventTypesCommand",
    "description": "This command clears the selected event types.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearSelectedEventTypesCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandsMYCClearSelectedGroupsCommand",
    "description": "This command clears the selected groups.",
    "code": "<PressPerform>\n        <Command value=\"MYCClearSelectedGroupsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCDisplayAttributeInfoCommand",
    "description": "This command populates the temporary data store with a single row as per the selected row in the attributes data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCDisplayAttributeInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCDisplayContactInfoCommand",
    "description": "This command populates the temporary data store with a single row as per the selected row in the attributes data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCDisplayContactInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCDisplayParamInfoCommand",
    "description": "This command populates the temporary data store with one row as per the selected row in the parameter data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCDisplayParamInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableAddAcctContactCommand",
    "description": "This command enables the addition of customer contact by setting the flags and clearing out the temporary datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableAddAcctContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableAddAcctContactPhoneCommand",
    "description": "This command enables the addition of customer contact phone by setting the flags and clearing out the temporary data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableAddAcctContactPhoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableAddAttributeCommand",
    "description": "This command enables the addition of attribute by setting the flags and clearing out the temporary data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableAddAttributeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableAddContactCommand",
    "description": "This command enables the addition of contact by setting the flags and clearing out the temporary data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableAddContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableAddParamCommand",
    "description": "This command enables the addition of a parameter by setting the flags and clearing out the temporary data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableAddParamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditAcctContactCommand",
    "description": "This command enables the editing of a customer contact by setting the flags and populating the temporary data store with the current record.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditAcctContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditAcctContactPhoneCommand",
    "description": "This command enables the editing of a customer contact phone by setting the flags and populating the temporary data store with the current record.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditAcctContactPhoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditAcctDeviceCommand",
    "description": "This command enables the editing of a customer contact by setting the flags and populating the temporary data store with the current record.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditAcctDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditAttributeCommand",
    "description": "This command enables the editing of an attribute by setting the flags.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditAttributeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditContactCommand",
    "description": "This command enables the editing of a contact by setting the flags.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCEnableEditParamCommand",
    "description": "This command enables the editing of a parameter by setting the flags.",
    "code": "<PressPerform>\n        <Command value=\"MYCEnableEditParamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCInitMakeActiveCommand",
    "description": "This command populates the temporary data store with a single row as per the selected row in the attributes data store.",
    "code": "<PressPerform>\n        <Command value=\"MYCInitMakeActiveCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCModifyTransformCommand",
    "description": "This command modify the transform files for a message type associated to a group.",
    "code": "<PressPerform>\n        <Command value=\"MYCModifyTransformCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateContactPhonesCommand",
    "description": "This command populates the phone records for the contact selected.",
    "code": "<SelectPerform>\n        <Command value=\"MYCPopulateContactPhonesCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateContactsCommand",
    "description": "This command populates the phone records for the contact selected.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateContactsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateCustomerDevicesCommand",
    "description": "This command populates device information for the customer.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateCustomerDevicesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateMaxNotificationCommand",
    "description": "This command populates the max_messages field in the SA parameter tab  based on the ert updated checkbox status and param type.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateMaxNotificationCommand\">\n            <Config name=\"ERT_UPDATED_CHK_BOX_SEL\"\n                    value=\"true or false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateParamCustomersCommand",
    "description": "This command populates DS_PARAM_ACCOUNTS and DS_PARAM_CUSTOMERS datastores for the parameter loaded into the DS_ADD_EDIT_PARAM datastore. If DS_PARAM_ACCOUNTS is not empty this command does nothing.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateParamCustomersCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateParamDevicesCommand",
    "description": "This command populates DS_PARAM_DEVICES datastore for the parameter loaded into the DS_ADD_EDIT_PARAM datastore. If DS_PARAM_DEVICES is not empty this command does nothing.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateParamDevicesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCPopulateSearchAccountCommand",
    "description": "This command populates the accounts data store from the record selected from the search results and then populates the contact information (if any) for that account.",
    "code": "<PressPerform>\n        <Command value=\"MYCPopulateSearchAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCProcessPagingCarrierSelectionCommand",
    "description": "This command puts tha selected paging provider into the pager field on the contact add/edit panel.",
    "code": "<PressPerform>\n        <Command value=\"MYCProcessPagingCarrierSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveAccountCommand",
    "description": "This command removes a account from the database after deleting all the child records for that account.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveAcctContactCommand",
    "description": "This command removes a customer contact from the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveAcctContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveAcctContactPhoneCommand",
    "description": "This command removes a customer contact phone from the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveAcctContactPhoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveAttributeCommand",
    "description": "This command removes an attribute from the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveAttributeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveContactCommand",
    "description": "This command removes a contact from the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveContactForGroupCommand",
    "description": "This command removes a contact associated to a group.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveContactForGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveGroupCommand",
    "description": "This command removes a group from the database after deleting all the child records for that group.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveParamAccountCommand",
    "description": "This command marks selected rows in the DS_PARAM_CUSTOMERS datastore as deleted. Newly added rows are removed instead of being marked.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveParamAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveParamCommand",
    "description": "This command removes a parameter from the database.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveParamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRemoveParamDeviceCommand",
    "description": "This command marks selected rows in the DS_PARAM_DEVICES datastore as deleted. Newly added rows are removed instead of being marked.",
    "code": "<PressPerform>\n        <Command value=\"MYCRemoveParamDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCResetSelectedGroupCommand",
    "description": "This command resets rows selected in the DS_PARAMS datastore to match the groups associated with the current notification parameter.",
    "code": "<PressPerform>\n        <Command value=\"MYCResetSelectedGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCRevertDatastoreChangesCommand",
    "description": "This command reverts changes made to a datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCRevertDatastoreChangesCommand\">\n          <Config name=\"data_store\" value=\"DS_PARAM_CUSTOMERS\"/>\n        <Command/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsMYCSaveAccountCommand",
    "description": "This command saves account edited information.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAcctContactCommand",
    "description": "This command either adds or updates the customer contact information depending on the mode when the save button is pressed.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAcctContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAcctContactPhoneCommand",
    "description": "This command either adds or updates the customer contact phone information depending on the mode when the save button is pressed.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAcctContactPhoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAcctDeviceCommand",
    "description": "This command updates the account device information.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAcctDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAddEditAttributeCommand",
    "description": "This command either adds or updates the attribute information depending on the mode when the save button is pressed.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAddEditAttributeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAddEditContactCommand",
    "description": "This command either adds or updates the contact information depending on the mode when the save button is pressed.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAddEditContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSaveAddEditParamCommand",
    "description": "This command either adds or updates the parameter information depending on the mode when the save button is pressed.",
    "code": "<PressPerform>\n        <Command value=\"MYCSaveAddEditParamCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchAccountCommand",
    "description": "This command populates the accounts from MYC_ACCOUNTS table which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchAccountCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchAddAccountCommand",
    "description": "This command populates the accounts from CES_CUSTOMERS table (not already in the MYC_ACCOUNTS table) which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchAddAccountCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchAddAttributeDeviceCommand",
    "description": "This command populates the datastore with devices from the ALIAS_MAPPING table which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchAddAttributeDeviceCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchAddParamAccountCommand",
    "description": "This command populates the accounts from CES_CUSTOMERS table which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchAddParamAccountCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchAddParamDeviceCommand",
    "description": "This command populates the datastore with devices from the ALIAS_MAPPING table which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchAddParamDeviceCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSearchContactCommand",
    "description": "This command populates the accounts from MYC_CONTACTS table which meets the search criterion.",
    "code": "<ReturnPerform>\n        <Command value=\"MYCSearchContactCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetAccountCommand",
    "description": "This command adds rows selected in the DS_CUST_ACCOUNT datastore to the DS_PARAM_CUSTOMERS datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetAccountCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetControlZoneCommand",
    "description": "This command populates the control zone of the parameter from the path selected in the control zone tree after verifying that this is a valid zone for the group.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetControlZoneCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetCustomerContactCommand",
    "description": "This command set the customer contact in the parameter data store for the selected account.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetCustomerContactCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetGroupIDCommand",
    "description": "This command populate the group id from the group name.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetGroupIDCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetMessageTypeDescCommand",
    "description": "This command populate the message type desc from the message type id.",
    "code": "<SelectPerform>\n        <Command value=\"MYCSetMessageTypeDescCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetNumAccountsCommand",
    "description": "This command sets number of selected accounts in the DS_ADD_EDIT_PARAM datastore based on rows in the DS_PARAM_CUSTOMERS datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetNumAccountsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetNumDevicesCommand",
    "description": "This command sets number of selected devices in the DS_ADD_EDIT_PARAM datastore based on rows in the DS_PARAM_DEVICES datastore.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetNumDevicesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCSetParameterDeviceClassCommand",
    "description": "This command sets the parameter device class.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetParameterDeviceClassCommand\"/>\n    </PressPerform>",
    "icon": "üìò"
  },
  {
    "title": "commandsMYCSetParameterTimeIntervalCommand",
    "description": "This command sets the parameter time interval.",
    "code": "<PressPerform>\n        <Command value=\"MYCSetParameterTimeIntervalCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCShowContactNotInGroupCommand",
    "description": "This command populates a data store with all the contacts except the ones which are already associated to a group.",
    "code": "<PressPerform>\n        <Command value=\"MYCShowContactNotInGroupCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCShowGroupInfoCommand",
    "description": "This command populates the information for a group selected from the list.",
    "code": "<SelectPerform>\n        <Command value=\"MYCShowGroupInfoCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsMYCUnsavedChangesCommand",
    "description": "This command is executed when there are unsaved changes in either the parameters tab or contacts tab. It cancels these changes after getting approval from the user.",
    "code": "<SelectPerform>\n        <Command value=\"MYCUnsavedChangesCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "rtisimPopulateRTIsimCommand",
    "description": "Populate the DS_RTISIM ObjectDataStore with instances of Measure, as retrieved from the CGW getMeasures() API.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"PopulateRTIsimCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "rtisimSubmitSCADAMeasurementCommand",
    "description": "This command submits a SCADA measurement for the selected measurement in the DS_RTISIM. This requires an RTAdapter running with -dir RDBMS.",
    "code": "<PressPerform>\n        <Command value=\"SubmitSCADAMeasurementCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "save_casesConfirmSessionDeltasCommand",
    "description": "This command commits the temporary set of current session deltas by  updating the STUDY_SESSIONS database table with the name and description, and sets the SAVED field to 'Y'.",
    "code": "<PressPerform>\n        <Command value=\"ConfirmSessionDeltasCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "save_casesDeleteSessionDeltasCommand",
    "description": "This command deletes a saved study session from the database. This happens when a user is: \n1. Confirming the save of  the current session\n2. Changing an existing saved session\n3. Closing the dialog (to delete the temporary rows from the database.\nNumbers 1 and 2 display confirmation dialogs to the user, but 3 skips the confirmation by passing the \"display_confirmation\" option as \"false\"",
    "code": "<PressPerform>\n        <Command value=\"DeleteSessionDeltasCommand\">\n            <Config name=\"session_id\" value=\"{DS_STUDY_SESSION_DETAIL.SEQ_SESSION_ID}\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "save_casesGetSessionDeltasCommand",
    "description": "Ask PFService to store the current session deltas in the STUDY_SESSIONS and STUDY_SESSION_DELTAS database tables. Populate the SEQ_SESSION_ID field in the DS_STUDY_SESSION_DELTAS and the DS_STUDY_SESSION_DETAIL so they can be populated and displayed.",
    "code": "<PressPerform>\n        <Command value=\"GetSessionDeltasCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsActionUpdateFepDetailsCommand",
    "description": ".",
    "code": "<PressPerform>\n        <Command value=\"ActionUpdateFepDetailsCommand\">\n            <Config name=\"update_type\" value=\"ENABLE_FEP\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsActionUpdateRtuDetailsCommand",
    "description": ".",
    "code": "<PressPerform>\n        <Command value=\"ActionUpdateRtuDetailsCommand\">\n            <Config name=\"update_type\" value=\"ENABLE_RTU\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsActionUpdateScadaDebugLog",
    "description": "Performs the requested action the SCADA Debug Log.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaDebugLog\">\n            <Config name=\"update_type\" value=\"PAUSE_DEBUG_LOG\"/>\n        </Command>\n    </Perform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsActionUpdateScadaFepConnections",
    "description": "Action the requested update on the currently selected FEP connection.",
    "code": "<PressPerform>\n        <Command value=\"ActionUpdateScadaFepConnections\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsActionUpdateScadaFepStatus",
    "description": "Performs the requested action on a FEP or FEP Connection.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaFepStatus\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandsActionUpdateScadaInputStatus",
    "description": "Performs the requested action on an INPUT.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaInputStatus\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandsActionUpdateScadaLinks",
    "description": "Performs the requested action on the input device links.",
    "code": "<PressPerform>\n        <Command value=\"ActionUpdateScadaInputLinks\">\n            <Config name=\"update_type\" value=\"LINK_SELECTED_DEVICE_INPUT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsActionUpdateScadaOutputStatus",
    "description": "Performs the requested action on an OUTPUT.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaOutputStatus\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandsActionUpdateScadaPointRtuStatus",
    "description": "Performs the requested action on the RTU associated with the selected point(s).",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaPointRtuStatus\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandsActionUpdateScadaRtuStatus",
    "description": "Performs the requested action on a RTU or RTU Connection.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ActionUpdateScadaRtuStatus\">\n            <Config name=\"update_type\" value=\"ADD\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandsApplyScadaStatusFilterCommand",
    "description": "Actions the filter for scada status tree.",
    "code": "<SelectPerform>\n        <Command value=\"ApplyScadaStatusFilterCommand\"/>\n    <SelectPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsAssociateRtuCommand",
    "description": "This command uses the options set in the associate RTU dialog to update the FEP & RTU associatation.",
    "code": "<PressPerform>\n        <Command value=\"AssociateRtuCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCancelScadaStatusItemCommand",
    "description": "Cancel the search (filter) on the SRS Rules tree. This Command also sets the SCADA_STATUS_ITEM__FILTERED status flag to false and clears the DS_SCADA_STATUS.SCADA_STATUS_ITEM_SEARCH_TEXT",
    "code": "<PressPerform>\n        <Command value=\"CancelScadaStatusItemCommand\"/>\n    <PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsCheckRtuNameCommand",
    "description": "This command confirms that the entered RTU name is unique. This must be confirmed before the RTU instance can be created or the process will fail.",
    "code": "<PressPerform>\n        <Command value=\"CheckRtuNameCommand\">\n            <Config name=\"name\" value=\"LINK_SELECTED_DEVICE_INPUT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsDisplayScadaDialogCommand",
    "description": "Display the configured JBotToolDialog.",
    "code": "<PressPerform>\n        <Command value=\"DisplayScadaDialogCommand\">\n            <Config name=\"dialog\" value=\"DLG_INPUT_POINT\"/>\n            <Config name=\"inputOrOutput\" value=\"INPUT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsDisplayScadaToolCommand",
    "description": "Display the given tool.",
    "code": "<PressPerform>\n        <Command value=\"DisplayScadaToolCommand\">\n            <Config name=\"tool\" value=\"com.splwg.oms.client.scada.ScadaRtuDetails\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsExitScadaStatusCommand",
    "description": "Ensures that any configuration options are saved on all child windows/tabs when closing the SCADA Status window.",
    "code": "<PressPerform>\n        <Command value=\"ExitScadaStatusCommand\"/>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsFilterScadaStatusItemCommand",
    "description": "Search (filter) on the SRS Rules tree based on the DS_SCADA_STATUS.SCADA_STATUS_ITEM_SEARCH_TEXT value. This Command also sets the SCADA_STATUS_ITEM_FILTERED status flag to true.",
    "code": "<PressPerform>\n        <Command value=\"FilterScadaStatusItemCommand\"/>\n    <PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsLineLogCommand",
    "description": "Invokes the FEP or IED line logs",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"LineLogCommand\">\n            <Config name=\"fetch_all\" value=\"true\"/>\n        </Command>\n    </Perform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandsPackDialogCommand",
    "description": "This command forces a format operation on the parent dialog and is used re-alaign fields in dialogs such as input point edit and output point edit where visible fields are changed depending on selected options",
    "code": "<PressPerform>\n        <Command value=\"PackDialogCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsPointCommissionTabSelectCommand",
    "description": "This command is executed each time a tab is selected in the point commissioning display.",
    "code": "<SelectPerform>\n        <Command value=\"PointCommissionTabSelectCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateAssociateRtuCommand",
    "description": "This command is used to populate the current RTU and FEP details before\n before calling the associate RTU dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAssociateRtuCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateCommand",
    "description": "This command populates a Stormman datastore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCommand\">\n            <Config name=\"datastore\" value=\"DS_YES_NO_ARCHIVED\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateCommissionStateCommand",
    "description": "This command is used to populate the current RTU/point commissioning state\n before calling the update commission state dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateRtuCommissioningCommand\">\n            <Config name=\"commission_mode\" value=\"RTU_MODE\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateDlgModifyCalculationCommand",
    "description": "Populates the SCADA Calculation Dialog",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"PopulateDlgModifyCalculationCommand\">\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateInputFilterCommand",
    "description": "This loads the datastore DS_RTU_INPUT_DEFAULT chosen by the DLG_INPUT_FILTERS dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateInputFilterCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateInputPointCommand",
    "description": "This loads the datastore DS_RTU_INPUT_DEFAULT chosen by the DLG_INPUT_POINT dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateInputPointCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateOutputPointCommand",
    "description": "This loads the datastore DS_RTU_OUTPUT_DEFAULT chosen by the DLG_OUTPUT_POINT dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateOutputPointCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateSelectedDeviceCommand",
    "description": "updates the selected inputs with the optionschosen by the DLG_INPUT_POINT dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateSelectedDeviceCommand\">\n            <Config name=\"datastorename\" value=\"DS_RTU_INPUT_LINKS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsRemoveCalculationInputCommand",
    "description": "Removes a point from a calculation",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"RemoveCalculationInputCommand\">\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSaveCalculationCommand",
    "description": "Saves a calculation",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"calculation\">\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsScadaPerformanceTestCommand",
    "description": ".",
    "code": "<PressPerform>\n        <Command value=\"ScadaPerformanceTestCommand\">\n            <Config name=\"analog\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsScadaRTUFocusCommand",
    "description": "Sets the selection for any JBot table.",
    "code": "<SelectPerform>\n        <Command value=\"ScadaRTUFocusCommand\">\n            <Config name=\"data_store\" value=\"DS_INSTRUCTS\"/>\n            <Config name=\"viewer_name\" value=\"com.splwg.oms.client.viewer.Viewer1\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsScadaUpdatePointMonitor",
    "description": "Adds or removes a point from the point monitor.",
    "code": "<SelectPerform>\n        <Command value=\"ScadaUpdatePointMonitor\">\n            <Config name=\"data_store\" value=\"DS_INSTRUCTS\"/>\n            <Config name=\"update_type\" value=\"input_add\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsSelectPointRowCommand",
    "description": "This command is executed to select a specific row in either the RTU details input or output points tab or the input or output points displays depending on the currently selected row in the Point commissioining display.",
    "code": "<SelectPerform>\n        <Command value=\"SelectPointRowCommand\">\n            <Config name=\"tool\" value=\"com.splwg.oms.client.scada.ScadaRtuDetails\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSendCommissioningControl",
    "description": "This command sends a control when testing uncommissioined RTU points",
    "code": "<PressPerform>\n        <Command value=\"SendCommissioningControl\">\n            <Config name=\"nms_action\" value=\"1\"/>\n            <Config name=\"ext_action\" value=\"2\"/>\n            <Config name=\"phase\" value=\"7\"/>\n            <Config name=\"output_ids\" value=\"7,8,9\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetCalcPointSelectionCommand",
    "description": "Sets the context of the calculation increment and decrement buttons",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"SetCalcPointSelectionCommand\">\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetFepDetailSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected FEP & connection is in.",
    "code": "<PressPerform>\n        <Command value=\"SetFepDetailSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetFepSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected FEP & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetFepSelectionCommand\">\n            <Config name=\"new_selection\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetFullDeviceLinkageSelectionCommand",
    "description": "This command sets the selected point for full device linkage highlighting.",
    "code": "<PressPerform>\n        <Command value=\"SetFullDeviceLinkageSelectionCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetInputSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected INPUT & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetInputSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetLinkageHighlightingCommand",
    "description": "This command sets or clears a flag that will enable or disable the highlighting of linked IED/Device input & output points.",
    "code": "<PressPerform>\n        <Command value=\"SetLinkageHighlightingCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetLinkageSelectionCommand",
    "description": "This command sets or clears flags depending on what IED/Device input or output point has been selected.",
    "code": "<PressPerform>\n        <Command value=\"SetLinkageSelectionCommand\"/>\n            <Config name=\"datastoreName\" value=\"DS_DEVICE_OUTPUT_LINKS\"/>\n            <Config name=\"inputOrOutput\" value=\"OUTPUT\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetOutputSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected OUTPUT & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetOutputSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetPointMonitorSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected point in Point Monitor are in.",
    "code": "<PressPerform>\n        <Command value=\"SetPointMonitorSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsSetPointSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected RTU & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetPointSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetRtuDetailSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected RTU & connection is in.",
    "code": "<PressPerform>\n        <Command value=\"SetRtuDetailSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetRtuMonitorFepFilter",
    "description": "This command updates the global variable thet indicates whet FEP  the RTU monitor display is filtering by.",
    "code": "<PressPerform>\n        <Command value=\"SetRtuMonitorFepFilter\">\n            <Config name=\"filter_by_fep\" value=\"true/false\"/>\n       </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandsSetRtuSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected RTU & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetRtuSelectionCommand\">\n            <Config name=\"new_selection\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsSetTemplateSelectionCommand",
    "description": "This command sets or clears flags depending on what state the selected RTU & connection are in.",
    "code": "<PressPerform>\n        <Command value=\"SetTemplateSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsShowCalcChildrenCommand",
    "description": "Displays the child points for a scada input calculation",
    "code": "<PressPerform>\n       <Command value=\"ShowChildAlarmsCommand\"\"> \n           <Config name=\"when_column_selected\" value=\"childCountText\"/>\n           <Config name=\"menu\" value=\"MNU_INPUT_SORT\"/>\n           <Config name=\"sort_description\" value=\"calcBitPos\"/>\n           <Config name=\"sort_definition\" value=\"calcBitPos\"/>\n       </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsShowPointDeviceLinkageCommand",
    "description": "This command shows the point to device linkage from rtu input/output  update the FEP & RTU associatation.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">        <Command value=\"DoubleClickCheck\"/>        <Command value=\"ShowPointDeviceLinkageCommand\">            <Config name=\"initiatedFrom\" value=\"TBL_RTU_OUTPUTS\"/>        </Command>    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsStoreInputFilterCommand",
    "description": "This command updates the selected inputs with the options chosen by the DLG_INPUT_FILTERS dialog.",
    "code": "<PressPerform>\n        <Command value=\"StoreInputFilterCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsStoreInputPointCommand",
    "description": "updates the selected inputs with the optionschosen by the DLG_INPUT_POINT dialog.",
    "code": "<PressPerform>\n        <Command value=\"StoreInputPointCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsStoreOutputPointCommand",
    "description": "updates the selected outputs with the optionschosen by the DLG_OUTPUT_POINT dialog.",
    "code": "<PressPerform>\n        <Command value=\"StoreOutputPointCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsStoreSelectedRtuCommand",
    "description": "This command determines the selected RTU in the current environment and stores the ID and Name in a global datastore for retrieval in other environments.",
    "code": "<PressPerform>\n        <Command value=\"StoreSelectedRtuCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsTestSslCommand",
    "description": "This command checks the FEP's SSL configuration is correct.",
    "code": "<PressPerform>\n        <Command value=\"TestSslCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsUpdateCalcBitPosCommand",
    "description": "Increments or decrements the bit position of a point in a calculation",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"UpdateCalcBitPosCommand\">\n            <Config name=\"increment\" value=\"true\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandsUpdateCommissionStateCommand",
    "description": "This command uses the options set in the update commission state dialog to update the RTU or point state.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCommissionStateCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "ss_solutionsCopyToSSCommand",
    "description": "Populates the Suggested Switching tool with data from the single selected row in the DS_SS_SOLUTIONS, DS_FCA_SOLUTIONS DataStore.",
    "code": "<Command value=\"PopulateConditionsCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "ss_solutionsRecalculateFCACommand",
    "description": "Clears the selected rows from the SS_SOLUTIONS database table and tell PFService to start a new FCA solution for any rows that need one.",
    "code": "<Command value=\"RecalculateFCACommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "ss_solutionsRepopulateFCACommand",
    "description": "Repopulates the DS_SSS JDBC datastore for the subscribed zones.",
    "code": "<PressPerform>      <Command value=\"RepopulateFCACommand\"/>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "ss_solutionsRepopulateSSSolutionsCommand",
    "description": "Repopulates the DS_SS_SOLUTIONS JDBC datastore and DS_SS_SOLUTIONS_TREE for the subscribed zones.",
    "code": "<PressPerform>      <Command value=\"RepopulateSSSolutionsCommand\"/>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddCrewCommand",
    "description": "Adds a new crew to the crews table from the information put in the add crew dialog and closes the dialog.",
    "code": "<PressPerform>\n        <Command value=\"AddCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddCrewDialogCommand",
    "description": "This command brings up the add crew dialog.",
    "code": "<PressPerform>\n        <Command value=\"AddCrewDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandAddCrewRowCommand",
    "description": "This command adds a new crew to the Stormman Crews table.",
    "code": "<PressPerform>\n        <Command value=\"AddCrewRowCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddErtOverrideCommand",
    "description": "This command adds a new row to the DS_EXPORT_INFO datastore.",
    "code": "<PressPerform>\n        <Command value=\"AddErtOverrideCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddErtOverrideTierCommand",
    "description": "This command adds a new ERT override tier to DS_TIERS datastore.",
    "code": "<PressPerform>\n        <Command value=\"AddErtOverrideTierCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddForecastProfileCommand",
    "description": "This is a command to add new row to the DS_PROFILES datastore.If currently selected row in DS_PROFILES datastore is marked for deletion then instead of adding new row this command will clear removal merker from the selected row.",
    "code": "<PressPerform>\n        <Command value=\"AddForecastProfileCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandAdjustEstimatesCommand",
    "description": "This is the command to save changes to storm type and storm level.",
    "code": "<PressPerform>\n        <Command value=\"AdjustEstimatesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandApplyCrewChangesCommand",
    "description": "This is the command to apply crew changes.",
    "code": "<PressPerform>\n        <Command value=\"ApplyCrewChangesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandApplyProfilesCommand",
    "description": "This is the command to send selected profile data to the actual outages column.",
    "code": "<PressPerform>\n        <Command value=\"ApplyProfilesCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandCalculateCrewsCommand",
    "description": "This is the command to calculate crew estimates.",
    "code": "<PressPerform>\n        <Command value=\"CalculateCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCancelFcastDialogCommand",
    "description": "This is the command to revert all uncommited changes made to the DS_PROFILES datastore.",
    "code": "<PressPerform>\n        <Command value=\"CancelFcastDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandCancelProjDialogCommand",
    "description": "This is the command to revert all uncommited changes made to the DS_EXPORT_INFO datastore.",
    "code": "<PressPerform>\n        <Command value=\"CancelProjDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandCancelStormDialogCommand",
    "description": "This is the command to revert all uncommited changes made to the DS_STORM_INFO datastore.",
    "code": "<PressPerform>\n        <Command value=\"CancelStormDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandChangedStormInfoCommand",
    "description": "This is the command to fire status change when storm level is changed.",
    "code": "<SelectPerform>\n        <Command value=\"ChangedStormInfoCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandChangeZoneCommand",
    "description": "This is the command to fire status change when zone is changed.",
    "code": "<SelectPerform>\n        <Command value=\"ChangeZoneCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteCrewCommand",
    "description": "Pops up a confirm dialog. If the user confirms the action, the selected crew is immediately deleted.",
    "code": "<PressPerform>\n        <Command value=\"DeleteCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandEditCrewCommand",
    "description": "This is the command to transfers the changes in the edit crew dialog (DLG_EDIT_CREW) to the crew table (DS_CREW_DATA) and closes the edit crew dialog.",
    "code": "<PressPerform>\n        <Command value=\"EditCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandErtOverrideTabSelectCommand",
    "description": "This command is executed each time tab is selected in the ERT Override dialog.",
    "code": "<SelectPerform>\n        <Command value=\"ErtOverrideTabSelectCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExitStormmanCommand",
    "description": "This is the command to exit the Stormman application.",
    "code": "<PressPerform>\n        <Command value=\"ExitStormmanCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExportSessionConfigCommand",
    "description": "This is the command to copy configuration from study session into real-time.",
    "code": "<PressPerform>\n        <Command value=\"ExportSessionConfigCommand\"/>\n    </PressPerform>",
    "icon": "üì§"
  },
  {
    "title": "commandForceSimulationCommand",
    "description": "This is the command to force Stormman simulation.",
    "code": "<PressPerform>\n        <Command value=\"ForceSimulationCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetEstimatesCommand",
    "description": "This command is used to retrieve current Storm Management information.",
    "code": "<PressPerform>\n        <Command value=\"GetEstimatesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandImportCrewsCommand",
    "description": "This is the command to import crews based on the parameters in the DS_IMPORT_CREWS datastore.",
    "code": "<PressPerform>\n        <Command value=\"ImportCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandImportCrewsDialogCommand",
    "description": "This is the command to reset the import crews datastore to its default valuesand displayes the crews dialog.",
    "code": "<PressPerform>\n        <Command value=\"ImportCrewsDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandImportCrewsToggleRTCommand",
    "description": "This is the command to imports crews based on the parameters in the DS_IMPORT_CREWS datastore.",
    "code": "<PressPerform>\n        <Command value=\"ImportCrewsToggleRTCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandJoinStormSelectCommand",
    "description": "This is the command populates the DS_DEFINE_STORM datastore for a selected storm.",
    "code": "<SelectPerform>\n        <Command value=\"JoinStormSelectCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandMoveCrewCommand",
    "description": "This is the command to move a crew.",
    "code": "<PressPerform>\n        <Command value=\"MoveCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPackNameStormDialogCommand",
    "description": "This command will set the size of the name storm dialog.",
    "code": "<PressPerform>\n        <Command value=\"PackNameStormDialogCommand\">\n            <Config name=\"width\" value=\"570\"/>\n            <Config name=\"height\" value=\"310\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandPopulateAddCrewCommand",
    "description": "This command populates the add crew dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAddCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateCommand",
    "description": "This command populates a Stormman datastore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCommand\">\n            <Config name=\"datastore\" value=\"DS_DEFINE_STORM\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRemoveErtOverrideCommand",
    "description": "This command marks selected row in the DS_EXPORT_INFO datastore for deletion.",
    "code": "<PressPerform>\n        <Command value=\"RemoveErtOverrideCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRemoveForecastProfileCommand",
    "description": "This command marks selected row in the DS_PROFILES datastore for deletion.",
    "code": "<PressPerform>\n        <Command value=\"RemoveForecastProfileCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandResetStudySessionCommand",
    "description": "This is a command to copy configuration from real-time into study session.",
    "code": "<PressPerform>\n        <Command value=\"ResetStudySessionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetExcludablePeriodCommand",
    "description": "This command sets excludable period for the currently selected storm record and all the records in the child control zones of the selected record which are part of the same storm.",
    "code": "<PressPerform>\n        <Command value=\"SetExcludablePeriodCommand\"/>\n            <Config name=\"period_start\" value=\"DS_EXCLUDE_STORM.START\"/>\n            <Config name=\"period_end\" value=\"DS_EXCLUDE_STORM.END\"/>\n            <Config name=\"comment\" value=\"DS_EXCLUDE_STORM.COMMENT\"/>\n            <Config name=\"confirmation_threshold\" value=\"6\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetExportInfoCommand",
    "description": "This is a command to save changes to ERT override and delay values.",
    "code": "<PressPerform>\n        <Command value=\"SetExportInfoCommand\"/>\n    </PressPerform>",
    "icon": "üì§"
  },
  {
    "title": "commandSetProfilesCommand",
    "description": "This is a command to send changes made to the DS_PROFILES to the server.",
    "code": "<PressPerform>\n        <Command value=\"SetProfilesCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandStormSelectedCommand",
    "description": "This command updates information based on the currently selected storm.",
    "code": "<PressPerform>\n        <Command value=\"StormSelectedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleForecastModeCommand",
    "description": "This is the command to change between % Change and Value forecast modes.",
    "code": "<SelectPerform>\n        <Command value=\"ToggleForecastModeCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleStormModeCommand",
    "description": "This is the command to change to storm mode for a control zone.",
    "code": "<PressPerform>\n        <Command value=\"ToggleStormModeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleStormTypeCommand",
    "description": "This is the command to change storm type for control zone.",
    "code": "<SelectPerform>\n        <Command value=\"ToggleStormTypeCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleStudyModeCommand",
    "description": "This is the command to toggle between study mode and real time mode.",
    "code": "<PressPerform>\n        <Command value=\"ToggleStudyModeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleUseCurrentCommand",
    "description": "This is the command executed when 'Use current time' checkbox in the Define Storm dialog is operated.",
    "code": "<PressPerform>\n        <Command value=\"ToggleUseCurrentCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "summaryClearAssessedConductorsCommand",
    "description": "This command clear the assessment flags from conductors in the supplied datastore.",
    "code": "<PressPerform>\n        <Command value=\"ClearAssessedConductorsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "summaryDeleteAssessmentsCommand",
    "description": "This command deletes Assessment Conditions that are in the supplied datastore with status_name as given.",
    "code": "<PressPerform>\n        <Command value=\"DeleteAssessmentsCommand\">\n            <Config name=\"datastore\" value=\"DS_ASSESSMENT_DETAILS\"/>\n            <Config name=\"status_name\" value=\"Network OK\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "testDisableCommand",
    "description": "This is a command that disables a command.",
    "code": "<Command value=\"DisableCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "testDndInitCommand",
    "description": "Command for initializing active and inactive crews.",
    "code": "<Command value=\"DndInitCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "testEnableCommand",
    "description": "This is a command that enables a command.",
    "code": "<Command value=\"EnableCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "testProgressBarCommand",
    "description": "Command for setting and testing the progress bar.",
    "code": "<Command value=\"ProgressBarCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "testTestCommand",
    "description": "Used for testing the commands.",
    "code": "<PressPerform>\n        <Command value=\"TestCommand\">\n            <Config name=\"ds\" value=\"DS_TEST1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "topvalExecuteTopValCommand",
    "description": "Executes the TopVal program via the nms-top-val script and passes it the appropriate arguments base don the selections from DS_TOP_VAL_DEFAULT. Projects can use the top_val.ces to set other options for the program, including the number arguments passed to the -ato, -mid, -fid, and -src options.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteTopValCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "topvalPopulateTopValCommand",
    "description": "Repopulates the Topology Validation Viewer from the database.",
    "code": "<PressPerform>\n        <Command value=\"PopulateTopValCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "topvalUpdateTopValStatusBarCommand",
    "description": "Refreshes the date and number of objects found in the status bar for the tab selection change.",
    "code": "<PressPerform>\n        <Command value=\"UpdateTopValStatusBarCommand\"/>    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "troubleinfoAMRConfirmCommand",
    "description": "Populates datastore DS_AMR_CONFIRM with the handle of the loaded event, populates datastore DS_AMR_CONFIRM_METERS with meter ids for the selected customers, and if configured displays dialog DLG_AMR_QUERY_TYPE.",
    "code": "<PressPerform>\n        <Command value=\"AMRConfirmCommand\">\n          <Config name=\"display_dialog\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoAMREnableCommand",
    "description": "Enable/disable selected AMR-capable meters.",
    "code": "<PressPerform>\n        <Command value=\"AMREnableCommand\">\n          <Config name=\"action\" value=\"enable\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoCancelCallbacksCommand",
    "description": "Clears callback request and callback time fields in all selected calls.",
    "code": "<PressPerform>\n        <Command value=\"CancelCallbacksCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "troubleinfoCancelUnassociateEventCommand",
    "description": "This is a command that clears the DLG_UNASSOCIATE dialog textfield after a user has cancelled an unassociate action.",
    "code": "<PressPerform>\n        <Command value=\"CancelUnassociateEventCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"CancelUnassociateEventCommand\"\n        class=\"com.ces.centricity.ops.troubleinfo.CancelUnassociateEventCommand\"/>",
    "icon": "üëÇ"
  },
  {
    "title": "troubleinfoCreateCallbacksCommand",
    "description": "Creates restoration callbacks for all selected calls.",
    "code": "<PressPerform>\n        <Command value=\"CreateCallbacksCommand\">\n          <Config name=\"force\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "troubleinfoEnableTroubleInfoViewCommand",
    "description": "This command selects different TroubleInfo views. It sets the status flag for the view to be displayed.",
    "code": "<PressPerform>\n        <Command value=\"EnableTroubleInfoViewCommand\">\n          <Config name=\"view_name\" value=\"CALLS_VIEW\"/>\n        </>\n    </PressPerform>\n/n This command does not populate TroubleInfo. It only switches views.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoGetImpactedCustomersCommand",
    "description": "This Command gets the impacted customers list for selected load groups/feeders in the Load Shed and Restoration tool",
    "code": "<PressPerform>\n        <Command value=\"GetImpactedCustomersCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoInitMoveCustomerCommand",
    "description": "Populates customer information in DS_MOVE_CUSTOMER (for display in the DLG_MOVE_CUSTOMER dialog) from the currently selected calls (if the CALLS_VIEW status flag is true) or customers (if the CALLS_VIEW status flag is false).\nThe following fields are populated in DS_MOVE_CUSTOMER: cid, account_name, account_number, address, telephone_number, meter_no, device, & device_name",
    "code": "<PressPerform>\n        <Command value=\"InitMoveCustomerCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoMoveCustomerCommand",
    "description": "Moves customers to a new device.  All of the customers in DS_MOVE_CUSTOMER will be moved to the selected device.  This command should be run from the Move Customers dialog (DLG_MOVE_CUSTOMER).",
    "code": "<PressPerform>\n        <Command value=\"MoveCustomerCommand\"/>\n    </PressPerform>\n    \n Dialog MC_DUPLICATE_MOVE is displayed if previous move \n is found for the same customer.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoPopulateAMRHistoryCommand",
    "description": "This command populates the DS_AMR_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAMRHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoPopulateAMRLoadSideHistoryCommand",
    "description": "This command populates the DS_AMR_LOAD_SIDE_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAMRLoadSideHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "troubleinfoPopulateAMRVoltageHistoryCommand",
    "description": "This command populates the DS_AMR_VOLTAGE_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateAMRVoltageHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoPopulateCluesCommand",
    "description": "This command populates the DS_CLUES DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCluesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoPopulateCommand",
    "description": "This is a command that populates the TroubleInfo tool GUI panels.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"PopulateCommand\" \n        class=\"com.ces.centricity.ops.troubleinfo.PopulateCommand\"/>\n \n This is a command that populates the TroubleInfo tool GUI panels.\n Loading of data and GUI population is done by a separate thread.\n The command returns once that thread is started. It does not wait\n for completion. Status flag TI_POPULATING is set while the background\n thread populating TroubleInfo is running.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoPopulateFromControlCommand",
    "description": "This is a command that populates the TroubleInfo tool GUI panels based on the selected device in the control tool.",
    "code": "<PressPerform>\n        <Command value=\"PopulateFromControlCommand\">\n              <Config name=\"amr_view\" value=\"true\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"PopulateFromControlCommand\" \n        class=\"com.ces.centricity.ops.troubleinfo.PopulateFromControlCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoRefreshCurrentTableCommand",
    "description": "Refreshes the current view in the Trouble Info dialog.",
    "code": "<PressPerform>\n        <Command value=\"RefreshCurrentTableCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"RefreshCurrentTableCommand\" \n        class=\"com.splwg.oms.client.troubleinfo.RefreshCurrentTableCommand\"/>\n    \n This command will check which status flag is currently set to true. This will indicate which view is to be reloaded.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoRemoveSupplyNodesCommand",
    "description": "Removes selected supply nodes from the list of supply nodes.",
    "code": "If one from the graphical grouping list is deleted it will perform an \n immmediate delete. If it is a current supply node, then it will be marked \n as TBU (to be ungrouped).",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoSaveCallsCommand",
    "description": "Submit calls for the selected customers. If the Customer List is displayed, this command submits customer calls with the passed \"trouble_code\" value. If the AMI Customer List is displayed, it submits AMI meter readings with the passed \"amr_percentage\" value",
    "code": "Here are some examples:\n    <PressPerform>\n        <Command value=\"SaveCallsCommand\">\n            <Config name=\"trouble_code\" value=\"00000000\"/>\n        </Command>\n    </PressPerform>\n    <PressPerform>\n        <Command value=\"SaveCallsCommand\">\n            <Config name=\"trouble_code\" value=\"Power-off received from meter\"/>\n            <Config name=\"amr_percentage\" value=\"0\"/>\n        </Command>\n    </PressPerform>\n    <PressPerform>\n        <Command value=\"SaveCallsCommand\">\n            <Config name=\"trouble_code\" value=\"Power-on received\"/>\n            <Config name=\"amr_percentage\" value=\"100\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoSelectedIncidentRowCommand",
    "description": "This is a command that populates the 'Message' field in the Calls view.",
    "code": "<PressPerform>\n        <Command value=\"SelectedIncidentRowCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"SelectedIncidentRowCommand\" \n        class=\"com.ces.centricity.ops.troubleinfo.SelectedIncidentRowCommand\"/>\n \n The message field is populated by the value of the 'operator_comment' which is contained in the incidents table.  \n The 'operator_comment' column may not be configured to be displayed in the incidents table.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoTransferCallCommand",
    "description": "This is a command that transfers a call from a device to a specified event.",
    "code": "<PressPerform>\n        <Command value=\"TransferCallCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TransferCallCommand\" \n        class=\"com.splwg.oms.client.troubleinfo.TransferCallCommand\"/>\n \n If an operator determines that a particular customer call does not reference a \n problem with the device that the customer is normally associated with, then the \n operator may want to unassociate the call from the current device, and assign it \n to a specific event.",
    "icon": "üíª"
  },
  {
    "title": "troubleinfoUnassociateEventCommand",
    "description": "This is a command that Unassociates a call from a device.",
    "code": "<PressPerform>\n        <Command value=\"UnassociateEventCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"UnassociateEventCommand\" \n        class=\"com.ces.centricity.ops.troubleinfo.UnassociateEventCommand\"/>\n \n If an operator determines that a certain incident should not be associated\n with the device that it is currently associated with, \n then they may want to unassociate this incident from the current device, \n and they may also specify a new device to associate it with.",
    "icon": "üëÇ"
  },
  {
    "title": "troubleinfoUngroupEventCommand",
    "description": "This is a command that ungroups a call from a group of calls.",
    "code": "<PressPerform>\n        <Command value=\"UngroupEventCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"UngroupEventCommand\" \n        class=\"com.ces.centricity.ops.troubleinfo.UngroupEventCommand\"/>\n        \n If an operator determines that a certain incident should not be associated \n with a group of incidents that it is currently associated with, \n then they may want to unassociate this incident from the current group of incidents, \n and they may also specify a new device to associate it with.",
    "icon": "üëÇ"
  },
  {
    "title": "troubleinfoUpdateTroubleCodeCommand",
    "description": "Change the call's trouble code and invoke the updateCall API.",
    "code": "<PressPerform>\n        <Command value=\"UpdateTroubleCodeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerAssessmentCommitCommand",
    "description": "Enables/disables the save button on the assessment panel",
    "code": "<ModifiedPerform>\n        <Command value=\"AssessmentCommitCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerAssessmentDeleteCommand",
    "description": "Enables/disables the save button on the assessment panel",
    "code": "<ModifiedPerform>\n        <Command value=\"AssessmentDeleteCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerAssessmentEditCancelCommand",
    "description": "Enables/disables the save button on the assessment panel",
    "code": "<ModifiedPerform>\n        <Command value=\"AssessmentEditCancelCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerAssessmentEditCommand",
    "description": "Enables/disables the save button on the assessment panel",
    "code": "<ModifiedPerform>\n        <Command value=\"AssessmentEditCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerAssessmentPopulateMiscCommand",
    "description": "Populates the DS_ASSESSMENT datastore with the system selected device.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"AssessmentPopulateMiscCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "viewerBringUpMapBrowserCommand",
    "description": "Bring up a browser for the viewer geographic area.",
    "code": "<PressPerform>\n        <Command value=\"BringUpMapBrowserCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"BringUpMapBrowserCommand\" \n        class=\"com.ces.centricity.ops.viewer.BringUpMapBrowserCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerCleanPowerFlowResultsCommand",
    "description": "Cleans previous  power flow solution results.",
    "code": "<PressPerform>\n        <Command value=\"CleanPowerFlowResultsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"GetPowerFlowResultsCommand\" \n        class=\"com.splwg.oms.client.viewer.GetPowerFlowResultsCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerClearDatastoreCommand",
    "description": "Command to clear multiple datastores separated by comma as delimeter.",
    "code": "<PressPerform>\n        <Command value=\"ClearDatastoreCommand\">\n            <Config name=\"datastore\" value=\"DS_VIEWER_CUSTOMER_SEARCH_DATA,DS_VIEWER_INTERSECTION_SEARCH_DATA\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"ClearDatastoreCommand\" \n        class=\"com.splwg.oms.client.viewer.ClearDatastoreCommand\"/>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "viewerClearLockedLoadsCommand",
    "description": "This Command clears all manually entered (locked) loads from the PFService study session.",
    "code": "<SelectPerform>\n        <Command value=\"ClearLockedLoadsCommand\"/>\n    </SelectPerform>",
    "icon": "üì•"
  },
  {
    "title": "viewerClearSearchCommand",
    "description": "Command to Clear the search datastores",
    "code": "<SelectPerform>\n        <Command value=\"SetSearchTypeCommand\"/>\n    </SelectPerform>\n    \n    <CommandClass name=\"SetSearchTypeCommand\" \n        class=\"com.ces.centricity.ops.viewer.SetSearchTypeCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerCnvCommand",
    "description": "This calls a CNV command on the server, if the viewer is configured to show the CNV",
    "code": "<Command value=\"CnvCommand\">\n            <Config name=\"command\" value=\"MapShowHideDisplay\"/>\n            <config name=\"abort\" value=\"true\"/>\n        </Command>",
    "icon": "üíª"
  },
  {
    "title": "viewerDLAssignCommand",
    "description": "Associates a documment with a device.",
    "code": "<PressPerform>\n        <Command value=\"DLAssignCommand\"/>\n    </PressPerform>\n    \n This will assign the selected events in the datastore DS_DL_AVAILABLE",
    "icon": "üíª"
  },
  {
    "title": "viewerDLPopulateAvailableCommand",
    "description": "Populates the DS_DL_AVAILABLE datastore with all of the available documents.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"DLPopulateAvailableCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "viewerDLPopulateDevicesCommand",
    "description": "Populates the DS_DL_ASSOCIATED datastore with the devices that match the selected document.",
    "code": "<PressPerform>\n        <Command value=\"DLPopulateDevicesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerDLPopulateDocumentsCommand",
    "description": "Populates the DS_DL_DEVICE_DOCS datstore with those documents that match the selected device in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"DLPopulateDocumentsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerDLPopulateMiscCommand",
    "description": "Populates the DS_DL_MISC datastore with the system selected device.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"DLPopulateMiscCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "viewerDLUnassignCommand",
    "description": "Unassociates a document from a device.",
    "code": "<PressPerform>\n        <Command value=\"DLUnassignCommand\"/>\n    </PressPerform>\n    \n Removes the selected document from DS_DL_DEVICE_DOCS",
    "icon": "üíª"
  },
  {
    "title": "viewerDLViewCommand",
    "description": "Displays a document in an external viewer.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"DLViewCommand\">\n            <Config name=\"datastore\" value=\"DS_DL_AVAILABLE\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "viewerDropCallCommand",
    "description": "This is called by a DnD operation where a call is dragged to an event.",
    "code": "<DropPerform flavor=\"CALL_KEY\">\n        <Command value=\"DropCallCommand\">\n        </Command>\n    </DropPerform>\n                            \n    <CommandClass name=\"DropCallCommand\" \n        class=\"com.ces.centricity.ops.viewer.DropCallCommand\"/> \n If an operator determines that a particular customer call does not reference a \n problem with the device that the customer is normally associated with, then the \n operator may want to unassociate the call from the current device, and assign it \n to a specific event.",
    "icon": "üíª"
  },
  {
    "title": "viewerDropCrewCommand",
    "description": "This is called by a DnD operation where a crew is dragged to a device.",
    "code": "<DropPerform flavor=\"CREW_KEY\">\n        <Command value=\"DropCrewCommand\">\n            <Config name=\"change_working_at_message\" value=\"CREW.ARE_YOU_SURE_YOU_WANT_TO_MOVE_THIS_CREW\"/>\n            <Config name=\"active_event_message\" value=\"\"/>\n            <Config name=\"no_active_event_message\" value=\"\"/>\n        </Command>\n    </DropPerform>\n                            \n    <CommandClass name=\"DropCrewCommand\" \n        class=\"com.ces.centricity.ops.viewer.DropCrewCommand\"/> \n This command will change the working at location of the crew if the crew is dropped\n on a device without an outage, or change the dispatched event if there is an outage.",
    "icon": "üíª"
  },
  {
    "title": "viewerFeederFocusCommand",
    "description": "Turns the feeder focus on or off.",
    "code": "<PressPerform>\n        <Command value=\"FeederFocusCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"FeederFocusCommand\" \n        class=\"com.ces.centricity.ops.viewer.FeederFocusCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusCommand",
    "description": "This command will cause the viewer to focus on a device or object.",
    "code": "<PressPerform>\n        <Command value=\"FocusCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"FocusCommand\" \n        class=\"com.ces.centricity.ops.viewer.FocusCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusNextCommand",
    "description": "This command will cause the viewer to focus on a device or object. If the object is already selected, it will focus on the next partition the object exists in.",
    "code": "<PressPerform>\n        <Command value=\"FocusNextCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"FocusNextCommand\" \n        class=\"com.ces.centricity.ops.viewer.FocusNextCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusOnXYCommand",
    "description": "This command will cause the viewer to focus on a specific location.",
    "code": "<PressPerform>\n        <Command value=\"FocusOnXYCommand\">\n            <Config name=\"viewer\" value=\"com.splwg.oms.client.viewer.Viewer1\"/>\n            <Config name=\"x\" value=\"DS_DAMAGE_REPORT.dr.inc.x\"/>\n            <Config name=\"y\" value=\"DS_DAMAGE_REPORT.dr.inc.y\"/>\n            <Config name=\"coord_system\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusSkippingSchematicsCommand",
    "description": "This command will cause the viewer to focus on a device or object skipping schematics.",
    "code": "<PressPerform>\n        <Command value=\"FocusSkippingSchematicsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusSkippingSingleCircuitSchematicCommand",
    "description": "This command will cause the viewer to focus on a device or object skipping the single circuit schematics.",
    "code": "<PressPerform>\n        <Command value=\"FocusSkippingSingleCircuitSchematicCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerFocusUpstreamSwitchCommand",
    "description": "This command will cause the viewer to refocus on an upstream device, usually a breaker. But the \"trace_to\" parameter can be any electrical device parent class.",
    "code": "<PressPerform>\n      <Command value=\"FocusUpstreamSwitchCommand\">\n        <Config name=\"trace_to\" value=\"pf_feeder_cls\"/>\n      </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerGetFaultCurrentCommand",
    "description": "Retrieves fault current results for the selected device in the Viewer. These are then displayed in the Fault Details balloon tab in the datastore DS_OBJECT_TOOL_TIP, in fields SINGLE_FAULT_CURRENT, TWO_FAULT_CURRENT, and THREE_FAULT_CURRENT. If the PHASE_TO_GROUND_FAULT_OHMS srs rule is configured with a non-zero value, then the CUSTOM_FAULT_CURRENT value is also available.",
    "code": "<PressPerform>\n        <Command value=\"GetFaultCurrentCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerGetLockedLoadsCommand",
    "description": "This Command sets the HAS_LOCKED_LOADS status flag based on whether the study session has any manually entered (locked) loads.",
    "code": "<SelectPerform>\n        <Command value=\"GetLockedLoadsCommand\"/>\n    </SelectPerform>",
    "icon": "üì•"
  },
  {
    "title": "viewerGetPickUpAmpsCommand",
    "description": "Retrieves pick up amps for the selected device in the Viewer. These are then displayed in the Power flow Details balloon tab.",
    "code": "<PressPerform>\n        <Command value=\"GetPickUpAmpsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerGetPowerFlowResultsCommand",
    "description": "Retrieves power flow results for the selected device in the Viewer.",
    "code": "<PressPerform>\n        <Command value=\"GetPowerFlowResultsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"GetPowerFlowResultsCommand\" \n        class=\"com.splwg.oms.client.viewer.GetPowerFlowResultsCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerGetScadaCommand",
    "description": "Retrieves SCADA data for the selected device in the Viewer. These are then displayed in the SCADA balloon tab in the datastore DS_OBJECT_TOOL_TIP.",
    "code": "<PressPerform>\n        <Command value=\"GetScadaCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerHistoryBackCommand",
    "description": "Command to perform viewer history back.",
    "code": "<PressPerform>\n        <Command value=\"HistoryBackCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"HistoryBackCommand\" \n        class=\"com.ces.centricity.ops.viewer.HistoryBackCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "viewerHistoryForwardCommand",
    "description": "Command to perform viewer history forward.",
    "code": "<PressPerform>\n        <Command value=\"HistoryForwardCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"HistoryForwardCommand\" \n        class=\"com.ces.centricity.ops.viewer.HistoryForwardCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerLoadMapsCommand",
    "description": "Loads additional maps tiles that are visible in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"LoadMapsCommand\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "viewerPopulateEventHistoryCommand",
    "description": "This command populates the DS_EVENT_HISTORY DataStore.",
    "code": "<PressPerform>\n        <Command value=\"PopulateOutageHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "viewerPopulateHighlightLegendDataStoreCommand",
    "description": "Populates the DS_HIGHLIGHT_LEGEND DataStore with the highlight statesand colors.",
    "code": "<PressPerform>\n        <Command value=\"PopulateHighlightLegendDataStoreCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"PopulateHighlightLegendDataStoreCommand\" \n        class=\"com.splwg.oms.client.viewer.PopulateHighlightLegendDataStoreCommand\"/>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "viewerPopulateLegendDataStoreCommand",
    "description": "Populates the DS_LEGEND DataStore with the current conductor symbology information.",
    "code": "<PressPerform>\n        <Command value=\"PopulateLegendDataStoreCommand\"/>\n            <Config name=\"symbol_class\" value=\"40607\"/>\n            <Config name=\"conductor_class\" value=\"406\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"PopulateLegendDataStoreCommand\" \n        class=\"com.splwg.oms.client.viewer.PopulateLegendDataStoreCommand\"/>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "viewerPopulateLimitSetDialogCommand",
    "description": "This command prepares for the DLG_LIMIT_SET by populating the DS_SELECTED_MEASURES for the selected set of measures in the Viewer.",
    "code": "<PressPerform>\n        <Command value=\"PopulateLimitSetDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "viewerPopulateViewerLatLongCommand",
    "description": "Command to read the coordinates of the selected Viewer location, convert them into their equivalent latitude and longitude values and populate the converted values in the datastore fields passed in as config parameters.",
    "code": "<PressPerform>\n        <Command value=\"PopulateViewerLatLongCommand\">\n            <Config name=\"datastore_field_latitude\" value=\"DS_SELECT_DAMAGE_LOCATION.LATITUDE\"/>\n            <Config name=\"datastore_field_longitude\" value=\"DS_SELECT_DAMAGE_LOCATION.LONGITUDE\"/>\n            <Config name=\"target_tool\" value=\"com.splwg.oms.client.damage.DamageAssessment\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerPopulateViewerXYCommand",
    "description": "Command to read the coordinates of the selected Viewer location and populate them in the datastore fields passed in as config parameters.",
    "code": "<PressPerform>\n         <Command value=\"PopulateViewerXYCommand\">\n                <Config name=\"datastore\" value=\"DS_CONTROL_TOOL\"/>\n                <Config name=\"datastore_x\" value=\"NEW_POINT_X\"/>\n                <Config name=\"datastore_y\" value=\"NEW_POINT_Y\"/>\n                <Config name=\"target_tool\" value=\"com.splwg.oms.client.control.Control\"/>\n         </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerPopulateVoltageOptionsCommand",
    "description": "Command to read the phases of the selected Viewer device and populate the voltage drop down options for power flow results tab of balloon dialogue.",
    "code": "<PressPerform>\n         <Command value=\"PopulateVoltageDisplayOptionsCommand\">\n                <Config name=\"lineVoltageforSinglePhase\" value=\"false\"/>\n         </Command>",
    "icon": "üíª"
  },
  {
    "title": "viewerRectangleFocusCommand",
    "description": "Focuses on a specified rectangle in the viewer",
    "code": "<Config name=\"sources\" value=\"'Name',0,'2237733.368598','388364.431336','2238620.245864','390121.34099'\"/>\n            <Config name=\"targets\" value=\"DS_VIEWER_DEFAULT.name,DS_VIEWER_DEFAULT.coord_sys,DS_VIEWER_DEFAULT.min_x,DS_VIEWER_DEFAULT.min_y,DS_VIEWER_DEFAULT.max_x,DS_VIEWER_DEFAULT.max_y\"/>\n        </Command>\n        <Command value=\"RectangleFocusCommand\">\n            <Config name=\"datastore\" value=\"DS_VIEWER_DEFAULT\"/>\n            <Config name=\"name\" value=\"name\"/>\n            <Config name=\"coord_sys\" value=\"coord_sys\"/>\n            <Config name=\"min_x\" value=\"min_x\"/>\n            <Config name=\"min_y\" value=\"min_y\"/>\n            <Config name=\"max_x\" value=\"max_x\"/>\n            <Config name=\"max_y\" value=\"max_y\"/>\n        </Command>\n</pre>",
    "icon": "üíª"
  },
  {
    "title": "viewerRedrawCommand",
    "description": "Redraws the viewer without loading any additional maps",
    "code": "<PressPerform>\n        <Command value=\"RedrawCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"RedrawCommand\" \n        class=\"com.ces.centricity.ops.viewer.RedrawCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerRefreshCommand",
    "description": "Rerenders the viewer, loading any maps as necessary.",
    "code": "<PressPerform>\n        <Command value=\"RefreshCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerReloadMapsCommand",
    "description": "Reloads all maps currently displayed in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"ReloadMapsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"ReloadMapsCommand\" \n        class=\"com.splwg.oms.client.viewer.ReloadMapsCommand\"/>",
    "icon": "üì•"
  },
  {
    "title": "viewerScaleResetCommand",
    "description": "Resets viewer's scale to the default value.",
    "code": "<PressPerform>\n        <Command value=\"ScaleResetCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"ScaleResetCommand\" \n        class=\"com.ces.centricity.ops.viewer.ScaleResetCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerSchematicsCommand",
    "description": "This command will cause the viewer to focus on a device or object in schematics.",
    "code": "<PressPerform>\n        <Command value=\"FocusSkippingSchematicsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerSearchForDeviceCommand",
    "description": "Command to perform search for a device in the database by calling ViewerBean.searchForDevice.",
    "code": "<PressPerform>\n        <Command value=\"SearchForDeviceCommand\">\n            <Config name=\"handle_class\" value=\"DS_VIEWER_EVENT_NUMBER_SEARCH.H_CLS\"/>\n            <Config name=\"handle_index\" value=\"DS_VIEWER_EVENT_NUMBER_SEARCH.H_IDX\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"SearchForDeviceCommand\" \n        class=\"com.ces.centricity.ops.viewer.SearchForDeviceCommand\"/>\n \n This command is used to get the handle, alias,\n and partition for a device and putting this information in the\n DeviceSearchDataStore in preparation for performing a focus on the device.",
    "icon": "üíª"
  },
  {
    "title": "viewerSearchParamModifiedCommand",
    "description": "Search in viewer based on modified parameters.",
    "code": "<SelectPerform>\n        <Command value=\"SearchParamModifiedCommand\"/>\n    </SelectPerform>\n    \n    <CommandClass name=\"SearchParamModifiedCommand\" \n        class=\"com.ces.centricity.ops.viewer.SearchParamModifiedCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerSearchResultResetCommand",
    "description": "This is a command to reset the search result in viewer.",
    "code": "<Perform name=\"Window\" category=\"windowClosing\">\n        <Command value=\"SearchResultResetCommand\"/>\n    </Perform>\n    \n    <CommandClass name=\"SearchResultResetCommand\" \n        class=\"com.ces.centricity.ops.viewer.SearchResultResetCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerSetCursorCommand",
    "description": "Sets mouse cursor to an image or default depending upon the parameter passed",
    "code": "<PressPerform>\n      <Command value=\"SetCursorCommand\">\n         <Config name=\"viewer\" value=\"com.splwg.oms.client.viewer.Viewer1\"/>\n         <Config name=\"cursor_image\" value=\"CrossHairCursor.png\"/>\n      </Command>     </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerSetupConditionFilterCommand",
    "description": "Activates a filter for a condition device in the viewer",
    "code": "If a status for a condition class is defined, then by default conditions that do not match will not be displayed.  If instead you want to want those status that don't match to have a default, then configure a match using a status of -1, which will be used if there isn't a match.",
    "icon": "üíª"
  },
  {
    "title": "viewerShowCoordsCommand",
    "description": "This command displays the mouse coordinates in the lower-right of the status bar.",
    "code": "<PressPerform>\n        <Command value=\"ShowCoordsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerSingleCircuitSchematicCommand",
    "description": "This command will cause the viewer to navigate to a single circuit schematic of the selected object.",
    "code": "<PressPerform>\n        <Command value=\"SingleCircuitSchematicCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerSymbolBiggerCommand",
    "description": "This is a command that sets symbols in the viewer to bigger scale.",
    "code": "<PressPerform>\n        <Command value=\"SymbolBiggerCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"SymbolBiggerCommand\" \n        class=\"com.ces.centricity.ops.viewer.SymbolBiggerCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerSymbolSmallerCommand",
    "description": "This is a command that sets symbols in the viewer to smaller scale.",
    "code": "<PressPerform>\n        <Command value=\"SymbolSmallerCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"SymbolSmallerCommand\"\n        class=\"com.ces.centricity.ops.viewer.SymbolSmallerCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTextBiggerCommand",
    "description": "This is a command that sets the text in the viewer to appear bigger.",
    "code": "<PressPerform>\n        <Command value=\"TextBiggerCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TextBiggerCommand\" \n        class=\"com.ces.centricity.ops.viewer.TextBiggerCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTextSmallerCommand",
    "description": "This is a command that sets the text in the viewer to appear smaller.",
    "code": "<PressPerform>\n        <Command value=\"TextSmallerCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TextSmallerCommand\" \n        class=\"com.ces.centricity.ops.viewer.TextSmallerCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerToggleAssessmentCommand",
    "description": "Command to toggle the ASSESSED bit for selected rows in the configured datastore. The datastore must have a HANDLE column.",
    "code": "<PressPerform>\n        <Command value=\"ToggleAssessmentCommand\">\n            <Config name=\"datastore\" value=\"DS_ASSESS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerToggleCommissioningCommand",
    "description": "Command to toggle the IGNORE bit for objects in the configured datastore. The datastore must have a HANDLE and an IS_IGNORED column. Devices that are already ignored will be unignored, and unignored devices will be ignored.",
    "code": "<PressPerform>\n        <Command value=\"ToggleCommissioningCommand\">\n            <Config name=\"datastore\" value=\"DS_APPROVE\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"ToggleCommissioningCommand\" \n        class=\"com.ces.centricity.ops.viewer.ToggleCommissioningCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceAllConnectedCommand",
    "description": "This is a command to trace all the connected devices to the selected device in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"TraceAllConnectedCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TraceAllConnectedCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceAllConnectedCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceCommand",
    "description": "This is a generic trace command that accepts two parameter, type, trace_for",
    "code": "<PressPerform>\n        <Command value=\"TraceCommand\">\n           <Config name=\"type\" value=\"TRACE_ALL_CONNECTED\"/>        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceNonRadialCommand",
    "description": "Command to trace to non-radial segments.",
    "code": "<CommandClass name=\"TraceNonRadialCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceNonRadialCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceParallelFeedersCommand",
    "description": "This command repopulates the feeder and substation names in the lower-right of the status bar with the full set of feeders and subs. This requires an MTService trace, which is why it is not done on initial device selection. This displays the same information as a normal selection for radial devices, but expands the list with all the feeder names for parallel and meshed devices.",
    "code": "<PressPerform>\n        <Command value=\"TraceParallelFeedersCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceToSourceCommand",
    "description": "This is a command to trace to the source of the selected device in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"TraceToSourceCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TraceToSourceCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceToSourceCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceToSwitchCommand",
    "description": "This is a command to trace to the switch of the selected device in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"TraceToSwitchCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TraceToSwitchCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceToSwitchCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceToTransformerCommand",
    "description": "This is a command to trace to the transformer of the selected device in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"TraceToTransformerCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TraceToTransformerCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceToTransformerCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerTraceUndoCommand",
    "description": "This is a command to undo the trace performed in the viewer.",
    "code": "<PressPerform>\n        <Command value=\"TraceUndoCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"TraceUndoCommand\" \n        class=\"com.ces.centricity.ops.viewer.TraceUndoCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerUnloadMapsCommand",
    "description": "Unload all maps from the viewer.",
    "code": "<PressPerform>\n        <Command value=\"UnloadMapsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"UnloadMapsCommand\" \n        class=\"com.ces.centricity.ops.viewer.UnloadMapsCommand\"/>",
    "icon": "üì•"
  },
  {
    "title": "viewerUpdateSelectMapsCommand",
    "description": "Updates the load select dialog with the list of maps that are in view.  Any new rows that weren't in the dialogpreviously will be added, but not checked.",
    "code": "<PressPerform>\n        <Command value=\"UpdateSelectMapsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerUpdateWorkspaceCheckboxesCommand",
    "description": "This is a command that Updates the Viewer Checkboxes on the Workspace tool when a viewer is close in CrewCentricity V2.",
    "code": "<PressPerform>\n        <Command value=\"UpdateWorkspaceCheckboxesCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"UpdateWorkspaceCheckboxesCommand\" \n        class=\"com.ces.centricity.ops.viewer.UpdateWorkspaceCheckboxesCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerUpstreamDeviceReportCommand",
    "description": "This Command makes a request to PFService to perform an upstream trace and store the results to the pf_temp_trace database table. This Command then queries the pf_temp_trace_view database view to store the results of the trace, as joined with model attribute tables, to the DS_UPSTREAM_DEVICES DataStore.",
    "code": "<PressPerform>\n        <Command value=\"UpstreamDeviceReportCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerReleaseCrewCommand",
    "description": "Releases crews from the selected outage or device.",
    "code": "If the selected event is a device it will release all crews from all events on the device.  If on outage is selected, then only those crews on the selected outage will be released.  If this is selected on a crew, then just the single crew will be released from the event. if this is an AVL crew, then the crew will release from all dispatched or onsite events.  However, if crew is notdispatched, it will release the crew from all assigned events.",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerRightClickCommand",
    "description": "This command gets executed when the user right clicks on a device, or otherwise brings up the popup menu. It populates the Control tool data stores and then based upon the visibility and enabled property of corresponding buttons and menu items in the Control tool configuration, it will change the visibility and enablement for right-click menu items in the Viewer. These Viewer menu items need to have names that match the Control Tool buttons, but with MNU_ prefixes instead of BTN_ prefixes. \nFor the Viewer menu items to display, the Visible when clause in the Viewer popup and the Visible when clause in the Control tool menu both need to evaluate to true. Enablement is determined strickly from the Control tool configuration.",
    "code": "<Command value=\"ViewerRightClickCommand\" when=\"MAP_RENDERED\">\n  <Config name=\"menu_names\" value=\"OPERATE_POPUP,TAG_POPUP,MODEL_EDIT_POPUP\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerRightClickExecuteCommand",
    "description": "This command gets executed when the user select a menu item from the right-click popup menu in the viewer.It will execute the command that is associated with the given button name or menu item name within the context of the Control tool (after Control data stores have been populated.)",
    "code": "This command can be used with any button or popup menu item in the control tool. Here is an example:\n<Command value=\"ViewerRightClickExecuteCommand\">\n    <Config name=\"popupmenuitemname\" value=\"BTN_OPEN_DEVICE\"/>\n    <Config name=\"popupmenuname\" value=\"OPERATE_POPUP\"/>\n</Command> \n\n<Command value=\"ViewerRightClickExecuteCommand\">\n    <Config name=\"controlbuttonname\" value=\"BTN_HLM_TROUBLE_INFO\"/>\n    <Config name=\"controlbuttonpanelname\" value=\"PNL_CONTROL_BUTTONS\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerSearchCommand",
    "description": "Command to perform a viewer search.  Its flexible enough to handle any sort of searchthat returns a handle (with an optional partition), coordinate, or two coordinatesthat contain the bounding box",
    "code": "<ReturnPerform>\n        <Command value=\"ViewerSearchCommand\">\n        </Command>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerSelectCommand",
    "description": "Selects a device using the mouse.",
    "code": "If the ctrl key is held down then the selected is appended to, otherwise it is replaced.\n Also, apppending only works when supply node selection mode is active.",
    "icon": "üíª"
  },
  {
    "title": "viewerViewerWheelZoomCommand",
    "description": "This will zoom the viewer based on mouse wheel rotation.",
    "code": "<Perform name=\"MouseWheel\">\n        <Command value=\"ViewerWheelZoomCommand\" when=\"MAP_RENDERED\">\n          <Config name=\"fast\" value=\"false\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "viewerXYLocationFocusCommand",
    "description": "This command will cause the viewer to focus on an rectangular location.  It uses the last search done by the ViewerSearchCommand",
    "code": "<PressPerform>\n        <Command value=\"XYLocationFocusCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "viewerZoomInCommand",
    "description": "This is a command used for viewer to zoom in .",
    "code": "<PressPerform> \n        <Command value=\"ZoomInCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"ZoomInCommand\" \n        class=\"com.ces.centricity.ops.viewer.ZoomInCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "viewerZoomOutCommand",
    "description": "This is a command used for viewer to zoom out.",
    "code": "<PressPerform>\n        <Command value=\"ZoomOutCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"ZoomOutCommand\" \n        class=\"com.ces.centricity.ops.viewer.ZoomOutCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBAgentAssignSelectedCommand",
    "description": "This command is executed when an agent row is selected in the DLG_ASSIGN_CALLBACKS dialog.",
    "code": "<SelectPerform>\n        <Command value=\"WCBAgentAssignSelectedCommand\"/>\n    </SelectPerform>\n    \n    <CommandClass name=\"WCBAgentAssignSelectedCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBAgentAssignSelectedCommand\"/>\n    \n This sets the flag when the number of callbacks assigned to the agent are greater then 0.",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBAgentCBListSelectedCommand",
    "description": "This command is executed when a Callback List row is selected in the DLG_SELECT_CALLBACKLIST dialog.",
    "code": "<SelectPerform>\n        <Command value=\"WCBAgentCBListSelectedCommand\"/>\n    </SelectPerform>\n    \n    <CommandClass name=\"WCBAgentCBListSelectedCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBAgentCBListSelectedCommand\"/>\n    \n This sets the flag when the number of callbacks remaining is 0.",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBAssignAgentCommand",
    "description": "This command assigns all the unassigned callbacks of the outage to the selected Agent",
    "code": "<PressPerform>\n        <Command value=\"WCBAssignAgentCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBAssignAgentCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBAssignAgentCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBAssignCallbacksCommand",
    "description": "This command populates the OutageCBListDataStore with the callback summary for each agent (the ones who are either logged in or are not in-house) specific to the outage selected.",
    "code": "<PressPerform>\n        <Command value=\"WCBAssignCallbacksCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBAssignCallbacksCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBAssignCallbacksCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBAssignExitCommand",
    "description": "This command verifies if callback assignment changes are saved before closing the DLG_ASSIGN_CALLBACKS dialog.",
    "code": "<Perform name=\"Window\" category=\"windowClosing\">\n        <Command value=\"WCBAssignExitCommand\"/>\n    </Perform>\n    \n    <CommandClass name=\"WCBAssignExitCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBAssignExitCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBCallbackListExitCommand",
    "description": "This command verifies if the callback(s) is saved before the user tries to exit the DLG_CALLBACK_LIST dialog.",
    "code": "<PressPerform>\n        <Command value=\"WCBCallbackListExitCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBCallbackListExitCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBCallbackListExitCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBCallbackStatusDateTimeCommand",
    "description": "This command populates the data and time whenever the status of the callback is changed.",
    "code": "<SelectPerform>\n        <Command value=\"WCBCallbackStatusDateTimeCommand\"/>\n    </SelectPerform>\n    \n    <CommandClass name=\"WCBCallbackStatusDateTimeCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBCallbackStatusDateTimeCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBCancelCallbacksCommand",
    "description": "This command cancels all the callbacks for the selected outage which are assigned to this agent.",
    "code": "<PressPerform>\n        <Command value=\"WCBCancelCallbacksCommand\">\n            <Config name=\"datastore\" value=\"DS_AGENT_CALLBACK_LISTS\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBCancelCallbacksCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBCancelCallbacksCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBConfirmedExitCommand",
    "description": "This command is executed on the \"EXIT\" button on the toolbar or the Menu bar on the WebCallback tool.",
    "code": "<PressPerform>\n        <Command value=\"WCBConfirmedExitCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBConfirmedExitCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBConfirmedExitCommand\"/>    \n This command would shut down the \n entire application and by doing so the agent will be unassigned of all his \n callbacks and the callback list would be added to the Unassigned List",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBDisplayMyCBListCommand",
    "description": "This command populates the AgentCBListDataStore",
    "code": "<PressPerform>\n        <Command value=\"WCBDisplayMyCBListCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBDisplayMyCBListCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBDisplayMyCBListCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBModifyAssignCommand",
    "description": "This command is executed on the changes made to the no of callbacks assigned to an agent or to the pct.",
    "code": "<Perform name=\"CellEdited\" category=\"cellEdited\">\n        <Command value=\"WCBModifyAssignCommand\"/>\n    </Perform>\n    \n    <CommandClass name=\"WCBModifyAssignCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBModifyAssignCommand\"/>\n    \n It verify that a correct number is entered and also calculates the percentage or number on the basis of what was entered.",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBOpenCBListCommand",
    "description": "This command populates the outage, customer and callbacks information for the selected outage",
    "code": "<PressPerform>\n        <Command value=\"WCBOpenCBListCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBOpenCBListCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBOpenCBListCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBProcessOneCallbackCommand",
    "description": "This command populates the CallbackDataStore with a single incident.",
    "code": "<PressPerform>\n        <Command value=\"WCBProcessOneCallbackCommand\">\n            <Config name=\"datastore\" value=\"DS_CALLBACKS\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBProcessOneCallbackCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBProcessOneCallbackCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBProcessOneCallbackExitCommand",
    "description": "This command verifies if the callback is saved before the user tries to exit the DLG_PROCESS_ONE_CALLBACK dialog.",
    "code": "<PressPerform>\n        <Command value=\"WCBProcessOneCallbackExitCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBProcessOneCallbackExitCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBProcessOneCallbackExitCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBSaveAssignmentsCommand",
    "description": "This command save the changes when callback are assigned or unassigned either by changing the numbers or percentage in the table columns.",
    "code": "<PressPerform>\n        <Command value=\"WCBSaveAssignmentsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBSaveAssignmentsCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBSaveAssignmentsCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBSaveCallbackStatusCommand",
    "description": "This command saves the callbacks whose status has been modified.",
    "code": "<PressPerform>\n        <Command value=\"WCBSaveCallbackStatusCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBSaveCallbackStatusCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBSaveCallbackStatusCommand\"/>",
    "icon": "‚è∞"
  },
  {
    "title": "commandsWCBUnassignAgentCommand",
    "description": "This command unassigns the selected Agent from all the callbacks for an outage and sends the callback list to the unassigned pool",
    "code": "<PressPerform>\n        <Command value=\"WCBUnassignAgentCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBUnassignAgentCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBUnassignAgentCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBUnassignAllAgentCommand",
    "description": "This command unassigns the selected Agent from all the callbacks and sends the callback list to the unassigned pool",
    "code": "<PressPerform>\n        <Command value=\"WCBUnassignAllAgentCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"WCBUnassignAllAgentCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBUnassignAllAgentCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsWCBUpdatePriorityCommand",
    "description": "This command ensures that the include priority checkbox is unselected only for the out of house agents",
    "code": "<ReturnPerform>\n        <Command value=\"WCBUpdatePriorityCommand\"/>\n    </ReturnPerform>\n    \n    <CommandClass name=\"WCBUpdatePriorityCommand\" \n        class=\"com.ces.centricity.ops.wcb.commands.WCBUpdatePriorityCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "workagendaAbortDMSCommand",
    "description": "Aborts FLISR or CVR processing for the selected outage. This cancels any FLISR solutions and stops any automatic execution of the sheet.",
    "code": "<PressPerform>\n        <Command value=\"AbortDMSCommand\">\n            <Config name=\"datastore\" value=\"DS_WA_ALARMS\"/>\n            <Config name=\"event_column\" value=\"EVENT_HDL\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaAcknowledgeCommand",
    "description": "Acknowledges the selected outages, including sub events for condensed rows.",
    "code": "<PressPerform>\n        <Command value=\"AcknowledgeCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "workagendaAMRCompleteRequestCommand",
    "description": "This command is used to complete or cancel AMR request.",
    "code": "<PressPerform>\n        <Command value=\"AMRCompleteRequestCommand\">\n            <Config name=\"action\" value=\"complete\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"AMRCompleteRequestCommand\"\n        class=\"com.splwg.oms.client.workagenda.AMRCompleteRequestCommand\"/>\n    \n Valid values for parameter \"action\": \n   complete - complete AMR request \n   cancel - cancel AMR request \n    \n Error message codes: \n   AMR_COMPLETE_FAILED- failure to complete AMR request \n   AMR_CUSTOMERS- failure to retrieve customer information \n   AMR_MULTIPLE_COMPLETION- completion of multiple AMR requests is not allowed",
    "icon": "üåê"
  },
  {
    "title": "workagendaAMRConfirmCommand",
    "description": "Populates datastore DS_AMR_CONFIRM with the handle of the selected event.",
    "code": "<PressPerform>\n        <Command value=\"AMRConfirmCommand\">\n            <Config name=\"customer_limit\" value=\"1\"/>\n            <Config name=\"display_dialog\" value=\"false\"/>\n        </Command>\n    </PressPerform>\n \n Depending on the number of customers affected by the selected event either \n displays dialog DLG_AMR_QUERY_TYPE (if configured) or brings up \n AMR Customers page of the Trouble Info tool.",
    "icon": "üíª"
  },
  {
    "title": "workagendaAMRCreateIncidentsCommand",
    "description": "Creates AMR incidents based on rows selected in the DS_AMR_METERS datastore.",
    "code": "<PressPerform>\n        <Command value=\"AMRCreateIncidentsCommand\"/>\n    </PressPerform>\n    \n Error message codes:\n   AMR_CREATE_INCIDENTS - failure to submit AMR calls",
    "icon": "üíª"
  },
  {
    "title": "workagendaAMRRefreshCommand",
    "description": "Refreshes the AMR Requests tool.",
    "code": "<PressPerform>\n        <Command value=\"AMRRefreshCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaAMRResubmitCommand",
    "description": "Re-submits existing AMR request.",
    "code": "<PressPerform>\n        <Command value=\"AMRResubmitCommand\"/>\n    </PressPerform>\n    \n If the AMR request is active user will be asked if it should be canceled before re-submitting it.\n    \n Error message codes:\n   AMR_RESUBMIT_FAILED - failure to resubmit AMR request",
    "icon": "üíª"
  },
  {
    "title": "workagendaAMRSelectCommand",
    "description": "Selects event in Work Agenda, which is associated with the currently selected AMR request.",
    "code": "<PressPerform>\n        <Command value=\"AMRSelectCommand\">\n            <Config name=\"data_source\" value=\"DS_COMPLETE_REQUEST\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaAMRSendRequestCommand",
    "description": "Send AMR request to JMService. Uses datastores DS_AMR_CONFIRM (query type and event index) and DS_AMR_CONFIRM_METERS (list of meters to ping) to determine request parameters (query type and event index).",
    "code": "<PressPerform>\n        <Command value=\"AMRSendRequestCommand\"/>\n    </PressPerform>\n    \n Uses datastores DS_AMR_CONFIRM (query type and event index) and \n DS_AMR_CONFIRM_METERS (list of meters to ping) to determine request parameters (query type and event index).\n If some meters were rejected by JMService because of an existing active \n AMR request dialog datastore DS_AMR_REJECTED is populated and status flag HAS_REJECTED_METERS is set. \n    \n Error message codes: \n   AMR_REQUEST_FAILED - failure to send AMR request \n   AMR_QUERY_TYPE - unknown query type \n   AMR_CUSTOMERS - failure to retrieve customer information",
    "icon": "üåê"
  },
  {
    "title": "workagendaAMRShowRequestsCommand",
    "description": "Applies filter to AMR Requests page to display requests for the event \nselected in Work Agenda.",
    "code": "<PressPerform> \n        <Command value=\"AMRShowRequestsCommand\">\n            <Config name=\"runInTool\" value=\"com.splwg.oms.client.workagenda.AMRRequests\"/>\n        </Command>\n    </PressPerform>\n        \n Error message codes:\n    NO_AMR_REQUESTS - no AMR requests for the selected event",
    "icon": "üåê"
  },
  {
    "title": "workagendaAssociateEventCommand",
    "description": "Associates the selected outage.",
    "code": "<PressPerform>\n        <Command value=\"AssociateEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaCancelEventCallbacksCommand",
    "description": "Clears callback request and callback time fields in all incidents for the selected events.",
    "code": "<PressPerform>\n        <Command value=\"CancelEventCallbacksCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "workagendaCancelEventCommand",
    "description": "Displays the DLG_REASON, then cancels the selected outage.",
    "code": "<PressPerform>\n        <Command value=\"CancelEventCommand\">\n            <Config name=\"complete_job\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaCancelLimitOverrideCommand",
    "description": "Cancel the limit override for the selected measure",
    "code": "<PressPerform>\n        <Command value=\"CancelLimitOverrideCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaChangeFaultStatusCommand",
    "description": "Change the selected Fault call to the configured status.",
    "code": "<PressPerform>\n        <Command value=\"ChangeFaultStatusCommand\">\n            <Config name=\"status\" value=\"FAULT_CONFIRMED\"/>\n        </Command>\n    </PressPerform>\n    \n Values for status: \n    \"FAULT_PROBABLE\", \"FAULT_INCORRECT\", \"FAULT_CONFIRMED\",\"FAULT_CANCELED\" \n if \"CONFIRMED\", marks the single call as confirmed and marks the rest \n as incorrect.",
    "icon": "üìä"
  },
  {
    "title": "workagendaCheckLimitsModifiedCommand",
    "description": "Checks if the limit values in a limit table have been modifed by the operator",
    "code": "<PressPerform>\n        <Command value=\"CheckLimitsModifiedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaClearNotificationsCommand",
    "description": "Clears notifications for the selected event, including condensed rows. This command only works if notifies are grouped.",
    "code": "<PressPerform>\n        <Command value=\"AcknowledgeNotificationsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaClearReasonCommand",
    "description": "Clears the WorkAgendaDataStore.REASON field from WorkAgendaDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ClearReasonCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaCollectEventCommand",
    "description": "Collects an event (for association purposes).",
    "code": "<PressPerform>\n        <Command value=\"CollectEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaCommentTextModifiedCommand",
    "description": "Enables/disables the OK button on the comments dialog",
    "code": "<ModifiedPerform>\n        <Command value=\"CommentTextModifiedCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaConfigureSummaryCommand",
    "description": "Configures the summary columns to calculate in workagenda",
    "code": "<b>row_count</b> will count each row regardless of the values in the row.\n<b>count</b>  will count non blank rows. \n<b>sum</b> will total integer values.\n<b>real_sum</b> will total real (double) values.\n<b>feeder_count</b>, <b>recloser_count</b>, and <b>fuse_count</b> are specialized cases that count device class names that match valid feeder, recloser, and fuses. \n    <Command value=\"ConfigureSummaryCommand\">\n        <Config name=\"column_NUM_EVENTS\" value=\"row_count,true\"/>\n        <Config name=\"column_NUM_CUST_OUT\" value=\"sum,true,CUSTOMERS_OUT\"/>\n        <Config name=\"column_NUM_CALLS\" value=\"sum,true,CUST_CALL\"/>\n        <Config name=\"column_NUM_PRI_CALLS\" value=\"sum,true,PRIORITY\"/>\n        <Config name=\"column_NUM_CRIT_K_CUST\" value=\"sum,true,CRIT_K\"/>\n        <Config name=\"column_NUM_CRIT_C_CUST\" value=\"sum,true,CRIT_C\"/>\n        <Config name=\"column_NUM_CRIT_D_CUST\" value=\"sum,true,CRIT_D,\"/>\n        <Config name=\"column_NUM_FEEDERS_OUT\" value=\"feeder_count,true,DEV_CLS_NAME\"/>\n        <Config name=\"column_NUM_RECLOSERS_OUT\" value=\"recloser_count,true,DEV_CLS_NAME\"/>\n        <Config name=\"column_NUM_FUSES_OUT\" value=\"fuse_count,true,DEV_CLS_NAME\"/>\n        <Config name=\"column_NUM_CREWS_DISPATCHED\" value=\"sum,true,DISPATCH_COUNT\"/>\n        <Config name=\"column_NUM_PRIORITY_TODO\" value=\"count,false,#PRIORITY_TODO\"/>\n        <Config name=\"column_NUM_NORMAL_TODO\" value=\"count,false,#NORMAL_TODO\"/>\n        <Config name=\"column_NUM_IN_PROGRESS\" value=\"count,false,#IN_PROGRESS\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "workagendaCorrectFaultCommand",
    "description": "Submit a new fault location using the DS_FLA_EDIT DataStore.",
    "code": "<PressPerform>\n        <Command value=\"CorrectFaultCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaCreateEventCallbacksCommand",
    "description": "Creates restoration callbacks callbacks for all incidents for the selected events.",
    "code": "<PressPerform>\n        <Command value=\"CreateEventCallbacksCommand\">\n          <Config name=\"force\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "workagendaCreateFollowUpEventCommand",
    "description": "This command swaps the child active event into the DS_NEW_EVENT.RELATED_EVENT if the work_agenda.use_active_outage_as_lead configuration option is set. Then it displays the dialog.",
    "code": "<PressPerform>\n        <Command value=\"CreateFollowUpEventCommand\">\n            <Config name=\"dialog\" value=\"DLG_WA_CREATE_EVENT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaDisplayCrewInfoCommand",
    "description": "Asks the user to choose a crew from the selected event, then displays the Crew Info for it. If only a single crew is associated with the event, then the Crew Info is displayed for that crew immediately.",
    "code": "<PressPerform>\n        <Command value=\"DisplayCrewInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaGroupEventCommand",
    "description": "Groups the selected outages together.",
    "code": "<PressPerform>\n        <Command value=\"GroupEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaGroupMethodChosenCommand",
    "description": "This command class is executed when the grouping method has been chosen in the grouping dialog.",
    "code": "<PressPerform>\n        <Command value=\"GroupMethodChosenCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaIncompleteEventCommand",
    "description": "Incompletes the selected outage",
    "code": "<PressPerform>\n        <Command value=\"IncompleteEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaLoadCompletedEventCommand",
    "description": "Groups the selected outages together.",
    "code": "<PressPerform>\n        <Command value=\"LoadCompletedEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaLoadCompletedEventsRangeCommand",
    "description": "Display completed events from the specified range in the Work Agenda. Note that the \"completedRetainPeriod\" SRS_RULE governs the maximum number of completed events that can be loaded.",
    "code": "<PressPerform>\n        <Command value=\"LoadCompletedEventsRangeCommand\">\n            <Config name=\"max_days\" value=\"60\"/>\n        </Command>    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaLoadDynamicAlarmColorsCommand",
    "description": "Queries the alarm_rules table for the conditional coloring by alarm type, then sets the table colors to match. Right now, this assumes traditional CESColor numbers.",
    "code": "<PressPerform>\n        <Command value=\"LoadDynamicAlarmColorsCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "workagendaMakePredictedStableCommand",
    "description": "This command updates predicted stable flag for selected events. Events that cannot be updated, either because predicted stable flag is already in the desired state or it is not applicable, are ignored",
    "code": "<PressPerform>\n     <Command value=\"MakePredictedStableCommand\">\n       <Config name=\"stable\" value=\"true\"/>\n     </Command>\n   <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaOpenAnmsSchemeCommand",
    "description": "This Command opens the ANMS Sheet of the selected ANMS job from the work agenda.",
    "code": "<PressPerform>\n        <Command value=\"OpenAnmsSchemeCommand\">\n            <Config name=\"switchSheetCls\"\n                    value=\"3119\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaOperateWorkagendaFromViewerCommand",
    "description": "This command performs the same actions as the OperateWorkagendaCommand but uses the selection from the Viewer instead of the Control Tool.",
    "code": "<PressPerform>\n        <Command value=\"OperateWorkagendaFromViewerCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaOutageNonOutageBothSelectorCommand",
    "description": "Sets the current time to the DS_CALL_DATA DataStore for the current value key. Clears the old value from the DataStore.",
    "code": "<SelectPerform>\n        <Command value=\"OutageNonOutageBothSelectorCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaOutageViewFilterCommand",
    "description": "Show only rows the rows of the AlarmsDataStore that match this filter (show all outages).",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"OutageViewFilterCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaOverrideLimitsCommand",
    "description": "Override the limit on the selected measure with values from the DS_LIMITS_DEFAULT DataStore.",
    "code": "<PressPerform>\n        <Command value=\"OverrideLimitsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaPopulateEventDetailsDlgCommand",
    "description": "This command populates the DLG_EVENTDETAILS_UPD for the selected row in the DS_SELECTED_ALARMS_DLG DataStore. This can happen when the dialog is first displayed and we populate for the auto-selected row, or this can happen when the user selects a different row in the table of events on the dialog itself.",
    "code": "<PressPerform>\n        <Command value=\"PopulateEventDetailsDlgCommand\">\n            <Config name=\"datastores\" value=\"DS_SYSTEM_OM_DLG,DS_CAUSE_OM_DLG,DS_FAILURE_OM_DLG,DS_INTERRUPT_DEV_OM_DLG,DS_TYPE_OM_DLG,DS_ADV_WEATHER_OM_DLG,DS_ADV_ENVIRON_OM_DLG,DS_VEGETATION_OM_DLG,DS_FOREIGN_INTERF_OM_DLG,DS_DEF_EQUIP_OM_DLG,DS_SCHEDULED_DEV_OM_DLG,DS_HUMAN_ELEM_OM_DLG,DS_OTHER_CAUSE_OM_DLG,DS_REMEDY_OM_DLG,DS_PRIMARY_CAUSE_OM_DLG\"/>\n            <Config name=\"categories\" value=\"SYSTEM_OM,CAUSE_OM,FAILURE_OM,INTERRUPT_DEV_OM,TYPE_OM,ADV_WEATHER_OM,ADV_ENVIRON_OM,VEGETATION_OM,FOREIGN_INTERF_OM,DEF_EQUIP_OM,SCHEDULED_DEV_OM,HUMAN_ELEM_OM,OTHER_CAUSE_OM,REMEDY_OM,PRIMARY_CAUSE_OM\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaPopulateFLACommand",
    "description": "This Command populates the Fault Location Analysis Tool using the tool's load() method.",
    "code": "<PressPerform>\n        <Command value=\"PopulateFLACommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaPopulateOverrideLimitDialogCommand",
    "description": "Populates the DS_LIMIT_BANDS DataStore in preparation for the DLG_OVERRIDE_LIMITS dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateOverrideLimitDialogCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "workagendaPopulateReadingPaneCommand",
    "description": "Populates or repopulates the Reading Pane based on the passed parameters. Note that the panel repopulates on a timer so user selections don't stack up requests to repopulate the panel. The timout value is governed by the \"work_agenda.reading_pane_population_delay\" Work Agenda global property.",
    "code": "<PressPerform>\n        <Command value=\"PopulateReadingPaneCommand\">\n            <Config name=\"do_event_details\" value = \"true\"/>\n            <Config name=\"do_event_log\" value = \"false\"/>\n            <Config name=\"do_trouble_info\" value = \"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaPopulateReferralCommand",
    "description": "This populates the referral dialog box.",
    "code": "<PressPerform>\n        <Command value=\"PopulateReferralCommand\">\n            <Config name=\"event\" value=\"\">\n        </Command\">\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaPopulateSCADASummaryCommand",
    "description": "Populate the DS_SCADA_SUMMARY ObjectDataStore with instances of Measure, as retrieved from the CGW getMeasures() API.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"PopulateSCADASummaryCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaReleaseCrewCommand",
    "description": "Releases all crews (assignments and dispatches) from the selected outage.",
    "code": "<PressPerform>\n        <Command value=\"ReleaseCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaReleaseCrewFromAllRelatedCommand",
    "description": "Release the crew from all the related events listed in the DS_CREW_RELATED_EVENTS datastore. This is used in the DLG_SEND_CREW_TO_RELATED dialog.",
    "code": "<PressPerform>\n        <Command value=\"ReleaseCrewFromAllRelatedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaReleaseSelectedCrewsCommand",
    "description": "Populates the DS_SELECTED_CREWS DtaStore with the crews for the selected outage. Then displays the DLG_RELEASE_CREWS dialog and releases all selected crews (assignments and dispatches) from the outage.",
    "code": "<PressPerform>\n        <Command value=\"ReleaseSelectedCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaRemoveGroupEventErrorsCommand",
    "description": "Removes from Group Events dialog events that caused errors during latest grouping attempt.",
    "code": "<PressPerform>\n        <Command value=\"RemoveGroupEventErrorsCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaScrollToSelectedCommand",
    "description": "This command will ensure the selected row is visible in a jbot table.",
    "code": "<PressPerform>\n        <Command value=\"ScrollToSelectedCommand\">\n            <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaSelectEventCommand",
    "description": "Select the row in WorkAgenda that matches the configured datasource's event idx.",
    "code": "<PressPerform>\n        <Command value=\"SelectEventCommand\">\n            <Config name=\"datasource\" value=\"DS_SWMAN_ASSOC_EVENTS_LOCAL.job.eventIdx\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaSendCrewToRelatedEventCommand",
    "description": "Send (dispatch) the crew to the related event selected in the DS_CREW_RELATED_EVENTS datastore. This is used in the DLG_SEND_CREW_TO_RELATED dialog.",
    "code": "<PressPerform>\n        <Command value=\"SendCrewToRelatedEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaSetEventErtCommand",
    "description": "Displays the DLG_SET_ERT, then sets or clears ERT value for the events selected in Work Agenda",
    "code": "<PressPerform>\n        <Command value=\"SetEventErtCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaSetEventInfoCommand",
    "description": "This command invokes setEventInfo API for the event,which is currently selected in Work Agenda or Viewer (only when invoked from Viewer)",
    "code": "<PressPerform>\n     <Command value=\"SetEventInfoCommand\">\n       <Config name=\"fields\" value=\"OUTAGES_TROUBLE_CODE,OUTAGES_SORT_COL1\"/>\n       <Config name=\"values\" value=\"DS_SOURCE.TCODE,'123'\"/>\n     </Command>\n   <PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaSetEventsForDlgCommand",
    "description": "This command populates the DS_SELECTED_ALARMS_DLG for the DLG_EVENTDETAILS_UPD. If the UPDATE_RELATED_EVENTS status flag is set before this call, this Command will use all related events for the single Work Agenda row selection. If not set, the selected rows themselves will be copied.",
    "code": "<PressPerform>\n        <Command value=\"SetEventsForDlgCommand\">\n            <Config name=\"use_lowest_event\" value=\"true\"/>\n            <Config name=\"relation_types\" value=\"1,2,3,4,8\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaSetGlobalErtCommand",
    "description": "This command sets or clears System-Wide Default ERT value",
    "code": "<PressPerform>\n        <Command value=\"SetGlobalErtCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaSetSelectionCommand",
    "description": "Set the selected row.",
    "code": "<PressPerform>\n        <Command value=\"SetSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowAllCommand",
    "description": "Removes all filters from the viewer of AlarmsDataStore",
    "code": "<PressPerform>\n        <Command value=\"ShowAllCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowCallsCommand",
    "description": "Displays the calls in the Trouble Info Tool",
    "code": "<PressPerform>\n        <Command value=\"ShowCallsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowCompleteCommand",
    "description": "Show only completed alarms on the viewer of AlarmsDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ShowCompleteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowControlCommand",
    "description": "Sets the device in the ControlDataStore and then displays the control tool.",
    "code": "<PressPerform>\n        <Command value=\"ShowControlCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowIncompleteCommand",
    "description": "Show only alarms that are in \"incomplete\" states on the viewer of AlarmsDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ShowIncompleteCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowInProgressCommand",
    "description": "Show only alarms that are in \"in progress\" states on the viewer of AlarmsDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ShowInProgressCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowMeasurementControlCommand",
    "description": "Sets the device in the ControlDataStore and then displays the control tool for the selected DS_SCADA_SUMMARY row.",
    "code": "<PressPerform>\n        <Command value=\"ShowMeasurementControlCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowToDoCommand",
    "description": "Show only alarms that are in \"to do\" states on the viewer of AlarmsDataStore.",
    "code": "<PressPerform>\n        <Command value=\"ShowToDoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaShowUncompletedCommand",
    "description": "Shows the uncompleted alarms of the AlarmsDataStore",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ShowUncompletedCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaStartEventCollectionCommand",
    "description": "Start event collection for event grouping purposes.",
    "code": "<PressPerform>\n        <Command value=\"StartEventCollectionCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaStopEventCollectionCommand",
    "description": "Stop event collection for event grouping purposes.",
    "code": "<PressPerform>\n        <Command value=\"StopEventCollectionCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaToggleRelatedEventFilterCommand",
    "description": "Toggle the related event filter on or off. Since this is used only when The Condensed View is checked, this command disables or enables current filters so the non-master events can be displayed or hidden, depending whether this is toggling on or off. To avoid confusion, this then disables the table column filters while in this expanded event view.\nThen this performs a cell filter on the RELATED_EVENT value found in the selected row, then sets/clears a RELATED_EVENTS_FILTERED flag.\nThis command should be triggered for single event selections in the Work Agenda, and will only execute for the master event row, and only when the +/- cell is selected.",
    "code": "<Command value=\"ToggleRelatedEventFilterCommand\"\"> \n        <Config name=\"when_column_selected\" value=\"#IS_MASTER_EVENT_EXPANDED\"/>\n    </Command>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaUpdateLimitSetCommand",
    "description": "This command updates the limit set for the selected rows to the value in DS_LIMITS_DEFAULT.LIMIT_SET",
    "code": "<PressPerform>\n        <Command value=\"UpdateLimitSetCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaUpdateMeasurementCommand",
    "description": "This command performs the configured action parameter on the selected Measurement in the DS_SCADA_SUMMARY.",
    "code": "<PressPerform>\n        <Command value=\"UpdateMeasurementCommand\">\n            <Config name=\"action\" value=\"MANUAL_ENTRY\"/>\n        </Command>\n    </PressPerform>\n All of these actions technically can be performed for mutiple selections, but\n it is hard to imagine a scenario whether the user would want to create a\n manual entry or override for mutiple values at once.",
    "icon": "üíª"
  },
  {
    "title": "workagendaUpdateMultipleEventsCommand",
    "description": "This command is used in the DLG_EVENTDETAILS_UPD dialog to update all checked fields for all the listed events. It does not attempt to check for changed fields, since that may differe from event to event in the list.\nWhen \"complete\" is true, this command also completes the events. If the \"completion_validation_group\" is specified, this runs the validation aginst the contents of this dialog before completion.",
    "code": "<PressPerform>\n        <Command value=\"UpdateMultipleEventsCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workagendaUpdateQualCommentStatusCommand",
    "description": "This command sets the boolean value for ENABLE_COMMENT_FIELD flag based on the action parameter in the DS_SCADA_SUMMARY. If the flag value is true, then the comments dialog pops up, otherwise it won't.",
    "code": "<PressPerform>\n        <Command value=\"UpdateQualCommentStatusCommand\">\n            <Config name=\"action\" value=\"INHIBIT\"/>\n        </Command>\n    </PressPerform>\n        \n Values for \"action\" parameter:\n   \"INHIBIT\" - Inhibit the Measurement\n   \"DISABLE_SCADA_MEASUREMENT\" - disable the Measurement in the power flow solution\n   \"OVERRIDE\" - Perform an override for the measurement. This uses the\n                  value entered in the DS_SCADA_SUMMARY_DEFAULT.NEW_A_VALUE or NEW_D_VALUE\n                  This is only valid for a single selected row.\n All of these actions technically can be performed for mutiple selections, but\n it is hard to imagine a scenario whether the user would want to create a\n override for mutiple values at once.",
    "icon": "üìä"
  },
  {
    "title": "workagendaUpdateReferralCommand",
    "description": "This updates the system from the referral dialog box.",
    "code": "<PressPerform>\n        <Command value=\"UpdateReferralCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaWorkagendaFocusCommand",
    "description": "This command focuses the Viewer on the selected Work Agenda row. If the selected row is a summary row, the Viewer focuses on the set of devices for the summed events.",
    "code": "<PressPerform>\n      <Command value=\"WorkagendaFocusCommand\">\n        <Config name=\"viewer_name\" value=\"com.splwg.oms.client.viewer.Viewer1\"/>\n      </Command> \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workagendaWorkAgendaRightClickCommand",
    "description": "This command gets executed when the user right clicks on a device, or otherwise brings up the popup menu. It populates the Control tool data stores and then based upon the visibility and enabled property of corresponding buttons and menu items in the Control tool configuration, it will change the visibility and enablement for right-click menu items in the Viewer. These Viewer menu items need to have names that match the Control Tool buttons, but with MNU_ prefixes instead of BTN_ prefixes. \nFor the Viewer menu items to display, the Visible when clause in the Viewer popup and the Visible when clause in the Control tool menu both need to evaluate to true. Enablement is determined strickly from the Control tool configuration.",
    "code": "<Command value=\"WorkAgendaRightClickCommand\" when=\"MAP_RENDERED\">\n  <Config name=\"menu_names\" value=\"OPERATE_POPUP,TAG_POPUP,MODEL_EDIT_POPUP\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "workagendaWorkAgendaRightClickExecuteCommand",
    "description": "This command gets executed when the user select a menu item from the right-click popup menu in the viewer.It will execute the command that is associated with the given button name or menu item name within the context of the Control tool (after Control data stores have been populated.)",
    "code": "This command can be used with any button or popup menu item in the control tool. Here is an example:\n<Command value=\"WorkAgendaRightClickExecuteCommand\">\n    <Config name=\"popupmenuitemname\" value=\"BTN_OPEN_DEVICE\"/>\n    <Config name=\"popupmenuname\" value=\"OPERATE_POPUP\"/>\n</Command> \n\n<Command value=\"WorkAgendaRightClickExecuteCommand\">\n    <Config name=\"controlbuttonname\" value=\"BTN_HLM_TROUBLE_INFO\"/>\n    <Config name=\"controlbuttonpanelname\" value=\"PNL_CONTROL_BUTTONS\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "workspaceClearCreateEventCommand",
    "description": "This command resets event information.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ClearCreateEventCommand\"/>\n    </Perform>",
    "icon": "üëÇ"
  },
  {
    "title": "workspaceCreateEventCommand",
    "description": "This command creates an event for the selected device. If the DS_NEW_EVENT.CREATE_SWITCHING_SHEET value is set to 'Y' and this command is used to create a restored real outage, then a switching sheet of the specified type will be created as well. Any created steps related to the restored real outage will also be moved to the new sheet if the sheet is of class EMERGENCY.  Any sheet of any other class will result in a Manual association to the event.",
    "code": "<PressPerform>\n        <Command value=\"CreateEventCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "workspaceInitSMSMonitorCommand",
    "description": "Initializes the SMService monitoring functionality.  This loads the current state of services monitored by SMService into the datastore DS_SMS_STATE and then keeps the datastore updated with the current state as updates come from SMService.  This datastore will have one entry for each service.  Services will have one of the following states:\n\n'starting' - Process has been started but not registered\n'initializing' - Process has registerd and is initializing\n'running' - Process has reported itself as initialized\n'failed' - Process has failed\n'interface failed' - Process has a failed interface\n'stopped' - Process has vouluntarily stopped\n'timeout' - Process has timed out",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"InitSMSMonitorCommand\"/>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "workspaceProtSchemeBackgroundCheckCommand",
    "description": "Starts a protection scheme background check",
    "code": "<PressPerform>\n        <Command value=\"ProtSchemeBackgroundCheckCommand\"/>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "workspaceSetTroubleCodeCommand",
    "description": "Expand the passed trouble code string to clues in the DS_CLUES DataStore.",
    "code": "<PressPerform>\n        <Command value=\"SetTroubleCodeCommand\">\n            <Config name=\"trouble_code\" value=\"00000000\">\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "workspaceSetupSplitPaneCommand",
    "description": "Sets the split pane divider location to the appropriate position.",
    "code": "If the parameter maximize is true it will maximize the divider location.\n Otherwise it will use the preferred size of the top component.",
    "icon": "üíª"
  },
  {
    "title": "workspaceStudyModeCommand",
    "description": "This command turns on, off or resets the study mode.",
    "code": "<PressPerform>\n        <Command value=\"StudyModeCommand\">\n            <Config name=\"option\" value=\"realtime\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsPopulateEventActionsCommand",
    "description": "This command populates the event actions data store.",
    "code": "<SelectPerform>\n        <Command value=\"PopulateEventActionsCommand\"/>\n    </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandsPopulateSRSLogCommand",
    "description": "This command populates the SRS log data store.",
    "code": "<SelectPerform>\n        <Command value=\"PopulateSRSLogCommand\"/>\n    </SelectPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandAddANMSConditionCommand",
    "description": "This command creates a new anms condition in the sheet based on the selected device,attribute and value from manual condition form in the sheet",
    "code": "<PressPerform>\n   <Command value=\"AddANMSConditionCommand\"/>\n  </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddAuditLogDetailsCommand",
    "description": "This command will insert an AuditLog entry into the SWMAN_STEP Table.",
    "code": "<PressPerform>\n        <Command value=\"AddAuditLogDetailsCommand\">\n            <Config name=\"auditlog_text\"\n                    value=\"{DS_AUDIT_LOG_COMMENT.value}\"/>\n            <Config name=\"auditlog_type\"\n                    value=\"{SWMAN_AUDITLOG.MANUAL_ADDITION.type}\"/>\n            <Config name=\"user_log\"\n                    value=\"true\"/>\n            <Config name=\"safety_doc_id\"\n                    value=\"<Safety Document's Id>\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandAddEventSheetAssocCommand",
    "description": "Brings up a dialog prompting user to select an event to add.",
    "code": "<PressPerform>\n        <Command value=\"AddEventSheetAssocCommand\">\n            <Config name=\"data_source\" value=\"DS_SELECTION.eventIdx\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandAddManualStepCommand",
    "description": "This command creates a new step based on the device, phaes, and control action in the DS_ADD_STEP datastore and adds it to the current sheet.",
    "code": "<PressPerform>\n        <Command value=\"AddManualStepCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddStepIndicatorCommand",
    "description": "Insert or remove the step insertion indicator.  The indicator is used to indicate where newly added steps will be recorded.  By default, when the inidcator is not shown, the steps will be added to the end of the steps list.  When setting the indicator and the indicator is already set, then it will be cleared first.",
    "code": "<PressPerform>\n        <Command value=\"AddStepIndicatorCommand\">\n            <Config name=\"reset\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddStepValidateDeviceCommand",
    "description": "This command checks the device in DS_ADD_STEP, populates the DS_ADD_STEP_OPERATIONS datastore with the valid control actions for the device, and populates the following DS_ADD_STEP fields: DEVICE_VALID, PHASE_A_VALID, PHASE_A, PHASE_B_VALID, PHASE_B, PHASE_C_VALID, PHASE_C. When used for select device recording in a safety document, the DS_ADD_STEP_OPERATIONS datastore is not altered as the operation is set based on the device list and configured rules.",
    "code": "<PressPerform>\n        <Command value=\"AddStepValidateDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddSwmanContractorCrewCommand",
    "description": "Adds the selected crews from DS_SWMAN_CREWS to the currently loaded switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"AddSwmanCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddSwmanCrewCommand",
    "description": "Adds the selected crews from DS_SWMAN_CREWS to the currently loaded switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"AddSwmanCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandAddUserLogCommentCommand",
    "description": "Adds a comment step to the user log. If a row is selected in the DS_USER_LOG datastore, then the new step will use the same time. Otherwise, the new step will use the current time.",
    "code": "<PressPerform>\n        <Command value=\"AddUserLogCommentCommand\">\n            <Config name=\"source\" value=\"DS_USER_LOG_INFO.COMMENT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandBuildImpactedCustomersCommand",
    "description": "Builds customer impacted list.",
    "code": "<PressPerform>\n        <Command value=\"BuildImpactedCustomersCommand\">\n            <Config name=\"ineligible_step_states\" value=\"&StepAborted;, &StepFailed;\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandCheckAllUnsavedChangesCommand",
    "description": "This command checks if there are any switching plans with unsaved changes and presents user with a single confirmation dialog.",
    "code": "<PressPerform>\n        <Command value=\"CheckAllUnsavedChangesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckCrewCommand",
    "description": "This command checks the highlighted steps and sets STATUS_CREW_SET flag to true if a crew is assigned to any of the highlighted steps.",
    "code": "<SelectPerform>\n        <Command value=\"CheckCrewCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckEditedOperationCommand",
    "description": "This command checks if the specified column text was modified from the original text for all steps.",
    "code": "<Command value=\"CheckEditedOperationCommand\">\n        <Config name=\"attribute\" value=\"swmanStep.editedOperation\"/>\n        <Config name=\"original_text\" value=\"#CUSTOM_STEP_OPERATION\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckExecuteSafetyCloseCommand",
    "description": "This command should be executed when the Execute Safety dialog is cancelled.Checks for modifications in the dialog and presents the user with the option to save, discard, or cancel the close.",
    "code": "<PressPerform>\n        <Command value=\"CheckExecuteSafetyCloseCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckExecuteStepsCommand",
    "description": "This command Holds all the Step selection validation logic and CMMTool Selection Logic.  It also populates all of the DS_SWITCHING_DEFAULT.STEPS__??? datastore values.",
    "code": "<Action name=\"ACT_REALTIME\">\n        <Command value=\"CheckExecuteStepsCommand\"/>\n    </Action>\n\n TODO This Command gets called each time the selection gets set, even when the \n ObjectDataStore implicitly re-sets the selections after a save. As a result, \n it generates CMMSelections when they are not entirely appropriate. Maybe we \n should save a last notified Handle so we don't re-send selections?",
    "icon": "üíª"
  },
  {
    "title": "commandCheckImpactedCustomerStatus",
    "description": "Sets status flags according to the currently selected row in the Impacted Customers table.",
    "code": "<PressPerform>\n        <Command value=\"CheckImpactedCustomerStatus\"/>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandCheckInSheetVersionCommand",
    "description": "Check in the Sheet's current version if it is not already in a checked-in state. This entails storing the sheet to the SWMAN_SHEET_HIST table and setting the sheet's checkedIn value to true. Once the change has been applied, the HL Message \"VERSION_CHECKED_IN\" is sent out allowing projects to do any additional processing after the version is checked in.",
    "code": "<PressPerform>\n        <Command value=\"CheckInSheetVersionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckLogHasDeviceOrEventCommand",
    "description": "This command checks whether the selected row in a data store of UserLog has the event field or device field populated and then populates a status flag (called <data_source>_HAS_DEVICE) or (called <data_source>_HAS_EVENT) based on the value of the parameter check_for_type passed in.  Data store must be an table com.splwg.oms.model.entity.swman.UserLog.",
    "code": "<SelectPerform>\n        <Command value=\"CheckLogHasDeviceOrEventCommand\">\n           <Config name=\"data_source\" value=\"DS_USER_LOG\"/>\n           <Config name=\"check_for_type\" value=\"device\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandCheckOpenDocumentCommand",
    "description": "Checks if there is an editable external document that is currently open.",
    "code": "<PressPerform>\n        <Command value=\"CheckOpenDocumentCommand\">\n            <Config name=\"path\" value=\"$java.io.tmpdir$/OracleNMS/Webswitching\"/>\n            <Config name=\"flag\" value=\"EDITING_DOCUMENTS\"/>\n            <Config name=\"restore_links\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckPlannedTimeCommand",
    "description": "This command checks and sets status flag to True if planned time is set.",
    "code": "<SelectPerform>\n        <Command value=\"CheckPlannedTimeCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckRemovableEventSheetAssocCommand",
    "description": "Validates that the selected row in the associated events data store is removable.",
    "code": "<SelectPerform>\n        <Command value=\"CheckRemovableEventSheetAssocCommand\"/>\n    </SelectPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandCheckStepFieldEditsCommand",
    "description": "This command checks if the content in configured columns for a sheet has been from the original text for edited steps.If the content is modified, the update time of parent step is updated to the latest time.The columns should be configured in 'SwmanParameters.properties'Here is an example : step.blockComparison.fieldEdits = Phases,extension.details,EditedOperation,DeviceAlias",
    "code": "<PressPerform>\n        <Command value=\"CheckStepFieldEditsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckStepHasDeviceCommand",
    "description": "This command checks whether the selected row in a data store of SwmanStepView has the device field populated and then populates a status flag (called <data_source>_HAS_DEVICE) with the result.  Data store must be an ObjectDataStore of table com.splwg.oms.model.entity.swman.SwmanStepView.",
    "code": "<SelectPerform>\n        <Command value=\"CheckStepHasDeviceCommand\">\n           <Config name=\"data_source\" value=\"DS_USER_LOG\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckStepsCompleteCommand",
    "description": "Checks whether the sheet's steps are in final state before sheet transistions to the complete state.  If the validStepFinalStates option is not set, then a query will be made to determine which step states are terminal states.  That is any state that does not have a next state.  Use Configuration Assistant to visually see which step states this may be. If the includeStates option is specified, then those step states will be included with the dynamically determined list of terminal states.",
    "code": "<PressPerform>\n        <Command value=\"CheckStepsCompleteCommand\">\n            <Config name=\"validStepFinalStates\" value=\"0, 320, 365\"/>\n        </Command>\n    </PressPerform>\n\nHere is a sample query that can be used to retrieve a step's final states:SELECT state_key FROM te_valid_states tevs WHERE tevs.app='WSW' AND tevs.state_key NOT IN (SELECT DISTINCT from_state_key FROM te_state_transitions te WHERE te.app='WSW')",
    "icon": "üíª"
  },
  {
    "title": "commandCheckUnsavedChangesCommand",
    "description": "This command checks if switching plan has unsaved changes and offers user an option to save them.",
    "code": "<Action name=\"ACT_UNLOCK\">\n        <Command value=\"CheckUnsavedChangesCommand\">\n            <Config name=\"allow_cancel\" value=\"false\"/>\n        </Command>\n    </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckUserAuthorityCommand",
    "description": "Checks if user has authority over the loaded switching plan. Abort flag is set and error message \"SWITCHING.NO_AUTHORITY\" is displayed if used does not have authority.",
    "code": "<Perform name=\"HLM\" category=\"onMessage\" type=\"RELOCK\">\n        <Command value=\"CheckUserAuthorityCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckUserEditableViewAreaCommand",
    "description": "This command verifies that the selected row is editable.",
    "code": "<SelectPerform>\n        <Command value=\"CheckUserEditableViewAreaCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckUserPermissionCommand",
    "description": "This Command is intended for use just before another Command, as a type of validation that the login user or userType has the appropriate USER_PERMISSION entry to perform the next Command or set of Commands.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"CheckUserPermissionCommand\">\n            <Config name=\"action\" value=\"LICENSED\"/>\n            <Config name=\"user\" value=\"WebSwitching\"/>\n            <Config name=\"user_type\" value=\"WebSwitching\"/>\n            <Config name=\"silent\" value=\"true\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandChooseEventCommand",
    "description": "Command picks an event number from a data field with a comma-separated list of event numbers.",
    "code": "<PressPerform>\n        <Command value=\"ChooseEventCommand\">\n            <Config name=\"source\" value=\"DS_USER_LOG.events\"/>\n            <Config name=\"target\" value=\"DS_USER_LOG_INFO.SELECTED_EVENT\"/>\n            <Config name=\"method\" value=\"dialog\"/>\n            <Config name=\"dialog\" value=\"DLG_PICK_EVENT\"/>\n            <Config name=\"datastore\" value=\"DS_PICK_EVENT\"/>\n        </Command>\n    </PressPerform>\n The available options for the \"method\" parameters are: \n     first - Use the first event in the list\n     last - Use the last event in the list\n     lowest - Use the lowest event in the list\n     highest - Use the highest event in the list\n     dialog - Open a dialog to let the user select an event",
    "icon": "üëÇ"
  },
  {
    "title": "commandClearFlisrConditionsCommand",
    "description": "This Command executes the DDService API call to clear all theFLISR Conditions for this switch Sheet. Note that this action is only valid in Real-Time mode.",
    "code": "<PressPerform>\n        <Command value=\"ClearFlisrConditionsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearLoadAmpsCommand",
    "description": "Instruct EMService to clear it using clear_amp_load high-level message.",
    "code": "<PressPerform>\n  <Command value=\"ClearLoadAmpsCommand\">\n  </Command>\n </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandClearStepCrewCommand",
    "description": "This command clears the assigned crew for all the highlighted steps.",
    "code": "<PressPerform>\n        <Command value=\"ClearStepCrewCommand\">\n            <Config name=\"scope\" value=\"selected\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearStepPlannedTimeCommand",
    "description": "This command clears the planned execution offset time.",
    "code": "<PressPerform>\n        <Command value=\"ClearStepPlannedTimeCommand\">\n            <Config name=\"scope\" value=\"selected\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCloseSheetCommand",
    "description": "This command  holds all logic to clean up resources while closing a Sheet.",
    "code": "<PressPerform>\n<Command value=\"CloseSheetCommand\">\n<Command/></PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCompleteReworkedStepsCommand",
    "description": "This command will set any incomplete steps to the Completed state using the state transition action complete_step. If any step is found that is not in a terminal state and is not in the New or Uninstructed state, then an error dialog will be displayed. This action will also update the step's Completed Date to the sheet's Finish Date if the user has not entered a Completed Date for the step.",
    "code": "<PressPerform>\n        <Command value=\"CompleteReworkedStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandConfigurePrintCommand",
    "description": "This configures the printer applications that are used for printing documents.  If a document is requested that does not have a listed application, the system will use the operating system default. Environment variables can be included by surrounding it with %.  For example, %APPDATA% will be replaced with the value of the environment variable APPDATA.  The filename will be added to the end of the text, or else use ${f} to mark where the file should go in the command.  ${p} can be used to indicate the default printer, if the printer app requires a printer name. ${q} can be used to embed a double quote (&) as a literal.",
    "code": "<Command value=\"ConfigurePrintCommand\">\n          <Config name=\"extension_jpg\" value=\"mspaint /pt $f $p\"/>\n          <Config name=\"extension_gif\" value=\"mspaint /pt $f $p\"/>\n          <Config name=\"extension_png\" value=\"mspaint /pt $f $p\"/>\n      </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandCopySafetyDocumentCommand",
    "description": "Creates a new stand-alone safety document of selected type by copying data from an existing safety document.  The src_datastore or the src_document_cls, src_document_idx have to be specified.  Also the type_datastore or the target_document_type have to be specified.",
    "code": "Here are two examples:\n    <Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"CopySafetyDocumentCommand\">\n            <Config name=\"src_document_cls\"\n                    value=\"DS_SAFETY_DOCUMENT_LOCAL.docType\"/>\n            <Config name=\"src_document_idx\"\n                    value=\"DS_SAFETY_DOCUMENT_LOCAL.docIdx\"/>\n            <Config name=\"target_type_datastore\"\n                    value=\"DS_SWITCHING_SHEET_CLS\"/>\n            <Config name=\"fields_to_clear\"\n                    value=\"completedDate\"/>        </Command>\n    </Perform>\n    <Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"CopySafetyDocumentCommand\">\n            <Config name=\"src_document_cls\"\n                    value=\"DS_SAFETY_DOCUMENT_LOCAL.docType\"/>\n            <Config name=\"src_document_idx\"\n                    value=\"DS_SAFETY_DOCUMENT_LOCAL.docIdx\"/>\n            <Config name=\"target_document_type\"\n                    value=\"Hold\"/>\n            <Config name=\"fields_to_clear\"\n                    value=\"completedDate\"/>        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandCopySwitchSheetCommand",
    "description": "Creates new switching plan of selected type by copying data from an existing switching plan.  The src_datastore or the src_sheet_cls, src_sheet_idx have to be specified.  Also the type_datastore or the target_sheet_type have to be specified.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"CopySwitchSheetCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateSafetyDocumentCommand",
    "description": "This command creates a new safety document of the type passed to it, adds the selected device to the device list and also provides an optional parameter to specify any JBot Action to perform any additional activity once the document is created. This command assumes it will be called from the Control Tool where the DS_CONTROL_TOOL datastore will be populated.",
    "code": "<Action name=\"ACT_CREATE_HOLD_DOC\">\n       <Command value=\"CreateSafetyDocumentCommand \"> \n          <Config name=\"safety_doc_type\" value=\"HOLD\"/> \n          <Config name=\"act_keys\" value=\"&SafetyPlaceHold;\"/>\n          <Config name=\"safety_doc_command_action\" value=\"ACT_TURN_TAG_POINTS_RECORD_ON\"/>\n        </Command>\n    </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateSafetyFromStepsCommand",
    "description": "Creates safety document from the list of switching steps selected by user.",
    "code": "<PressPerform>\n        <Command value=\"CreateSafetyFromStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateSafetyFromSwitchingCommand",
    "description": "Creates safety document for the switching sheet associated.",
    "code": "<PressPerform>\n        <Command value=\"CreateSafetyFromSwitchingCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateSwitchSheetCommand",
    "description": "Create a new switching sheet of the type passed in or selected from the Switching Sheets Class types list. For stand alone safety documents, special processing can be delayed by setting the DS_SAFETY_DOCUMENT_LOCAL.doc.initializing value to 'true'.  The value can also be checked in case you want to postpone any processing while the document is being initialized.  This flag was introduced to keep the edit log from logging updates that were being made while the document was being created.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"CreateSwitchSheetCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteAnmsConditionsCommand",
    "description": "Deletes the selected ANMS Conditions from  the ANMS Template.",
    "code": "<PressPerform>\n        <Command value=\"DeleteAnmsConditionsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteImpactedCustomer",
    "description": "Deletes selected impacted customer(s).",
    "code": "<PressPerform>\n        <Command value=\"DeleteImpactedCustomer\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteSheetCommand",
    "description": "Performs additional tasks when deleting a sheet like removing manual event associations, clearing the impacted customers and clearing the external documents lists.  This command also takes any additional parameters available to the SheetStateTransitionCommand command.  The parameter required from that command is the \"action\" parameter.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSheetCommand\"/>\n            <Config name=\"action\"\n                    value=\"delete\"/>\n            <Config name=\"clear_ic_list\"\n                    value=\"true\"/>\n            <Config name=\"clear_ext_list\"\n                    value=\"true\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteViewAreaCommand",
    "description": "Deletes the selected view area(s).",
    "code": "<PressPerform>\n        <Command value=\"DeleteViewAreaCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayFindReplaceDialogCommand",
    "description": "Initialize DataStores and display the DLG_FIND_REPLACE_DEVICE dialog.",
    "code": "<PressPerform>\n        <Command value=\"DisplayFindReplaceDialogCommand\">\n            <Config name=\"dialog\" value=\"DLG_FIND_REPLACE_DEVICE\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayNewNMSDialogCommand",
    "description": "Initialize DataStores and display the DLG_NEW_NMS_DIALOG or the DLG_NEW_OR_OPEN_SHEET_DIALOG dialog.",
    "code": "<PressPerform>\n        <Command value=\"DisplayNewNMSDialogCommand\" when=\"DS_LOGIN_ENTRY.TYPE == 'Switching Entry'\">\n            <Config name=\"dialog\"\n                    value=\"DLG_NEW_NMS_DIALOG\"/>\n            <Config name=\"check_authority\" value=\"false\"/>\n        </Command>\n        <Command value=\"DisplayNewNMSDialogCommand\" when=\"DS_LOGIN_ENTRY.TYPE != 'Switching Entry'\">\n            <Config name=\"dialog\"\n                    value=\"DLG_NEW_NMS_DIALOG\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayOpenNMSDialogCommand",
    "description": "Initialize DataStores and display the specified dialog.",
    "code": "<PressPerform>\n        <Command value=\"DisplayOpenNMSDialogCommand\" when=\"DS_LOGIN_ENTRY.TYPE == 'Switching Entry'\">\n            <Config name=\"dialog\"\n                    value=\"DLG_OPEN_SWITCHING_DIALOG\"/>\n            <Config name=\"check_authority\" value=\"false\"/>\n        </Command>\n        <Command value=\"DisplayOpenNMSDialogCommand\" when=\"DS_LOGIN_ENTRY.TYPE != 'Switching Entry'\">\n            <Config name=\"dialog\"\n                    value=\"DLG_OPEN_SWITCHING_DIALOG\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayViewAreaCommand",
    "description": "Displays the view area in a viewer.",
    "code": "<PressPerform>\n        <Command value=\"DisplayViewAreaCommand\">\n            <Config name=\"tool\" value=\"VIEW;0;1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDocumentOpenCommand",
    "description": "Opens a file with the default application. If the ALLOW_DOCUMENT_EDITS is set to false the file will be set to read-only. When Document Edits (ALLOW_DOCUMENT_EDITS)  are set to false and a modification is made to an External Document by the user, the   flag UNALLOWED_EDITS will be set to true to indicate that Unallowed Edits to an External   Document have been made.",
    "code": "<PressPerform>\n        <Command value=\"DocumentOpenCommand\">\n            <Config name=\"path\" value=\"$java.io.tmpdir$/OracleNMS/Webswitching\"/>\n            <Config name=\"modify_flag\" value=\"SHEET_EDITED\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDocumentSaveCommand",
    "description": "Saves one or more documents.  If a DS_EXTERNAL_DOCUMENTS_SAVE.file value is empty, then save the files to the DS_EXTERNAL_DOCUMENTS_SAVE.directory directory. If a value is specified in the DS_EXTERNAL_DOCUMENTS_SAVE.file field, then save the file with the name in the field to the directory indicated in DS_EXTERNAL_DOCUMENTS_SAVE.directory.",
    "code": "<PressPerform>\n        <Command value=\"DocumentSaveCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDropOrPasteStepsCommand",
    "description": "This command performs a copy or move from one SwmanStepDataStore to another. It currently performs two different actions, based on whether the TransferData is a cut/drop or a paste. It also looks for the \"PASTE_AS_GOBACKS\" status flag from the calling JBotTool, to determinewhether to reverse the steps before the paste.",
    "code": "<DropPerform flavor=\"SWMAN_STEP\" enable_paste=\"true\"\n                 enable_drop=\"false\">\n        <Command value=\"DropOrPasteStepsCommand\" when=\"!NOT_OWNER\">\n            <Config name=\"copy_clear_fields\"\n                    value=\"executedBy,executedTime,insertTime,state,studyState,stateKey,studyStateKey,insertUser,instructedUser,instructedTime,instructConditionIdx,condCls,condIdx\"/>\n            <Config name=\"goback_clear_fields\"\n                    value=\"executedBy,executedTime,insertTime,state,studyState,stateKey,studyStateKey,insertUser,instructedUser,instructedTime,instructConditionIdx\"/>\n           <Config name=\"new_sheet_clear_fields\"\n                    value=\"plannedOffset,safetyDocId\"/>\n           <Config name=\"rt_executed_move_allowed_states\"\n                    value=\"&Issued;,&Active;,&Instructed;,&HoldPending;,&NewEmergency;\"/>\n        </Command>\n    </DropPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteFlisrPlanCommand",
    "description": "This Command transitions to view only mode and executes the entireFLISR switching sheet. This should only be configured for FLISR sheets, and can only be executes in Real-Time mode.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteFlisrPlanCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteLoadShedPlanCommand",
    "description": "This Command transitions to view only mode and executes the Shed blocks of Load Shed switching sheet. This should only be configured for Load Shed sheets, and can only be executes in Real-Time mode.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteLoadShedPlanCommand\"/>\n           <Config name=\"block_act_key\" value=\"6570\"/>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandExecuteSafetyStepCommand",
    "description": "Executes the Confirm button on the Execute Safety dialog.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteSafetyStepCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteStateCallbackCommand",
    "description": "Calls a state callback method with arguments.  This command can only be used for calling callbacks setup for switching sheets. The sheet object is passed to the callback method and if the sheet has been altered, any flagged changes will be merged into the opened sheet.",
    "code": "<Command value=\"ExecuteStateCallbackCommand\">\n    <Config name=\"method_name\" value=\"SendEmailJob\"/>\n    <Config name=\"arg_names\" value=\"REPORT_TYPE, REPORT_SUBTYPE\"/>\n    <Config name=\"arg_values\" value=\"SwitchSheetsStateEmail, $swmanSheetCls.switchSheetCls$\"/>\n</Command>",
    "icon": "‚è∞"
  },
  {
    "title": "commandExecuteStepsCommand",
    "description": "Traverses the selected steps and executes each of them using the Control Tool and its cache of the CONTROL_ACT table. The Control Tool is responsible for displaying all warnings and errors, and this Command simply sets the step to COMPLETE if the action was successful. Note that parents of aggregates get set to PARTIAL if a subset of their children succeeded.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteStepsCommand\">\n            <Config name=\"action\" value=\"complete_step\"/>\n            <Config name=\"apply_instructed_steps_to_lookahead\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFindNextStepCommand",
    "description": "This command is used to either find a device in the swmanStep. DeviceAlias step field or to look for text in a configured set of step fields.  When specifying the step field list, the fields are the names of the configuredcolumns for the DS_STEPS datastore.  Calculated fields can also be specified.",
    "code": "<PressPerform>\n        <Command value=\"FindNextStepCommand\">\n            <Config name=\"columnKeyList\" value=\"swmanStep.deviceAlias, swmanStep.comments, #CUSTOM_STEP_OPERATION\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFocusAdjacentObjectCommand",
    "description": "Send the focus message to the Viewer that sent the last CMMSelectionfor the selected port from the DS_FIND_REPLACE datastore. If it's null or empty,send it to all Viewers.",
    "code": "<SelectPerform>\n        <Command value=\"FocusAdjacentObjectCommand\"/>\n    </SelectPerform>",
    "icon": "üìò"
  },
  {
    "title": "commandFocusMainWindowCommand",
    "description": "Switches focus to the main FCP container window.",
    "code": "<PressPerform>\n        <Command value=\"FocusMainWindowCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGenerateListOfSheetsReportCommand",
    "description": "This class retrieves a group of Switching-specific reports from an Oracle BI Publisher server. It also gathers the external file attachments for each switching sheet. In order to gather the file attachments, the BI Publisher parameter \"SEQ_SHEET_ID\" has to be populated with the sheet's ID.  This command also requires the DS_OPEN_SWITCHING_SHEET_LIST datastore values SWITCH_SHEET_CLS, SWITCH_SHEET_IDX, SHEET_TYPE_NAME, and SEQ_SHEET_ID. For the list of command parameters, see command class AbstractGenerateReportCommand.",
    "code": "<Command value=\"GenerateListOfSheetsReportCommand\">\n          <Config name=\"report_type\" value=\"SwitchSheets\"/>\n          <Config name=\"report_parameter_dialog\" value=\"DLG_REPORT_CONTENT_SELECTION\"/>\n          <Config name=\"parameter_datastore\" value=\"DS_SHEET_REPORT_CONTENT\"/>\n          <Config name=\"report_return_action\" value=\"Email\"/>\n      </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandGenerateReportCommand",
    "description": "This class retrieves one or more reports from an Oracle BI Publisher server.For the list of additional command parameters and for further details, see command class AbstractGenerateReportCommand.ParametersNameDescriptionRequiredsource_datastoreDatastore that contains all parameter values used to generate the report in BI Publisher.  These parameters are specific parameters pertaining to each subType report.  If you want different reports for each type of item in the request, then make sure you populate each row in this datastore with a subType value.YESsourcesNames of the datastore elements to read from the datastore specified in the \"source_datastore\" parameter.  These values are sent to BI Publisher as parameters to be used to gather the necessary data and generate the report.  For instance, the key CLASS and IDX values of the object your reporting on may be a good example of the sort of values you would want to pass on. These values must match up one to one with the entries specified in the \"targets\" parameter list.YEStargetsNames of the BI Publisher parameters that should take on the values determined by the matching \"sources\" element.  Basically, the sources values are read and then inserted into the BI Publisher parameters list under the name given through this parameter.  The names you specify here will be available from BI Publisher when processing the report request.  Specify a value for entry \"REPORT_SUBTYPE\" when processing a list of different objects that should be reported differently.  For instance, if your \"source_datastore\" has a list of switching sheets, then the \"REPORT_SUBTYPE\" should be the sheet class number.YESproperty_file_nameSet the property base file name.  The property file is used to look up the parameters related to the print request.  For property file SwmanUserText_en_US.properties, specify a value of \"SwmanUserText\". See file SwmanUserText_en_US.properties and the BIP_GENERATE_REPORT entries for an example of the parameters available and required.YESdistinct_columnSet this property to a source_datastore column name that should be used to determine a distinct list of selected entries in the datastore.  For instance in Work Agenda, if the same event is selected because of an additional NFY entry, then filter out the duplacates so that the event is only processed once.  This is an optional parameter.NORelated CommandsAbstractGenerateReportCommandUsed with ToolsANYNotesHere is an example:\n      <Command value=\"GenerateReportCommand\">\n          <Config name=\"report_type\" value=\"MyReportTypeName\"/>\n          <Config name=\"report_parameter_dialog\" value=\"DLG_REPORT_FORMAT\"/>\n          <Config name=\"parameter_datastore\" value=\"DS_MY_REPORT_CONTENT\"/>\n          <Config name=\"source_datastore\" value=\"DS_MY_SOURCE_DS_NAME\"/>\n          <Config name=\"sources\" value=\"VAL1, VAL2\"/>\n          <Config name=\"targets\" value=\"REPORT_SUBTYPE, PARAM2\"/>\n          <Config name=\"property_file_name\" value=\"MyPropertyFile\"/>\n          <Config name=\"report_return_action\" value=\"Email\"/>\n      </Command>",
    "code": "<Command value=\"GenerateReportCommand\">\n          <Config name=\"report_type\" value=\"MyReportTypeName\"/>\n          <Config name=\"report_parameter_dialog\" value=\"DLG_REPORT_FORMAT\"/>\n          <Config name=\"parameter_datastore\" value=\"DS_MY_REPORT_CONTENT\"/>\n          <Config name=\"source_datastore\" value=\"DS_MY_SOURCE_DS_NAME\"/>\n          <Config name=\"sources\" value=\"VAL1, VAL2\"/>\n          <Config name=\"targets\" value=\"REPORT_SUBTYPE, PARAM2\"/>\n          <Config name=\"property_file_name\" value=\"MyPropertyFile\"/>\n          <Config name=\"report_return_action\" value=\"Email\"/>\n      </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandGenerateSwitchSheetReportCommand",
    "description": "This class retrieves a Switching-specific report from an Oracle BI Publisher server. It also gathers the external file attachments for a switching sheet. In order to gather the file attachments, the BI Publisher parameter \"SEQ_SHEET_ID\" has to be populated with the sheet's ID. For the list of command parameters, see command class AbstractGenerateReportCommand.",
    "code": "<Command value=\"GenerateSwitchSheetReportCommand\">\n          <Config name=\"report_type\" value=\"SafetyDocs\"/>\n          <Config name=\"report_subtype\" value=\"HOLD\"/>\n          <Config name=\"report_parameter_dialog\" value=\"DLG_REPORT_CONTENT_SELECTION\"/>\n          <Config name=\"parameter_datastore\" value=\"DS_SHEET_REPORT_CONTENT\"/>\n          <Config name=\"report_return_action\" value=\"Email\"/>\n      </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandGetActionStepsCommand",
    "description": "This command loads the action steps for an event into a specific data store.  Data store must be an ObjectDataStore of table com.splwg.oms.model.entity.swman.UserLog.",
    "code": "<PressPerform>\n        <Command value=\"GetActionStepsCommand\">\n            <Config name=\"datastore\" value=\"DS_EVENT_LOG\"/>\n            <Config name=\"eventsource\" value=\"DS_EVENT_LOG_INFO.EVENT_IDX\"/>\n            <Config name=\"status\" value=\"DS_EVENT_LOG_INFO.STATUS\"/>\n            <Config name=\"status_message\" value=\"PROPERTY.STATUS_MESSAGE\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetAnmsModeCommand",
    "description": "This Command gets the current global ANMS mode status from DDService and sets it in the DS_MENU_BAR_DEFAULT.ANMS_MODE. 0: Disabled, 1: Manual, 2: Automatic.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"GetAnmsModeCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetEventStepsCommand",
    "description": "This command is used to populate the Steps tab on Event Details.",
    "code": "<PressPerform>\n        <Command value=\"GetMiscLogStepsCommand\">\n            <Config name=\"FETCH_TYPE\" value=\"prev\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandGetFlaModeCommand",
    "description": "This Command gets the current FLA mode from PFService and sets it in the DS_MENU_BAR_DEFAULT.FLA_MODE = N: Disabled, S: Enabled For Sustained, Y: Enabled For Momentary and Sustained.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"GetFlaModeCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetFlisrModeCommand",
    "description": "This Command gets the current FLISR mode status from MTService and sets it, in the DS_MENU_BAR_DEFAULT.FLISR_MODE. 0: Disabled, 1: Manual, 2: Automatic, 3: Disabled (Load Shed)",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"GetFlisrModeCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetFLMStatusCommand",
    "description": "This Command gets the current FLM status from PFService and sets it in the DS_MENU_BAR_DEFAULT.FLM_STATUS. 0: Disabled, 1: Enabled.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"GetFLMStatusCommand\"/>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandGetMiscLogStepsCommand",
    "description": "This command fetch misc log steps based from date specified or fetch type.Default the start date to today",
    "code": "<PressPerform>\n        <Command value=\"GetMiscLogStepsCommand\">\n            <Config name=\"FETCH_TYPE\" value=\"prev\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandGetProtectionSchemesModeCommand",
    "description": "This Command gets the current Protection Schemes status from MTService and sets it, in the DS_MENU_BAR_DEFAULT.PROTECTION_SCHEMES_MODE. 0: Disabled, 1: Manual, 2: Automatic.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"GetProtectionSchemesModeCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetUserLogCommand",
    "description": "This command loads the user logs for a user into a specific data store. Data store must be an ObjectDataStore of table com.splwg.oms.model.entity.swman.UserLog.",
    "code": "<PressPerform>\n        <Command value=\"GetUserLogCommand\">\n            <Config name=\"datastore\" value=\"DS_USER_LOG\"/>\n            <Config name=\"usersource\" value=\"DS_USER_LOG_INFO.USER\"/>\n            <Config name=\"beginsource\" value=\"DS_USER_LOG_INFO.BEGIN_TIME\"/>\n            <Config name=\"endsource\" value=\"DS_USER_LOG_INFO.END_TIME\"/>\n            <Config name=\"status\" value=\"DS_USER_LOG_INFO.STATUS\"/>\n            <Config name=\"status_message\" value=\"Loaded {0} row(s)\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandGroupStepsCommand",
    "description": "Group highlighted steps together. Assumes the steps are highlighted and in order.",
    "code": "<PressPerform>\n        <Command value=\"GroupStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandInitMoveCustomerCommand",
    "description": "Populates customer information in DS_MOVE_CUSTOMER (for display in the DLG_MOVE_CUSTOMER dialog) from the currently selected impacted customers.\nThe following fields are populated in DS_MOVE_CUSTOMER: cid, account_name, account_number, address, telephone_number, device, & device_name",
    "code": "<PressPerform>\n        <Command value=\"InitMoveCustomerCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandLinkSafetyFromStepsCommand",
    "description": "Links safety document to the currently selected step.",
    "code": "<Action name=\"ACT_LINK_SAFETY\">\n        <Command value=\"LinkSafetyFromStepsCommand\">\n            <Config name=\"safety_doc_id\" value=\"DS_SWITCHING_DEFAULT.LINK_DOC_ID\"/>\n        </Command>\n    </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandLoadOperatorCommentCommand",
    "description": "This command loads the operator comment for an event into a specific data field.",
    "code": "<PressPerform>\n        <Command value=\"LoadOperatorCommentCommand\">\n            <Config name=\"event\" value=\"DS_EVENT_LOG_INFO.EVENT_IDX\"/>\n            <Config name=\"datastore\" value=\"DS_EVENT_LOG_INFO.CASENOTE\"/>\n            <Config name=\"reload_from_server\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandLockObjectCommand",
    "description": "This command locks or unlocks an object. Optionally status flag can be set per operation result. Message dialog can be displayed, attempt to lock object fails in case of failed attempt to lock an object.",
    "code": "<Perform category=\"windowClosed\" name=\"Window\">\n        <Command value=\"LockObjectCommand\">\n            <Config name=\"app\" value=\"SW\"/>\n            <Config name=\"datastore\" value=\"DS_SWITCHING_SHEET_LOCAL\"/>\n            <Config name=\"class_column\" value=\"getCls\"/>\n            <Config name=\"index_column\" value=\"getIdx\"/>\n            <Config name=\"type_column\" value=\"getType\"/>\n            <Config name=\"lock\" value=\"false\"/>\n        </Command>\n    </Perform>",
    "icon": "üìò"
  },
  {
    "title": "commandModelEditsVerifiedCommand",
    "description": "This command is used to clear the model edit flag on all steps that have it set.",
    "code": "<PressPerform>\n        <Command value=\"ModelEditsVerifiedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandMoveCrewCommand",
    "description": "Relocates a crew to the device associated to the selected step.  Thiscommand will only move the crew symbol within the viewer and does not dispatch the crew to any events on the new device.  Use RelocateCrewCommand for that kind of operation. This command will only move the first crew selected in the DS_CREWS datastore. This command will only work when one step and one crew are selected.",
    "code": "<PressPerform>\n        <Command value=\"MoveCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandMoveImpactedCustomerCommand",
    "description": "Moves customer impacted by a switching plan to a new device. If customer is being move to an area, which is also impacted by the switching plan, the confirmation dialog IMPACTED_CUSTOMERS.CONFIRM_MOVE will be displayed. After successful move command ViewImpactedCustomersCommand is executed to refresh impacted customers table.",
    "code": "<PressPerform>\n        <Command value=\"MoveImpactedCustomerCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandObsoleteSwmanContractorCrewCommand",
    "description": "Adds the selected crews from DS_SWMAN_CREWS to the currently loaded switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"AddSwmanCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandOpenActiveCrewSheetCommand",
    "description": "This command opens sheet and safety editor(s) for selected entries from the DLG_CREWS_ARE_ACTIVE error dialog.",
    "code": "<PressPerform>\n        <Command value=\"OpenActiveCrewSheetCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandOpenSwitchSheetCommand",
    "description": "Opens a switching sheet of the type and number passed in or selected from the Switching Sheets List.",
    "code": "<PressPerform>\n        <Command value=\"OpenSwitchSheetCommand\">\n            <Config name=\"sheet_type\"\n                    value=\"Miscellaneous Log\"/>\n            <Config name=\"sheet_number\"\n                    value=\"1000\"/>\n            <Config name=\"datastore\"\n                    value=\"DS_OPEN_SWITCHING_SHEET_TEMPLATE\"/>\n            <Config name=\"tab\"\n                    value=\"TAB_EXTERNAL_DOCUMENTS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPhaseSelectionCommand",
    "description": "This is used to process a device's phase selection options.  Anywhere we need to display or process a device's phases, then this command should be used.",
    "code": "<PressPerform>\n        <Command value=\"PhaseSelectionCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateCrewReadyCommand",
    "description": "This Command is intended for populating the Crew Ready and Ready Date fieldsof the Steps tab of the Switching sheet indicating whether the field crew is readyto be instructed or not.",
    "code": "<PressPerform>\n        <Command value=\"PopulateCrewReadyCommand\">\n            <Config name=\"action\" value=\"set\"/>\n            <Config name=\"text_code\" value=\"YES\"/>\n        </Command>\n        <Command value=\"ScrollToSelectedCommand\">\n            <Config name=\"table\" value=\"TT_STEPS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateListWithOpenedSheetsCommand",
    "description": "Populates the Switching Sheet Association dialog with a list of sheets the user currently has opened.  This allows for quick association changes between sheets that the user is working with.  The alternative is to always search for the sheet from the dialog.",
    "code": "<PressPerform>\n        <Command value=\"PopulateListWithOpenedSheetsCommand\">\n            <Config name=\"datastore\" value=\"DS_SAFETY_ASSOC_SHEET_LIST\"/>\n            <Config name=\"check_authority\" value=\"true\"/>\n            <Config name=\"remove_source_sheet\" value=\"true\"/>\n        </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateRecordedScenariosCommand",
    "description": "Executes the get-scenarios script on the Corba Gateway server and places the results in the DS_SWITCHING_DEFAULT.GET_SCENARIOS_RESULT.",
    "code": "<PressPerform>\n        <Command value=\"PopulateRecordedScenariosCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateSafetyDevicesCommand",
    "description": "populates the safety document created from the switching sheet with a list of all or the highlighted devices from steps",
    "code": "<PressPerform>\n        <Command value=\"PopulateSafetyDevicesCommand \">\n          <Config name=\"include_all_step_devices\" value=\"false\"/> \n          <Config name=\"act_keys\" value=\"&SafetyPlaceHold;\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateSafetyDocsMenuCommand",
    "description": "Dynamically populates the safety documents that are associated to switching sheet into the Link to Safety Document menu.  Safety documents are only added to the list if their state is listed in the configuration parameter link_allowed_states which can be found in file SwmanParameters.properties.",
    "code": "<Command value=\"PopulateSafetyDocsMenuCommand\">\n            <Config name=\"safety_link_command_action\" value=\"ACT_LINK_SAFETY\"/>\n            <Config name=\"menu_names\" value=\"MNU_ACTS_LINK_SAFETY_DOC,MNU_LINK_SAFETY_DOC\"/>\n            <Config name=\"menu_title\" value=\"#MENU_TITLE\"/>\n        </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateSwmanCrewsCommand",
    "description": "Populates datastore DS_SWMAN_CREWS with all active crews from control zones user has authority over, excluding crews already associated to the loaded sheet",
    "code": "<PressPerform>\n        <Command value=\"PopulateSwmanCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRefreshAutoLoadedViewAreasCommand",
    "description": "This command will scan through the view areas, and if any view areas are marked to auto-load, and if the corresponding viewer is available, it will focus on that view.",
    "code": "<PressPerform>\n        <Command value=\"RefreshAutoLoadedViewAreasCommand\">\n            <Config name=\"displaywarning\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandRefreshSheetCommand",
    "description": "This command refreshes and redraws the existing sheet in Focus.",
    "code": "<Command value=\"RefreshSheetCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandRefreshSwitchSheetCommand",
    "description": "This command fetches requested switching sheet data from server andupdate corresponding datastores.",
    "code": "<PressPerform>\n        <Command value=\"RefreshSwitchSheetCommand\">\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRemoveEventSheetAssocCommand",
    "description": "Removes an event association from a switch sheet.  If the event has links to any steps in the sheet, then an error dialog is displayed and the command is cancelled.  See MessageCode SWITCHING.EVENT_HAS_STEP_ASSOCIATIONS.",
    "code": "<PressPerform>\n        <Command value=\"RemoveEventSheetAssocCommand\"/>\n    </PressPerform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandRemoveSwmanCrewCommand",
    "description": "Removes the selected crews in DS_CREWS_LOCAL from the currently loaded switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"RemoveSwmanCrewCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRenameBlockStepNameCommand",
    "description": "Rename a block step name. It will insert the new block and delete the oldone to make it red-lined as part of audit log entry.",
    "code": "any one of the  params is must 1. usage in case of existing block names\n    <PressPerform>\n        <Command value=\"RenameBlockStepNameCommand\">\n            <Config name=\"blockAction\" value=\"6560\"/>\n        </Command>\n    </PressPerform>\n 2. usage in case of  custom block name    <PressPerform>\n        <Command value=\"RenameBlockStepNameCommand\">\n            <Config name=\"customBlockName\" value=\"DS_RENAME_CUSTOM_BLOCK_NAME_LOCAL.value\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandReplaceSNDsCommand",
    "description": "This Command uses the DS_SWMAN_ASSOC_EVENTS to get the related event, then replaces all the Supply Nodes for it new ones based on the actions in the Switching Plan.  If successful, the following datastore fields get set:\nDS_SWITCHING_DEFAULT.EVENT - The event number\nDS_SWITCHING_DEFAULT.ORIG_NUM_CUST - Original number of customers out\nDS_SWITCHING_DEFAULT.ORIG_DEVICE - Original outage device\nDS_SWITCHING_DEFAULT.ORIG_OUT_TIME - Original outage begin time\nDS_SWITCHING_DEFAULT.ORIG_REST_TIME - Original outage restore time\nDS_SWITCHING_DEFAULT.NUM_CUST - New number of customers out\nDS_SWITCHING_DEFAULT.DEVICE - New outage device\nDS_SWITCHING_DEFAULT.OUT_TIME - New outage begin time\nDS_SWITCHING_DEFAULT.REST_TIME - New outage restore time",
    "code": "<PressPerform>\n        <Command value=\"ReplaceSNDsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandReplaceStepCommand",
    "description": "Replace the selected step's device with the current CMMSelection. Use the DS_FIND_REPLACE.ADJACENT_NODE for the secondaryHandle, and re-populate the extn fields for the new device.",
    "code": "<PressPerform>\n        <Command value=\"ReplaceStepCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandReplaceStepTextCommand",
    "description": "This command is used to replace text within step fields.  It does sub-string substitutions.  Substitutions will only happen for fields that are capable of user edits.  If the field is not editable, then no substitution will occur. To enable text replacement for an editable calculated field in a table, The calculated field should have a data_source defined in the table definition. Also, the columnKeyList should include the column key for the calculated field or column as defined  in the table definition. This command is used in conjunction with FindNextStepCommand.",
    "code": "<PressPerform>\n        <Command value=\"ReplaceStepTextCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandResetEditedOperationCommand",
    "description": "Resets the edited version of the step column.  Calculated step fields that are edited push their edited value to a new data source.  This command resets that new data source so that the calculated version of the step can be displayed.",
    "code": "<Command value=\"ResetEditedOperationCommand\">\n        <Config name=\"message\" value=\"SWITCHING.RESET_EDITED_OPERATION\"/>\n        <Config name=\"source_fields\" value=\"#CUSTOM_STEP_OPERATION\"/>\n        <Config name=\"reset_fields\" value=\"swmanStep.editedOperation\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandResetModelCommand",
    "description": "Performs a reset of the real-time model.  This command returns before the reset model has finished.  A separatenotification dialog will appear when the reset model has finished.  The reset  model performs the following actions:\n1. Initiate the DDService Reset Model functionality.  This part is done asynchronously and descrbed below\n2. Logout all other users.  These users do not get the opportunity to save any unsaved work\n3. Change all sheets except for templates and training scenarios to the Training-Completed state.\n4. Reset user preferences for all other users.\n5. Close all sheets except for templates and training scenarios without saving them.\n\nThe DDService Reset Model functionality performs the following steps:\n1. Cancel all pending momentary operations and expected actions\n2. Close all study sessions\n3. Reset all delegated zones\n4. Remove all tags and conditions\n5. Reset all digital and analog measurements\n6. Reset all commissioning/decommissioning to nominal\n7. Reset all devices to their nominal state\n8. Release all crews\n9. Cancel all active or incomplete events\n10. Undo all model edits\n11. Broadcast a notification that the reset model has finished.",
    "code": "Reset Model is not allowed in a production environment.  The forced logout, unsubscribe, and user preference reset will not affect the user that runs this command.",
    "icon": "üíª"
  },
  {
    "title": "commandResetStepStatusCommand",
    "description": "This command is used to Reset the study step status values. The command will alsoreset the safety document study states.",
    "code": "<Action name=\"ResetStepStatusCommand\">\n        <Command value=\"ResetStepStatusCommand\"/>\n    </Action>",
    "icon": "üìä"
  },
  {
    "title": "commandRestoreAllImpactedCustomers",
    "description": "This command restores all deleted impacted customers.",
    "code": "<PressPerform>\n        <Command value=\"RestoreAllImpactedCustomers\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandRestoreImpactedCustomer",
    "description": "This command restores selected deleted impacted customers.",
    "code": "<PressPerform>\n        <Command value=\"RestoreImpactedCustomer\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandReturnToNominalCommand",
    "description": "This Command generates a \"Return To Nominal\" block of goback steps for the current sheet.",
    "code": "<PressPerform>\n        <Command value=\"ReturnToNominalCommand\">\n            <Config name=\"goback_clear_fields\"\n                    value=\"executedBy,executedTime,insertTime,state\"/>\n            <Config name=\"block_act_key\" value=\"6515\"/>\n            <Config name=\"group_ground_steps\" value=\"true\"/>\n            <Config name=\"group_safety_steps\" value=\"false\"/>\n            <Config name=\"action\" value=\"NOMINAL\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSafetyConditionChecksCommand",
    "description": "Check for any safety documents that are in an Issued state and have associated devices that require a certain type of condition.  This check is used to notify a user when they attempt to remove a condition that was required in order to issue a safety document. The search criteria is determined by the Oracle view or database table that has been passed in as a configuration parameter.  If the device is found when querying the table or view, then the list of returned values are displayed in the specified dialog.  From the dialog, the user can load the associated safety document if their environment allows it.  The dialog can also be configured to override the check and allow the condition to be removed.",
    "code": "<PressPerform>\n        <Command value=\"SafetyConditionChecksCommand\">\n            <Config name=\"table_name\"\n                    value=\"SWMAN_SAFETY_CONDITION_CHECKS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveAttributesCommand",
    "description": "This command is used to update device attributes in the model based on data entered in the switching step extension field",
    "code": "<PressPerform>\n        <Command value=\"SaveAttributesCommand\">\n            <Config name=\"attribute_name\" value=\"location\"/>\n            <Config name=\"attribute_name.xfm_oh\" value=\"address\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveMiscLogStepCommand",
    "description": "This command saves the currently active step in the Misc Log.  The comma delimited list of step field key names are used to determine what values to save to the database.  For Product configuration, this command is called when the field loses focus.  If the field reverts back to its original value and it is an extenstion field, then more than likely you need to check the eclipselink-orm.xml file and add the field to entity class \"com.splwg.oms.model.entity.swman.SwmanStepView\". See the Configuration Guide for more details.",
    "code": "<Command value=\"SaveMiscLogStepCommand\">\n        <Config name=\"step_fields\" value=\"comments, extension.details\"/>\n    </Command>",
    "icon": "üìÇ"
  },
  {
    "title": "commandSaveOperatorCommentCommand",
    "description": "This command adds text to an event's operator comment from the data in the specified field.",
    "code": "<ReturnPerform>\n        <Command value=\"SaveOperatorCommentCommand\">\n            <Config name=\"event\" value=\"DS_EVENT_LOG_INFO.EVENT_IDX\"/>\n            <Config name=\"comment\" value=\"DS_EVENT_LOG_INFO.COMMENT\"/>\n        </Command>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveSheetCommand",
    "description": "This command Saves the existing sheet in Focus.",
    "code": "<Action name=\"SAVE\">\n        <Command value=\"SaveSheetCommand\">\n            <Config name=\"save_last_selected_step\" value=\"true\"/>\n        </Command>    </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveStepsCommand",
    "description": "Save the selected steps and any children if the highlighted steps are parent steps. If any of the step columns are extension values and you wish to save them, then make sure they are configured in the eclipselink-orm.xml file under entity class SwmanStepView.",
    "code": "<PressPerform>\n<Command value=\"SaveSelectedStepsCommand\">\n<Command/></PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveStepSelectionCommand",
    "description": "Save the first of any highlighted steps.  This saved step is thenhighlighted again when the sheet is loaded. The saved highlighted step will only occur if the user has edit permissions over the sheet.  View Only users will not cause the highlighting to be saved.",
    "code": "<PressPerform>\n<Command value=\"SaveStepSelectionCommand\">\n<Command/></PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveViewAreaCommand",
    "description": "Saves the current view area.",
    "code": "<PressPerform>\n        <Command value=\"SaveViewAreaCommand\">\n            <Config name=\"new_view_label\" value=\"VIEW AREA \"/>\n            <Config name=\"tool\" value=\"VIEW*1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSearchSwitchOrSafetyCommand",
    "description": "Searches for matching switch sheets or safeyt documents from the passed datastore using the passed criteria. This command support a single search value against multiple database columns using an OR clause.",
    "code": "<PressPerform>\n        <Command value=\"SearchSwitchOrSafetyCommand\">\n            <Config name=\"search_fields\" value=\"SWITCH_SHEET_IDX,DESCRIPTION\"/>\n            <Config name=\"datastore\" value=\"DS_SEARCH_SWITCHING_SHEET_LIST\"/>\n            <Config name=\"check_authority\" value=\"true\"/>\n            <Config name=\"max_results\" value=\"1000\"/>\n            <Config name=\"search_value\" value=\"{DS_MENU_BAR_DEFAULT.SEARCH_SWITCHING_TEXT}\"/>\n            <Config name=\"case_sensitive\" value=\"{DS_MENU_BAR_DEFAULT.SEARCH_SWITCHING_CASE_SENSITIVE}\"/>\n        </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectChildStepsCommand",
    "description": "Selects the child steps of all the currently selected parent steps.",
    "code": "<PreDragPerform>\n        <Command value=\"SelectChildStepsCommand\"/>\n    </PreDragPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectNextStepCommand",
    "description": "Sets the selection to the next non-terminal step. If the selection is within a group, selects the next first-terminal step within the group. Skips redlined, hidden, and audit log steps. This command automatically calls commands CheckExecuteStepsCommand and ScrollToSelectedCommand for table TT_STEPS. We do this in the code so that the commands are called in the correct order.",
    "code": "<PressPerform>\n        <Command value=\"SelectNextStepCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectPreceedingStepsCommand",
    "description": "Access the current step selection and select all preceeding steps. Used with the ExecuteStepsCommand to execute all steps up to and including a selected step.",
    "code": "<PressPerform>\n        <Command value=\"SelectPreceedingStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectStepCrewCommand",
    "description": "This command gets crew from selected steps.",
    "code": "<SelectPerform>\n        <Command value=\"SelectStepCrewCommand\"/>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetAnmsModeCommand",
    "description": "This Command sets the global ANMS mode of the system (in DDService)",
    "code": "<PressPerform>\n        <Command value=\"SetAnmsModeCommand\">\n            <Config name=\"status\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetDeleteFlagCommand",
    "description": "Sets the ENABLE_DELETE flag. If the switch sheet has associated events other than manual and canceled events, the it should not be allowed to be deleted. An OUTAGE_CORRECTION sheet won't be allowed to be deleted when there are event associations. If there are real-time instructed or completed steps, deleting the sheet should also not be allowed. In this case Real-Time completed means any step that has a Completed Date value.  Red-lined steps are the only exception.",
    "code": "<PressPerform>\n        <Command value=\"SetDeleteFlagCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetFlaModeCommand",
    "description": "This Command sets the current FLA mode to PFService.",
    "code": "<PressPerform>\n        <Command value=\"SetFlaModeCommand\">\n            <Config name=\"mode\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetFlisrModeCommand",
    "description": "This Command sets the current FLISR mode status to MTService.",
    "code": "<PressPerform>\n        <Command value=\"SetFlisrModeCommand\">\n            <Config name=\"status\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetFLMDeviceCommand",
    "description": "Sets the device and related fields in the FLM Tool from configurable data sources.",
    "code": "<PressPerform>\n        <Command value=\"SetFLMDeviceCommand\">\n            <Config name=\"class\"\n                    value=\"DS_SELECTION.handleCls\"/>\n            <Config name=\"index\"\n                    value=\"DS_SELECTION.handleIdx\"/>\n            <Config name=\"alias\"\n                    value=\"DS_SELECTION.symbol\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetFLMStatusCommand",
    "description": "This Command sets the current FLM status to PFService.",
    "code": "<PressPerform>\n        <Command value=\"SetFLMStatusCommand\">\n            <Config name=\"status\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandSetProtectionSchemesModeCommand",
    "description": "This Command sets the current Protection Schemes mode to PFService.",
    "code": "<PressPerform>\n        <Command value=\"SetProtectionSchemesModeCommand\">\n            <Config name=\"status\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetSelectionCommand",
    "description": "This command sets the current selection from fields in data stores. All parameters are in the format.(e.g. DS_EVENT_INFO.eventIdx).",
    "code": "<PressPerform>\n        <Command value=\"SetSelectionCommand\">\n            <Config name=\"device_cls\" value=\"DS_EVENT_LOG.devCls\"/>\n            <Config name=\"device_idx\" value=\"DS_EVENT_LOG.devIdx\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetStepInstructedDateCommand",
    "description": "This command updates the Instructed Date value for switching steps. Only steps that have a previous Instructed Date value, have not been red-lined, and are not hidden will be updated.",
    "code": "<PressPerform>\n        <Command value=\"SetStepInstructedDateCommand\">\n            <Config name=\"scope\" value=\"selected\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetVVOModeCommand",
    "description": "This Command sets the current VVO mode to PFService.",
    "code": "<PressPerform>\n        <Command value=\"SetVVOModeCommand\">\n            <Config name=\"status\" value=\"0\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSheetStateTransitionCommand",
    "description": "Changes the state of the sheet to the new state.",
    "code": "<PressPerform>\n        <Command value=\"SheetStateTransitionCommand\">\n            <Config name=\"action\" value=\"prepare\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandStepControlTimeEditedCommand",
    "description": "This command is called when the controlTime is edited for an outage correction switching step. If the step has children, this command updates the controlTime for each of them, too. This ensures the resulting outage correction occurs at the desired time.",
    "code": "<PressPerform>\n        <Command value=\"StepControlTimeEditedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandStepExecutedDateEditedCommand",
    "description": "This command is called when the executedDate is edited for a switching step. If a job is associated to it, this command will present the user with a confirmation dialog and update the associated job's begin or end date to match the step's.",
    "code": "<PressPerform>\n        <Command value=\"StepExecutedDateEditedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandStepsStateChangeCommand",
    "description": "This command changes the step state from the required state type to the desired state.(As per state transitions table)",
    "code": "<PressPerform>\n        <Command value=\"StepStateChangeCommand\">\n            <Config name=\"requiredStepState\" value=\"270\"/>\n            <Config name=\"actionToPerform\" value=\"auto_fail_step\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandStepsStateTransitionCommand",
    "description": "This Command changes the state of the steps to the new state.",
    "code": "<PressPerform>\n        <Command value=\"StepsStateTransitionCommand\">\n            <Config name=\"action\" value=\"request\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanCheckUpdateTimeCommand",
    "description": "This command is used to compare update times of primary and secondary blocks.If the update time of primary block is after the update time of secondary block, a warning is displayedPrimary and secondary blocks should be configured in 'SwmanParameters.properties'Here is an example : sheet.primary_block_name = Isolatesheet.secondary_block_name = Restore",
    "code": "<PressPerform>\n        <Command value=\"SwmanCheckUpdateTimeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanClearDeviceCommand",
    "description": "This command clear device attributes.",
    "code": "<PressPerform>\n        <Command value=\"SwmanClearDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanCloseWindowCommand",
    "description": "This command closes the FCP Container from JBOT.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"SwmanCloseWindowCommand\"/>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanDeleteStepsCommand",
    "description": "This command performs step delete functionality.",
    "code": "<PressPerform>\n        <Command value=\"SwmanDeleteStepsCommand\">\n            <Config name=\"delete_action\" value=\"delete_step\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanDeviceLookupCommand",
    "description": "Populates datastore 'data_store' with information for devices matching the device alias search value.",
    "code": "<PressPerform>\n        <Command value=\"SwmanDeviceLookupCommand\">\n            <Config name=\"data_store\"\n                    value=\"DS_DEVICE_SEARCH\"/>\n            <Config name=\"alias\"\n                    value=\"DS_SWITCHING_SHEET_LOCAL.deviceAlias\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanMenuBarCommand",
    "description": "This command performs menu bar actions.",
    "code": "<PressPerform>\n        <Command value=\"SwmanMenuBarCommand\">\n            <Config name=\"param_menu\"\n                    value=\"exitFcpWindow\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanOverlapsCommand",
    "description": "This command handles all requests with populating the sheet and global overlaps lists.  This command also allows you to configure the parameters used to control how and when the overlaps are populated. Using the USING_TIME_RULE JBot status flag you can also indentify when the Time option is selected for determining a sheet's overlaps. Overlaps can be queried in three different ways.  Devices based overlaps are sheets where each sheet has steps that manipulate one or more of the same devices.  Control Zones based overlaps are sheets where each sheet has steps that manipulate one or more devices in the same control zone.  Time based overlaps are sheets that overlap in time and may or may not have device or control zone overlaps. This option requires that the sheets Start and Finish dates overlap in time. When searching for Time based overlaps in the Global Overlaps list, the search period is set in the From and To fields on the display. When searching for similar overlaps in the sheet, the search period is defined by the sheet's Start and Finish dates.",
    "code": "<PressPerform>\n        <Command value=\"SwmanOverlapsCommand\">\n            <Config name=\"overlaps_command\"\n                    value=\"UPDATE_OVERLAPS\"/>\n            <Config name=\"global_overlaps\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanPopulateContractorCrewsCommand",
    "description": "Populates the contractor crew results list table.",
    "code": "<PressPerform>\n        <Command value=\"SwmanPopulateContractorCrewsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanScadaDeviceLookupCommand",
    "description": "Populates datastore 'DS_SCADA_DEVICES' with information for scada devices matching the device alias search value.",
    "code": "<PressPerform>\n        <Command value=\"SwmanScadaDeviceLookupCommand\">\n            <Config name=\"data_store\"\n                    value=\"DS_DEVICE_SEARCH\"/>\n            <Config name=\"alias\"\n                    value=\"DS_ADD_CONDITION.deviceAlias\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSwmanSetDeviceCommand",
    "description": "Sets the device and related fields in the switch plan from configurable data sources.",
    "code": "<PressPerform>\n        <Command value=\"SwmanSetDeviceCommand\">\n            <Config name=\"class\"\n                    value=\"DS_SELECTION.handleCls\"/>\n            <Config name=\"index\"\n                    value=\"DS_SELECTION.handleIdx\"/>\n            <Config name=\"alias\"\n                    value=\"DS_SELECTION.symbol\"/>\n            <Config name=\"ncg\"\n                    value=\"DS_SELECTION.ncgId\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleOwnershipCommand",
    "description": "This Command either takes or relinquishes the SwmanSheet.owner, depending on whether the login user is already the owner or not.",
    "code": "<PressPerform>\n        <Command value=\"ToggleOwnershipCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUndoStepActionCommand",
    "description": "Undoes the last step action for the sheet. Cut/Paste, Copy/Paste, and Delete are all supported. But an Exception is thrown when trying to undo a Cut/Paste from a different sheet, or if the current sheet is not the sheet where the last action was performed.",
    "code": "<Command value=\"UndoStepActionCommand\" when=\"!NOT_OWNER\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandUngroupStepsCommand",
    "description": "Ungroup selected steps.",
    "code": "<PressPerform>\n        <Command value=\"UngroupStepsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateAnmsConditionOptionsCommand",
    "description": "This command populates or clears the attribtues and operator types based on the selected scada device",
    "code": "<PressPerform>\n        <Command value=\"UpdateAnmsConditionOptionsCommand\">\n            <Config name=\"populate_attribute\"\n                    value=\"true\"/>\n            <Config name=\"populate_operator\"\n                    value=\"true\"/>\n            <Config name=\"clear_operator\"\n                    value=\"true\"/>\n            <Config name=\"clear_attribute\"\n                    value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateAttributeValuesCommand",
    "description": "This command is used to populate one or more fields on a JBot tool with device attributes as found in the ATT_SUPPLEMENTAL_ATTRIBUTES table or view.  If the device entry is not found in the table or the attribute is empty, then a blank attribute value will be written.  No error will be issued to indicate that the device entry was not found.  Debug category ATTRIBUTES can be turned on and will produce additional debug in the client log related to attribute value requests. This command was specifically designed for Web Switching and Web Safety, but can be used by any of the NMS tools. The configuration parameters source_step_fields and safety_doc_id are specific to the Web Switching and Safety and can be left out when calling this command.  The source_device_handles and target_fields values require fully qualified datastore field names. The source_attribute_fields, source_step_fields and target_fields must have the same number of values.  In other words, the first source attribute may result in a list of attributes depending on the number of handles specified in the source_device_handles parameter.  The returned attribute list will then be combined with the list of distinct source_step_fields for the first field specified.  This distinct combined list will then be populated into the first target_fields field specified as a command delimited string value.  The same process will be followed for the second value in each of the parameters until all of the parameter values have been processed.  Note:  This command only returns nominal model values.  For instance, the feeder value for a device will be the value as defined for the Nominal model in the attribute table/view ATT_SUPPLEMENTAL_ATTRIBUTES and will not be the dynamic feeder value for the device at the time the attribute is determined.",
    "code": "In this example, we are gathering a distinct list of feeders from each of the  zoneName5 step fields and combining that with the feeder_name attribute pulled  from the device handle specified. The Location field will only be populated with  the one attribute value returned for the device handle specified.   Here is an example:\n    <PressPerform>\n        <Command value=\"UpdateAttributeValuesCommand\">\n            <Config name=\"source_device_handles\" value=\"DS_SWITCHING_SHEET_LOCAL.deviceCls, DS_SWITCHING_SHEET_LOCAL.deviceIdx\"/>\n            <Config name=\"source_attribute_fields\" value=\"location, feeder_name\"/>\n            <Config name=\"source_step_fields\" value=\"IGNORE, zoneName5\"/>\n            <Config name=\"target_fields\" value=\"DS_SWITCHING_SHEET_LOCAL.extension.Location, DS_SWITCHING_SHEET_LOCAL.extension.FEEDER_NAME\"/>\n            <Config name=\"only_populate_target_when_blank\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateEstRestoreTimeCommand",
    "description": "This command updates the estimated restore time of sheet to current time.",
    "code": "<PressPerform>\n        <Command value=\"UpdateEstRestoreTimeCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandUpdateJobCommentCommand",
    "description": "This command updates or deletes existing job comment.",
    "code": "<ReturnPerform>\n        <Command value=\"UpdateJobCommand\">\n            <Config name=\"event\" value=\"DS_EVENT_DETAILS.REF_ID\"/>\n            <Config name=\"comment\" value=\"DS_EVENT_DETAILS_MSCL.CASENOTE\"/>\n            <Config name=\"comment_id\" value=\"DS_EVENT_DETAILS_MSCL.CASENOTE_ID\"/>\n            <Config name=\"delete_comment\" value=\"false\"/>\n        </Command>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdatePhaseSelectionCommand",
    "description": "This is the Web Switching counterpart to the Control Tool's UpdateCheckBoxCommand. Since Control has its own hierarchy of Commands, it seemed safer to just copy the handful of common lines into this new class.",
    "code": "<PressPerform>\n        <Command value=\"UpdatePhaseSelectionCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"UpdatePhaseSelectionCommand\"\n                  class=\"com.splwg.oms.fcp.command.UpdatePhaseSelectionCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateSafetyDevicePhasesCommand",
    "description": "Update a device's phases within a safety document.  If the device is linked to a switching step in the parent switching sheet, then that link will be broken and a new device reference will be created.  This is done for auditing purposes.  If you wish to keep the step link, then the Step Find/Replace Device option should be used from the switching steps list.",
    "code": "<PressPerform>\n        <Command value=\"UpdateStepDevicePhasesCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateStepCrewCommand",
    "description": "Command to change the crewList for the currently selected step in the Steps table when a row is selected or deselected in the Crews table.",
    "code": "<PressPerform>\n        <Command value=\"UpdateStepCrewCommand\">\n            <Config name=\"force\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateViewAreaCommand",
    "description": "Updates any changes to the view area table.",
    "code": "<ReturnPerform>\n        <Command value=\"UpdateViewAreaCommand\"/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandValidateSheetAnmsConditionsCommand",
    "description": "This command validates ANMS switching sheet ANMS conditions with the latest system data.",
    "code": "<PressPerform>\n        <Command value=\"ValidateSheetAnmsConditionsCommand\">\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandValidateStepOperationCodeCommand",
    "description": "This command checks the value of DS_ADD_STEP.OPERATION_CODE against the switching codes of the control actions in DS_ADD_STEP_OPERATIONS. If a matching switching code is found, DS_ADD_STEP.OPERATION_DESCRIPTION and DS_ADD_STEP.ACT_KEY are set to match it.  Otherwise these values are cleared.",
    "code": "<ModifiedPerform>\n        <Command value=\"ValidateStepOperationCodeCommand\"/>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandValidateViewAreaAutoLoadSettingsCommand",
    "description": "This command validates and sets the viewer auto load flag.",
    "code": "<ReturnPerform>\n        <Command value=\"ValidateViewAreaAutoLoadSettingsCommand\"/>\n    </ReturnPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandVerifyTemplateIdIsUnique",
    "description": "This verifies the that the updated value for template ID is unique. If it is not, the abort flag will be set, and a dialog message displayed.",
    "code": "<PressPerform>\n        <Command value=\"VerifyTemplateIdIsUnique\">\n            <Config name=\"sheet_number\" value=\"DS_SWITCHING_SHEET_LOCAL.switchSheetIdx\"/>\n            <Config name=\"template_id\" value=\"DS_SWITCHING_SHEET_LOCAL.templateId\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandVerifyViewerAvailableCommand",
    "description": "This verifies the that there is a viewer available.  If it is not, the abort flag will be set, and an optional dialog message displayed.",
    "code": "<PressPerform>\n        <Command value=\"VerifyViewerAvailableCommand\">\n            <Config name=\"tool\" value=\"VIEW*1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandViewImpactedCustomersCommand",
    "description": "This command generates list of the impacted customers and updates the sheet.",
    "code": "<PressPerform>\n        <Command value=\"ViewImpactedCustomersCommand\">\n            <Config name=\"displayWarnings\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "safetyAddSafetyDeviceCommand",
    "description": "This command adds a device to the safety document device list based on the device selected by the user.",
    "code": "<PressPerform>\n        <Command value=\"AddSafetyDeviceCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "safetyAddSafetyStepCommand",
    "description": "This command adds selected switching steps to the safety document.",
    "code": "<PressPerform>\n        <Command value=\"AddSafetyStepCommand\"/>\n    </PressPerform>\n    \n    <CommandClass class=\"com.splwg.oms.fcp.safety.AddSafetyStepCommand\"\n        name=\"AddSafetyStepCommand\"/>\n\nIn addition to selected steps it will also add steps with the same\ncondition handle if they are not already associated with a safety document.\n\nError messages:\n    SAFETY.STEP_HAS_SAFETY - switching plan step is already associated with \n        a safety document\n    SAFETY.DELETED - safety document is marked as deleted\n    SAFETY.NOT_A_SAFETY_STEP - selected step(s) cannot be added to the safety document",
    "icon": "üíª"
  },
  {
    "title": "safetyAssociateSafetyDocCommand",
    "description": "Associates a safety document to a different switching sheet.  Only safety documents without any linked steps in the switching sheet's steps list can be associated to a different switching sheet.  Stand-alone safety documents can be associated to a switching sheet as long as the Associate button option is enabled. The user also has to be able to acquire the single user lock over the target sheet for the action to go through.",
    "code": "<PressPerform>\n        <Command value=\"AssociateSafetyDocCommand\"/>\n    </PressPerform>\n    \n    Only safety documents without any linked steps \n    can be associated to a different switching sheet.",
    "icon": "üíª"
  },
  {
    "title": "safetyChangeDelegatedCrewCommand",
    "description": "Updates the active delegated zone with the new crew name.",
    "code": "<Command value=\"ChangeDelegatedCrewCommand\">\n         <Config name=\"crew_name\" value=\"{DS_SAFETY_DOCUMENT_LOCAL.doc.crew.crew_id}\"/>\n     </Command>",
    "icon": "üíª"
  },
  {
    "title": "safetyCheckSafetyConditionsCommand",
    "description": "Check for conditions on devices listed in a device list on a safety document.  The device lists have to be SwmanStepPlus objects and cannot just have any abitrary list of devices.  The step objects have a device handle that is used to look up the device and the conditions on it.  If the command does not find the configured type of condition on any of the listed devices, then a specified error dialog is displayed to the user. \nSince this command can be called for any number or device lists and check for different types of conditions, the error dialog that is used to describe the issue is configured as one of the parameters to this command.  The command also takes a Message Code that can be used to alter the error message displayed at the top of the dialog. If the message code is not given, then the code \"NO_TAG_COND\" is used as a default.  Check the MessageCode property file for the value of that code. \nThe command can also check for a particular status on each of the conditions as well.  If any of the conditions are not in the proper status, then the specified error dialog is displayed to the user.",
    "code": "<Command value=\"CheckSafetyConditionsCommand\">\n        <Config name=\"device_list_table\" value=\"TBL_TAG_DEVICES\"/>\n        <Config name=\"condition_type\" value=\"tag\"/>\n        <Config name=\"error_dialog\" value=\"DLG_SAFETY_MISSING_CONDITIONS\"/>\n        <Config name=\"message_code\" value=\"NO_TAG_COND\"/>\n        <Config name=\"condition_status\" value=\"0\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "safetyCheckSafetyDeviceStatusCommand",
    "description": "Check the status of each device listed in a device list on a safety document.  The device lists have to be SwmanStepPlus objects and cannot just have any abitrary list of devices.  The step objects have a device handle that is used to look up the device and their status.  If the command does not find that all the devices are in the configured state then a specified error dialog is displayed to the user. \nSince this command can be called for any number or device lists the error dialog that is used to describe the issue is configured as one of the parameters to this command.  The command also takes a Message Code that can be used to alter the error message displayed at the top of the dialog. If the message code is not given, then the code \"INVALID_DEVICE_STATUS\" is used as a default.  Check the MessageCode property file for the value of that code.",
    "code": "<Command value=\"CheckSafetyDeviceStatusCommand\">\n        <Config name=\"device_list_table\" value=\"TBL_TAG_DEVICES\"/>\n        <Config name=\"error_dialog\" value=\"DLG_SAFETY_DEVICE_ERRORS\"/>\n        <Config name=\"message_code\" value=\"INVALID_DEVICE_STATUS\"/>\n        <Config name=\"expect_open_state\" value=\"true\"/>\n        <Config name=\"check_all_phases\" value=\"false\"/>\n    </Command>",
    "icon": "üìä"
  },
  {
    "title": "safetyCloseSafetyCommand",
    "description": "Closes safety document window.",
    "code": "<Perform category=\"windowClosing\" name=\"Window\">\n        <Command value=\"CloseSafetyCommand\"/>\n    </Perform>\n    \n    <CommandClass  name=\"CloseSafetyCommand\"\n        class=\"com.splwg.oms.fcp.safety.CloseSafetyCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyDeleteSafetyCommand",
    "description": "Disassociates safety document from switching plan and marks it as deleted.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSafetyCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"DeleteSafetyCommand \n        class=\"com.splwg.oms.fcp.safety.DeleteSafetyCommand\"\"/>\n        \n    Only safety documents without any recorded safety state transition steps \n    can be deleted.",
    "icon": "üíª"
  },
  {
    "title": "safetyDeleteSafetyStepCommand",
    "description": "Unassociates selected switching step(s) from safety document(s).  For hiddensteps, this command eventually calls SwmanDeleteStepsCommand and passes on the delete_action parameter specified for this command to SwmanDeleteStepsCommand.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSafetyStepCommand\">\n            <Config name=\"tables\" value=\"TBL_TAG_DEVICES,TBL_GROUND_DEVICES\"/>\n        </Command>\n    </PressPerform>\n    \n    <CommandClass name=\"DeleteSafetyStepCommand\n        class=\"com.splwg.oms.fcp.safety.DeleteSafetyStepCommand\" \"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyDisassociateSafetyDocCommand",
    "description": "Disassociates a safety document from a switching sheet.",
    "code": "<PressPerform>\n        <Command value=\"DisassociateSafetyDocCommand\"/>\n    </PressPerform>\n    \n    Only safety documents without any associated steps \n    can be disassociated.",
    "icon": "üíª"
  },
  {
    "title": "safetyOpenSafetyCommand",
    "description": "Opens a safety document.  This command is used to open a document from a switching sheet step or a safety list.  It can also be used to load a document if the doc ID and sheet handle are passed in.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n        <Command value=\"OpenSafetyCommand\">\n            <Config name=\"from_steps\" value=\"true\"/>\n        </Command>\n    </Perform>\n    \n    <CommandClass name=\"OpenSafetyCommand\"\n        class=\"com.splwg.oms.fcp.safety.OpenSafetyCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyPopulateSafetyCrewsCommand",
    "description": "Populates datastore DS_SAFETY_CREWS with all active crews from control zones user has authority over.",
    "code": "<PressPerform>\n        <Command value=\"PopulateSafetyCrewsCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"PopulateSafetyCrewsCommand\" \n        class=\"com.splwg.oms.fcp.safety.PopulateSafetyCrewsCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyRefreshSafetyCommand",
    "description": "Repopulates safety document information from server.",
    "code": "<PressPerform>\n        <Command value=\"RefreshSafetyCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"RefreshSafetyCommand\"\n        class=\"com.splwg.oms.fcp.safety.RefreshSafetyCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyRefreshSafetyListCommand",
    "description": "Repopulates list of safety document associated with the switching plan.a",
    "code": "<PressPerform>\n        <Command value=\"RefreshSafetyListCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"RefreshSafetyListCommand\"\n          class=\"com.splwg.oms.fcp.safety.RefreshSafetyListCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetySafetyConditionsCommand",
    "description": "This command is used to apply or remove conditions for individual devices selected in a device list within a safety document.",
    "code": "For an example and further details, see Product configuration file SafetyStateTransActions.inc.",
    "icon": "üíª"
  },
  {
    "title": "safetySaveSafetyCommand",
    "description": "Saves safety document.",
    "code": "<PressPerform>\n        <Command value=\"SaveSafetyCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"SaveSafetyCommand\"\n        class=\"com.splwg.oms.fcp.safety.SaveSafetyCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetySetSafetyCrewCommand",
    "description": "Assigns or clears crew from safety document. Assigns crew selected in the TBL_SAFETY_CREW table to the safety document.",
    "code": "<PressPerform>\n        <Command value=\"SetSafetyCrewCommand\"/>\n    </PressPerform>\n    \n    <CommandClass name=\"SetSafetyCrewCommand\"\n        class=\"com.splwg.oms.fcp.safety.SetSafetyCrewCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "safetyStateTransitionCommand",
    "description": "Executes safety document state transitions.  This command can also be setup to check conditions on devices and even the status values for the conditions that are found.  If a condition check fails and is not being ignored, then an error message is displayed to the user listing the missing condition details.  When a safety document's list of devices are altered and the safety document transitions into a state to apply the device alterations, audit log entries are created for each of the changes made.  The audit log entries are configured via properties SAFETY_AUDITLOG.REMOVE_DEVICE and SAFETY_AUDITLOG.ADD_DEVICE. In order to allow this command to be used by OMA, the parameter $USER$ has to be specified with a value of $USER$.  This is just a passthrough parameter that is required for OMA to generate safety state transition steps with the correct Completed By value.",
    "code": "For an example and further details, see Product configuration file SafetyStateTransActions.inc.",
    "icon": "üíª"
  },
  {
    "title": "safetyUpdateCrewPositionCommand",
    "description": "This command updates the selected crews to the configured position and adds an audit log entry for the action.",
    "code": "<PressPerform>\n        <Command value=\"UpdateCrewPositionCommand\">\n            <Config name=\"position\" value=\"ENGAGED\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "safetyValidateDelegatedDevicesCommand",
    "description": "Validates that the set of devices defines a valid segment of the network.",
    "code": "<Command value=\"ValidateDelegatedDevicesCommand\"/>",
    "icon": "üíª"
  },
  {
    "title": "switchingSwmanFocusCommand",
    "description": "This command will cause the viewer to focus on one or more devices inthe viewer.  For Switching Management, this could include a list of devices based on step selections.  It could also include a list of safety document devices.",
    "code": "<PressPerform>\n        <Command value=\"SwmanFocusCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsCleanSolutionDetailsCommand",
    "description": "This command removes power flow solution details from the database tables by getting username from the environment.",
    "code": "<PressPerform>\n        <Command value=\"CleanSolutionDetailsCommand\"\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMCheckNumberOfSelectedFeedersCommand",
    "description": "This command checks number of selected feeders for FLM graphs update, and displays warning message FLM_TOO_MANY_SELECTED_FEEDERS, if the number of selected feeders exceed the recommended maximum.",
    "code": "<ReturnPerform>\n        <Command value=\"FLMCheckNumberOfSelectedFeedersCommand\"> \n            <Config name=\"from_summary\" value=\"false\"/> \n        <Command/>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMCheckSolutionParametersCommand",
    "description": "This command checks the validity of the current solution parameters, and displayswarning messages FLM_HOURS_NUMBER_OFF_LIMIT or FLM_DAYS_NUMBER_OFF_LIMIT, if the period notdefined in the range of min and max values passed as parameters.",
    "code": "<ModifiedPerform>\n        <Command value=\"FLMCheckSolutionParametersCommand\">\n            <Config name=\"min\" value=\"1\"/>\n            <Config name=\"max\" value=\"7\"/>\n        </Command>\n    </ModifiedPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMCleanStudySolutionCommand",
    "description": "This command cleans last study solution from FLM tables by using solution-id.",
    "code": "<PressPerform>\n        <Command value=\"FLMCleanStudySolutionsCommand\"\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMGetCurrentSolutionCommand",
    "description": "This command retrieves information for the solution that needs to be conducted.  This command is used by the viewer, flm, and vvo (optimization)",
    "code": "<PressPerform>\n        <Command value=\"FLMGetCurrentSolutionCommand\">\n            <Config name=\"REAL_TIME\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMGetSolutionDetailsCommand",
    "description": "This command sends request to PFService to get solution details for the selected row in Feeder Load Overview table or Feeder Load Summary table.",
    "code": "<PressPerform>\n        <Command value=\"FLMGetSolutionDetailsCommand\"/>\n            <Config name=\"from_summary\" value=\"false\"/> \n        <Command/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMInitForecastsPerHourCommand",
    "description": "This command enables or disables the FLM Forecasts per hour text field in the study dialog.",
    "code": "<PressPerform>\n        <Command value=\"FLMInitForecastsPerHourCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMLoadSelectedFeederDataCommand",
    "description": "This command loads FLM Load Overview data for a feeder, which a Viewer's selected device belongs to.",
    "code": "<PressPerform>\n        <Command value=\"FLMLoadSelectedFeederDataCommand\"\n                 when=\"(DS_FLM_GLOBAL.STARTED_FROM != 'FLMTool')\">\n            <Config name=\"to_tool\"\n                    value=\"com.splwg.oms.flm.FLMTool\"/>\n            <Config name=\"REAL_TIME\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsFLMLoadToFeederDataCommand",
    "description": "This command retrieves FLM data for a feeder, which is  adjacent to a current feeder's tie point.",
    "code": "<PressPerform>\n        <Command value=\"FLMLoadToFeederDataCommand\">\n            <Config name=\"to_tool\"\n                    value=\"com.splwg.oms.flm.FLMTool2\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsFLMOpenRegDevParametersCommand",
    "description": "This command opens the regulation device parameters edit dialog of the device  and  updates the correspondent datastores after regulation device(s) parameters were changed.",
    "code": "<PressPerform>\n        <Command value=\"FLMOpenRegDevParametersCommand\"\n                 when=\"XFRM_MODIFIED\">\n            <Config name=\"data_store\" value=\"DS_REG_TRANSFORMERS\"/>\n            <Config name=\"instruct\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMReenableIslandCommand",
    "description": "This command re-enables the island selected in the feeder load management table or Feeder Load Summary table.",
    "code": "<PressPerform>\n        <Command value=\"FLMReenableIslandCommand\"/>\n            <Config name=\"from_summary\" value=\"false\"/> \n        <Command/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMResetOptionsToRealTimeCommand",
    "description": "This command resets Study Mode power flow options to Real-Time values.",
    "code": "<PressPerform>\n        <Command value=\"FLMResetOptionsToRealTimeCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsFLMResolveCommand",
    "description": "This command updates datastores in Feeder Load Management Summary.",
    "code": "<PressPerform>\n        <Command value=\"FLMResolveCommand\">\n            <Config name=\"REAL_TIME\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMRestoreSolutionParametersCommand",
    "description": "This command Restores Study Mode Options to discard changes when Cancel button was pressed.",
    "code": "<PressPerform>\n        <Command value=\"FLMRestoreSolutionParametersCommand\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandsFLMSetPowerFlowOptionsCommand",
    "description": "This command sets Study Mode power flow options.",
    "code": "<PressPerform>\n        <Command value=\"FLMSetPowerFlowOptionsCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMSetSelectionCommand",
    "description": "This command focuses the viewer on a selected device/feeder in a FLM Pane.",
    "code": "<PressPerform>\n        <Command value=\"FLMSetSelectionCommand\">\n            <Config name=\"data_store\"\n                    value=\"DS_FLM_SUMMARY\"/>\n            <Config name=\"select_device\" value=\"false\"/>\n            <Config name=\"motif_viewer\" value=\"VIEW;0;1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMSetViolationCountsCommand",
    "description": "This command recalculates numbers violations for each type of violations.",
    "code": "<ReturnPerform>\n        <Command value=\"FLMSetViolationCountsCommand\">\n            <Config name=\"severity\" value=\"DS_WARNINGS_VIOLATIONS_OPTIONS.VIOLATIONS\"/>\n        </Command>\n    </ReturnPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMShowSelectedDeviceCommand",
    "description": "This command shows FLM data of the selected device.",
    "code": "<Command value=\"FLMShowSelectedDeviceDetails\" when=\"!VIEWER_STUDY_MODE\"/>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMUpdateCommand",
    "description": "This command updates datastores in Feeder Load Management Tool.",
    "code": "<PressPerform>\n        <Command value=\"FLMUpdateCommand\"\n                 when=\"FLM_STUDY_MODE or (DS_FLM_LOCAL.UPDATED == 0)\">\n            <Config name=\"data_store\" value=\"DS_REG_TRANSFORMERS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMUpdateLoadGraphCommand",
    "description": "This  command updates the datastore for the FLM graph data on the Graphical View tab of Feeder Load Management.",
    "code": "<ReturnPerform>\n        <Command value=\"FLMUpdateLoadGraphCommand\"/>\n    </ReturnPerform>",
    "icon": "üì•"
  },
  {
    "title": "commandsFLMUpdateRealTimeCommand",
    "description": "This command updates all currently displayed tables in real-time,if FLM is not in study mode.",
    "code": "<PressPerform>\n        <Command value=\"FLMUpdateRealTimeCommand\"\n                 when=\"!FLM_STUDY_MODE and (DS_FLM_LOCAL.UPDATED == 1)\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMUpdateSummaryCommand",
    "description": "This command updates datastores in Feeder Load Management Summary.  It uses the DS_FLM_GLOBAL.SUMMARY_VIEW to determine the view to populate",
    "code": "<PressPerform>\n        <Command value=\"FLMUpdateSummaryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandsFLMVoltageProfileGraphCommand",
    "description": "This command initializes dataset for voltage profile graph in FLM.",
    "code": "<PressPerform>\n        <Command value=\"FLMVoltageProfileGraphCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandActionFromHLMCommand",
    "description": "This runs an action from a high level message.  To pass parameters pass the values as name=value pairs.",
    "code": "For example, using these parameters: \"$MESSAGE$=Hello World!\" will display a message saying \"Hello World!\" when used with this action: \n            <Action name=\"SCADA_ACTION\">\n            <Command value=\"DisplayMessageCommand\">\n               <Config name=\"message_code\" value=\"$MESSAGE$\"/>\n            </Command>\n        </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandAlterSplitPaneCommand",
    "description": "Moves the split pane divider location to hide or restore the specified panel.",
    "code": "<Command value=\"AlterSplitPaneCommand\">\n              <Config name=\"pane_action\" value=\"SHOW_SECOND\"/>\n              <Config name=\"component_name\" value=\"SPT_WORKAGENDA\"/>\n          </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandApplyFeederColorCommand",
    "description": "Changes the feeder color for the selected row in DS_FEEDERS. This does not save to the database",
    "code": "<Command value=\"ApplyFeederColorCommand\">\n    <Config name=\"panels\" value = \"NMS Swatches HSV HSL RGB CYMK\"/>\n    <Config name=\"colors\" value = \"black white red yellow #00FF00 0,0,255\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "commandApplyFilterCommand",
    "description": "Turns on a custom filter.",
    "code": "<Menu name=\"MNU_TEST\">\n        <MenuItem name=\"MNU_ACK\">\n            <PressPerform>\n                <Command value=\"ApplyFilterCommand\"/>\n                    <Config name=\"filter_type\" value=\"STATUS_FILTER\"/>\n                    <Config name=\"filter_name\" value=\"Acknowledged events\"/>\n                    <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n                    <Config name=\"column\" value=\"STATUS\"/>\n                    <Config name=\"operator\" value=\"=\"/>\n                    <Config name=\"value\" value=\"ACK\"/>\n                </Command>\n            </PressPerform>\n        </MenuItem>\n        <MenuItem name=\"MNU_TEST3\">\n            <PressPerform>\n                <Command value=\"ApplyFilterCommand\"> <!-- This will remove the filter->>\n                    <Config name=\"filter_type\" value=\"STATUS_FILTER\"/>\n                    <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n                </Command>\n            </PressPerform>\n        </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandApplySortCommand",
    "description": "Applies the sort of the currently displayed sort from the sort dialog.",
    "code": "<ComboBox name=\"CB_SORTS\">\n            <ComboBoxPlacement start=\"1,0\" anchor=\"WEST\" weight=\"10,0\" fill=\"NONE\"/>\n            <ComboBoxBehavior data_source=\"DS_CURRENT_SORT.current_sort\" keys_data_source=\"DS_SORTS.title\" component_width=\"150\">\n                <Editable initial=\"false\"/>\n                <SelectPerform>\n                    <Command value=\"ApplySortCommand\">\n                        <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n                        <Config name=\"menu\" value=\"MNU_SORT\"/>\n                    </Command>\n                </SelectPerform>\n            </ComboBoxBehavior>\n        </ComboBox>",
    "icon": "üíª"
  },
  {
    "title": "commandApplySummaryFilterCommand",
    "description": "Turns on a decorator that filters out rows that match the configured table column and replaces the master row with a summary of all the matching rows.",
    "code": "<MenuItem name=\"MNU_TEST1\">\n         <PressPerform>\n             <Command value=\"ApplySummaryFilterCommand\" when=\"CHK_MASTER_SELECTED\">\n                 <Config name=\"filter_type\" value=\"MASTER_EVENT_FILTER\"/>\n                 <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n                 <Config name=\"column\" value=\"RELATED_EVENT\"/>\n                 <Config name=\"master_column\" value=\"EVENT_IDX\"/>\n                 <Config name=\"operator\" value=\"=\"/>\n                 <Config name=\"value\" value=\"0\"/>\n             </Command>\n         </PressPerform>\n     </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandBroadcastStatusCommand",
    "description": "Command to listen for a status flag on another tool and distribute it to the current tool.",
    "code": "<ToolBehavior>\n            <Perform name='Window' category='windowClosing'>\n                <Command value='CloseCommand'/>\n            </Perform>\n            <Perform name='Window' category='windowOpened'>\n                <Command value='BroadcastStatusCommand'>\n                    <Config name='tool' value='com.ces.centricity.ops.crew.CrewIcons'/>\n                    <Config name='status_name' value='MOBILE_CREW_SELECTED'/>\n                </Command>\n                <Command value='BroadcastStatusCommand'>\n                    <Config name='tool' value='com.ces.centricity.ops.crew.CrewIcons'/>\n                    <Config name='status_name' value='MOBILE_CREW_OVERRIDE_SELECTED'/>\n                </Command>\n            </Perform>\n        </ToolBehavior>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandCancelDialogCommand",
    "description": "This is a special close dialog command which when executed sets the system abort flag, then closes and disposes the dialog.",
    "code": "This Command overrides the isAbortable() method to false, so that\n    it can set the system abort and then close the dialog.\n    \n    This Command should not override the runInDispatchThread()\n    method, because the CommandProcessor will then start a new Thread to execute\n    it, which would then delay the setting of the abort flag.",
    "icon": "üìÇ"
  },
  {
    "title": "commandChangeFontSizeCommand",
    "description": "Changes the Gui Size",
    "code": "Note:  either bigger or reset needs to be specified",
    "icon": "üíª"
  },
  {
    "title": "commandChangeJobStateCommand",
    "description": "Performs an action on an job/event to change the TE state.",
    "code": "<Button name=\"BTN_OK\">\n        <ButtonPlacement start=\"0,3\" width=\"1\" height=\"1\" weight=\"1,0\" insets=\"4,4,4,4\" anchor=\"CENTER\"/>\n        <ButtonBehavior>\n            <Enabled initial=\"false\" when=\"CMB_CREW_TYPE_POPULATED\"/>\n            <PressPerform>\n                <Command value=\"ChangeJobStateCommand\">\n                    <Config name=\"datastore\" value=\"DS_WA_ALARMS\"/>\n                    <Config name=\"action\" value=\"assessed\"/>\n                </Command>\n                <Command value=\"ReleaseCrewCommand\"/>\n                <Command value=\"UpdateGenericFieldCommand\">\n                    <Config name=\"datastore\" value=\"DS_EVAL\"/>\n                    <Config name=\"column\" value=\"crew_type\"/>\n                </Command>\n                <Command value=\"CloseDialogCommand\"/>\n            </PressPerform>\n        </ButtonBehavior>\n    </Button>",
    "icon": "üíª"
  },
  {
    "title": "commandChangeSelectedSortCommand",
    "description": "Modifies the current sort selection for a table",
    "code": "<PressPerform>\n       <Command value=\"ChangeSelectedSortCommand\"\"> \n           <Config name=\"menu\" value=\"MNU_INPUT_SORT\"/>\n           <Config name=\"table\" value=\"TBL_SCADA_DNP3_INPUTS\"/>\n           <Config name=\"datastore\" value=\"DS_SCADA_DNP3_INPUTS\"/>\n           <Config name=\"sort_description\" value=\"calcBitPos\"/>\n           <Config name=\"sort_definition\" value=\"calcBitPos\"/>\n       </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandChangeThemeCommand",
    "description": "This changes the theme to the selectd value and asks the user to restart",
    "code": "<PressPerform>\n        <Command value=\"ChangeThemeCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckAttachmentCellSelectCommand",
    "description": "Sets a SELECTED_CELL_HAS_ATTACHMENT flag.\nThis command should be triggered for single selection, and will only execute for row with Attachment, and only when the attachemnt icon cell is selected.",
    "code": "<Command value=\"CheckAttachmentCellSelectCommand\"\"> \n        <Config name=\"when_column_selected\" value=\"#ATTACHEMNT\"/>\n        <Config name=\"data_store\" value=\"DS_WA_ALARMS\"\"> \n        <Config name=\"table\" value=\"TBL_WA_ALARMS\"\"> \n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandCheckTabVisibilityCommand",
    "description": "Checks if the target tab is displayed.  Instructs the command processor to not process any additional commands for this eventif the target tab is not displayed.",
    "code": "<PressPerform>\n        <Command value=\"CheckTabVisibilityCommand\">\n            <Config name=\"target\" value=\"BALLOON_TABS:TAB_POWER_FLOW_RESULTS|BALLOON_TABS:TAB_FAULT_DETAILS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearButtonGroupCommand",
    "description": "Clears the selection for each button in the listed button group and clears the _SELECTED status flags.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ClearButtonGroupCommand\">\n            <Config name=\"group_name\" value=\"NEW_OPERATION\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearListSelectionCommand",
    "description": "Command to set clear a list selection.",
    "code": "<PressPerform>\n        <Command value=\"ClearListSelectionCommand\">\n            <Config name=\"list_name\" value=\"LST_AVAILABLE_RULESETS\"/>\n        </Command>       \n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearQuickFiltersCommand",
    "description": "Clears the quick filters from a tables header",
    "code": "<MenuItem name=\"MNU_TEST1\">\n         <PressPerform>\n             <Command value=\"ClearQuickFilteres\" >\n                 <Config name=\"datastore\" value=\"DS_WA_ALARMS\"/>\n                 <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n             </Command>\n         </PressPerform>\n     </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandClearSelectionCommand",
    "description": "This command clears the selection of a table. It will also set the cursor of the datastore provided to CURSOR_INVALID.",
    "code": "<PressPerform>\n        <Command value=\"ClearSelectionCommand\">\n            <Config name=\"datastore\" value=\"DS_JOIN_STORM\"/>\n            <Config name=\"table_name\" value=\"TBL_JOIN_STORM\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearTableSelectionCommand",
    "description": "Command to set clear a table selection.",
    "code": "<PressPerform>\n        <Command value=\"ClearTableSelectionCommand\">\n            <Config name=\"table_name\" value=\"TBL_PARAMETERS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClearTreeSelectionCommand",
    "description": "Command to set clear a tree selection.",
    "code": "<PressPerform>\n        <Command value=\"ClearTreeSelectionCommand\">\n            <Config name=\"tree_name\" value=\"TRE_CLASSES\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClipboardCancelCommand",
    "description": "Escapes out of a cut operation.",
    "code": "<PressPerform>\n        <Command value=\"ClipboardCancelCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClipboardCopyCommand",
    "description": "Performs a copy to the system clipboard.",
    "code": "<PressPerform>\n        <Command value=\"ClipboardCopyCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClipboardCutCommand",
    "description": "Performs a cut to the system clipboard.",
    "code": "<PressPerform>\n        <Command value=\"ClipboardCutCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandClipboardPasteCommand",
    "description": "Performs a paste to the system clipboard.",
    "code": "<PressPerform>\n        <Command value=\"ClipboardPasteCommand\">\n            <Config name=\"target_component\" value=\"TT_STEPS\"/>\n        </Command>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCloseDialogCommand",
    "description": "This is the close dialog command which when executed closes and disposes the dialog.",
    "code": "<PressPerform>\n        <Command value=\"CloseDialogCommand\"/>\n        <Config name=\"name\" value=\"DLG_CREW_DISPATCH\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandCollapseAllTreeNodesCommand",
    "description": "Command to collapse all nodes in a tree.",
    "code": "<PressPerform>\n        <Command value=\"CollapseAllTreeNodesCommand\">\n            <Config name=\"tree_name\" value=\"TRE_CLASSES\"/>\n            <Config name=\"collapse_root\" value=\"false\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCollectSelectedRowValuesCommand",
    "description": "Collects values for certain columns in selected rows of a datastore and saves them as a Set in a different datastore. This enables projects to configure buttons to enable or disable, depending on the sum of the contents in all the selected rows.",
    "code": "For example:\n when=\"{DS_SWITCHING_DEFAULT.SELECTED_CREW_POSITIONS == 'CLEAR'}\"\n would enable a button when the selected rows contain 'CLEAR' and this is specified in the Table:\n    <SelectPerform>\n        <Command value=\"CollectSelectedRowValuesCommand\">\n            <Config name=\"source\" value=\"DS_SAFETY_CREWS_LOCAL.position\"/>\n            <Config name=\"destination\" value=\"DS_SWITCHING_DEFAULT.SELECTED_CREW_POSITIONS\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCommitCommand",
    "description": "This command commits any changes to a datastore.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"CommitCommand\">\n            <Config name=\"data_store\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT_1\"/>\n            <Config name=\"command\" value=\"no_autocommit\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandConfigDataStoreStatusCommand",
    "description": "Configures a status flag to update when a datastore changes.  This should normally be called in a windowOpened Perform block.",
    "code": "<PressPerform>\n        <Command value=\"ConfigDataStoreStatusCommand\">\n            <Config name=\"flag\" value=\"FLG_FLISR\">\n            <Config name=\"when\" value=\"EVENT_LOADED and DS_LOGIN_ENTRY.WEB_SWITCHING_ENABLED == 'true' and DS_EVENT_DETAILS_SELECTED_EVENT.DMS_STATUS in (-53,-52,-3,-2,1,2,6,8,9,10,51,52,53,54,55,56,57,58,59,60)\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandConfigureAudiblesCommand",
    "description": "A command that configures audible alarms or alarm flags for a datastore.  The alarm flags areused to drive the popup balloon warnings.  Note: if the NMS_AUDIBLES=false client environmentis set, it will set the DS_AUDIBLES.ENABLED datastsource to false.  This can be used to disableaudible alarms by default in clients where it isn't approprate to default to true, such as when configuring the tool",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ConfigureAudiblesCommand\">\n            <Config name=\"data_source\" value=\"DS_WA_ALARMS.STATUS\"/>\n            <Config name=\"audibles_enabled\" value=\"DS_AUDIBLES.ENABLED\"/>\n            <Config name=\"priority_01\" value=\"(.3, 300, 500, 3000)=NFY\"/>\n            <Config name=\"priority_02\" value=\"(.3, 300, 500, 300000)=NEW, M-NEW, P-NEW, S-NEW\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandConfigureSortCommand",
    "description": "Applies the sort of the currently displayed sort from the sort dialog.",
    "code": "<PressPerform>\n        <Command value=\"ConfigureSortCommand\">\n            <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n            <Config name=\"update\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCopyCommand",
    "description": "Copy the rows from the JTable.",
    "code": "<PressPerform>\n        <Command value=\"CopyCommand\">\n            <Config name=\"table\" value=\"TBL_STORM_ADMIN\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCopyRowsCommand",
    "description": "Copies selected rows of a datastore to a new datastore.",
    "code": "<PressPerform>\n        <Command value=\"CopyRowsCommand\">\n            <Config name=\"source_datastore\" value=\"DS_MEMBERS_LIST\"/>\n            <Config name=\"destination_datastore\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT\"/>\n            <Config name=\"columns\" value=\"member_id,member_name,member_class,member_emp_numb\"/>\n            <Config name=\"replace_destination\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateButtonGroupCommand",
    "description": "Command to create a button group and add a set of buttons to the group.",
    "code": "<PressPerform>\n        <Command value=\"CreateButtonGroupCommand\">\n            <Config name=\"button_names\" value=\"BTN1,BTN2,BTN3\"/>\n            <Config name=\"initial_selection\" value=\"BTN1\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCreateExternalCellFilterCommand",
    "description": "Toggle Cell filter on for the passed table, column and value.",
    "code": "<PressPerform>\n        <Command value=\"CreateExternalCellFilterCommand\">\n             <Config name=\"runInTool\" value=\"com.splwg.oms.client.workagenda.SCADASummary\"/>\n             <Config name=\"table\" value=\"TBL_SCADA_SUMMARY\"/>\n             <Config name=\"column\" value=\"deviceAlias\"/>\n             <Config name=\"value\" value=\"{DS_CONTROL_TOOL.TITLE}\"/>\n             <Config name=\"checkbox\" value=\"MNU_TOGGLE_CELL_FILTER\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandCutCommand",
    "description": "Cut the rows from the JTable.",
    "code": "<PressPerform>\n        <Command value=\"CutCommand\">\n            <Config name=\"table\" value=\"TBL_STORM_ADMIN\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDebugCommand",
    "description": "This creates a dummy command that can be used for testing.",
    "code": "<PressPerform>\n        <Command value=\"DebugCommand\">\n             <Config name=\"message\" value=\"Hello World\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDelayedPopulateFilterDialogCommand",
    "description": "Update the filter dialog after processing other pending gui requests.",
    "code": "<Perform>                \n        <Command value=\"DelayedPopulateFilterDialogCommand\"> \n            <Config name=\"menu\" value=\"MNU_FILTER\"/> \n            <Config name=\"filter\" value=\"To Do\"/> \n        </Command>\n    </Perform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandDeleteFilterCommand",
    "description": "Saves a filter.",
    "code": "<PressPerform>\n        <Command value=\"DeleteFilterCommand\">\n           <Config name=\"menu\" value=\"MNU_FILTER\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteRowCommand",
    "description": "Deletes the selected row(s) in a datastore.",
    "code": "<PressPerform>\n        <Command value=\"DeleteRowCommand\">\n            <Config name=\"datastore\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteRowsCommand",
    "description": "Delete the rows from the JTable.",
    "code": "<PressPerform>\n        <Command value=\"DeleteRowsCommand\">\n            <Config name=\"table\" value=\"TBL_STORM_ADMIN\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteSelectedConditionCommand",
    "description": "Delete the selected condition. The conditions are expected to be in an ObjectDataStore and displayed as part of a JBot table.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSelectedConditionCommand\">\n            <Config name=\"datastore\" value=\"DS_TAG_SUMMARY\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDeleteSortCommand",
    "description": "Deletes a configured sort.",
    "code": "<PressPerform>\n        <Command value=\"DeleteSortCommand\">\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n            <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayAlarmToolCommand",
    "description": "Display the given tool. This is an enhanced version of the DisplayToolCommand  tha tchecks for the tool name being a datastore reference and if so interprets it",
    "code": "<PressPerform>\n        <Command value=\"DisplayAlarmToolCommand\">\n            <Config name=\"tool\" value=\"com.splwg.oms.client.alarms.ActiveAlarms\"/>\n            <Config name=\"class\" value=\"com.splwg.oms.client.alarms.ActiveAlarms\"/>\n            <Config name=\"mode\" value=\"DEVICE\"/>\n            <Config name=\"substation_zone_number\" value=\"4\"/>\n            <Config name=\"wait_for_tool\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "‚è∞"
  },
  {
    "title": "commandDisplayBalloonDialogCommand",
    "description": "Displays a dialog balloon over a table entry. Works with JBotTables only.",
    "code": "<PressPerform>\n        <Command value=\"DisplayBalloonDialogCommand\">\n            <Config name=\"table\" value=\"TBL_NOTES\"/>\n            <Config name=\"dialog\" value=\"DLG_NOTE_DETAILS_EDIT\"/>\n            <Config name=\"header_dialog\" value=\"DLG_NOTE_DETAILS_HEADER\"/>\n            <Config name=\"name_space\" value=\"notetool\"/>\n            <Config name=\"sticky\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayConfirmationCommand",
    "description": "Displays a confirmation dialog for the user. If users selects an option not to proceed execution of subsequent commands is aborted.",
    "code": "Example,\n   <Command value=\"DisplayConfirmationCommand\">\n       <Config name=\"message_code\" value=\"SCADA_GRAPH.CONFIRM_DELETE_TREND\"/>\n       <Config name=\"datasource_01\" value=\"DS_SCADA_TRENDS.TREND_NAME\"/>\n   </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayDialogCommand",
    "description": "Display the configured JBotToolDialog.",
    "code": "<PressPerform>\n        <Command value=\"DisplayDialogCommand\">\n            <Config name=\"dialog\" value=\"DLG_CREW_MAKEUP\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayErrorCommand",
    "description": "Displays an error dialog to the user and aborts the current set of Commands.",
    "code": "<PressPerform>\n        <Command value=\"DisplayErrorCommand\">\n            <Config name=\"message_code\" value=\"ACTION_INVALID\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayFileChooserCommand",
    "description": "This command will display the file chooser command, and saves the results as new rows to a datastore.  There are three file chooser dialog types.  The SaveToDirectory dialog allows the user to select a directory.  The OpenFile dialog allows the user to select one or more files. The SaveFileAs dialog is used to save a file from the source application to a location selected by the user.  It is also possible for the user to alter the file name.  The dialog will not warn the user if they attempt to alter the file's extension, so it is up to the user to maintain the correct file extension. The ImportFile option is used for selecting files used for importing purposes.  This is like the OpenFile option with different dialog labels.",
    "code": "Here are a couple of examples:\n    <PressPerform>\n        <Command value=\"DisplayFileChooserCommand\">\n            <Config name=\"property_file\" value=\"SwmanPlannedTool\"/>\n            <Config name=\"dialog_type\" value=\"OpenFile\"/>\n            <Config name=\"multi-select\" value=\"false\"/>\n            <Config name=\"datastore\" value=\"DS_EXTERNAL_DOCUMENTS_SAVE\"/>\n            <Config name=\"column\" value=\"file\"/>\n            <Config name=\"modify_flag\" value=\"SHEET_EDITED\"/>\n        </Command>\n    </PressPerform>\n\n    <PressPerform>\n        <Command value=\"DisplayFileChooserCommand\">\n            <Config name=\"dialog_type\" value=\"SaveFileAs\"/>\n            <Config name=\"orig_save_as_filename\" value=\"DS_EXTERNAL_DOCS_LIST.filename\"/>\n            <Config name=\"start_from_drives_list\" value=\"true\"/>\n            <Config name=\"datastore\" value=\"DS_EXTERNAL_DOCUMENTS_SAVE\"/>\n            <Config name=\"column\" value=\"file\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayFileCommand",
    "description": "Generic Command to open a file in a default viewer.",
    "code": "<PressPerform>\n        <Command value=\"DisplayFileCommand\"\n                 when=\"GENERATE_REPORT and PLANNED_SHEET_SELECTED\">\n            <Config name=\"source_datastore\" value=\"DS_PLANNED_REPORT_CONTENT\"/>\n            <Config name=\"source_file_reference\" value=\"REPORT_FILE_REF\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDisplayHiddenColumnCommand",
    "description": "This command displays hidden columns.",
    "code": "<SelectPerform>\n         <Command value=\"DisplayHiddenColumnCommand\"\n             when=\"DISPLAY_HIDDEN_COLUMNS and !FLM_STUDY_MODE\">\n             <Config name=\"source_table\" value=\"TBL_LOADS_LIST\"/>\n             <Config name=\"display_table\" value=\"TBL_LOADS_LIST_BALLOON\"/>\n         </Command>\n     </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayMessageCommand",
    "description": "Displays a dialog for the user. The \"message_code\" parameter has to match configuration in the MessageCode_en_US.properties file. In that properties file, you can list the text of the message itself, the \".title\", the \".buttons\", the \".severity\" (ERROR, WARNING (Default), INFO, QUESTION, or QUESTION_3WAY), and the \".initial_value\" (one of the button labels listed in the \".buttons\". \nFor Example, this \"message_code\" parameter would contain \"CONTROL.SCADA_CONTROL_CONFIRM\" + and the properties file would list:CONTROL.SCADA_CONTROL_CONFIRM = Do you wish to send this request to SCADA?\nCONTROL.SCADA_CONTROL_CONFIRM.title = SCADA Control Request\nCONTROL.SCADA_CONTROL_CONFIRM.buttons = Yes, No, Cancel Action\nCONTROL.SCADA_CONTROL_CONFIRM.severity = QUESTION_3WAY\nCONTROL.SCADA_CONTROL_CONFIRM.initial_value = Cancel Action",
    "code": "Use of discard_Previous_Dialog_Name: If this command is invoked multiple times without this parameter, it will create a pop-up dialog each time. If a user does not close the previous dialog,  multiple dialogs would remain open. This parameter is used to indicate that any previous dialogs   which have same identifier as the value of this param will be closed automatically and only the latest dialog would be displayed. Please see an example below: \n   <StatusChangePerform name=\"FLG_ONLINE\" category=\"onClear\">\n      <Command value=\"DisplayMessageCommand\">\n        <Config name=\"message_code\" value=\"SYSTEM_OFFLINE\"/>\n        <Config name=\"discard_Previous_Dialog_Name\" value=\"DLG_DISPLAY_MSG_FOR_SYSTEM_STATUS\"/>\n      </Command>\n   </StatusChangePerform>\n  <StatusChangePerform name=\"FLG_ONLINE\" category=\"onSet\" >\n    <Command value=\"DisplayMessageCommand\" when = \"FLG_SYSTEM_EVER_OFFLINE\">\n      <Config name=\"message_code\" value=\"SYSTEM_ONLINE\"/>\n      <Config name=\"discard_Previous_Dialog_Name\" value=\"DLG_DISPLAY_MSG_FOR_SYSTEM_STATUS\"/>\n    </Command>\n  </StatusChangePerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayPopupCommand",
    "description": "Display the configured JPopupMenu.",
    "code": "<PressPerform>\n        <Command value=\"DisplayPopupCommand\">\n            <Config name=\"popup\" value=\"OPERATE_POPUP\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDisplayToolCommand",
    "description": "Display the given tool.",
    "code": "<PressPerform>\n        <Command value=\"DisplayToolCommand\">\n            <Config name=\"tool\" value=\"com.ces.centricity.ops.crew.CrewInfo\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandDoubleClickVerifyCommand",
    "description": "This verifies that time between two mouse clicks is smaller than the threshold. If it is sets DOUBLE_CLICK flag to true.",
    "code": "<Perform name=\"Mouse\" category=\"mouseReleased\">\n   <Command value=\"DoubleClickVerifyCommand\">\n    <Config name=\"time_threshold\" value=\"3000\"/>\n  </Command>\n </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandDropFilesCommand",
    "description": "This adds file handles to a datastore.",
    "code": "<DropPerform flavor=\"FileList\" enable_paste=\"true\">\n        <Command value=\"DropFilesCommand\">\n            <Config name=\"column\" value=\"file\"/>\n            <Config name=\"modify_flag\" value=\"SHEET_EDITED\"/>\n            <Config name=\"modify_column\" value=\"status\"/>\n            <Config name=\"modify_value\" value=\"New\"/>\n        </Command>\n    </DropPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandDropOrPasteCommand",
    "description": "This performs a copy or move from one datastore to another.  It is meant to be used as part of a \"drop\" or cut & paste action. Note that not all datastores provide support for removing or adding rows.",
    "code": "<Table name=\"LST_ACTIVE\">\n        <TablePlacement start=\"55,1\" width=\"15\"/>\n        <TableBehavior data_source=\"DS_ACTIVE\"\n                       selection_policy=\"multiple\">\n            <Column key=\"crewName\"/>\n            <DragSource flavor=\"CREW_KEY\" enable_copy=\"true\"\n                        enable_cut=\"true\"/>\n            <DragSource flavor=\"String:crewName,crewId\"\n                        enable_copy=\"true\" enable_cut=\"true\"/>\n            <DropPerform flavor=\"CREW_KEY\">\n                <Command value=\"DropOrPasteCommand\"/>\n            </DropPerform>\n        </TableBehavior>\n    </Table>",
    "icon": "üíª"
  },
  {
    "title": "commandDumpCommand",
    "description": "This dumps information about various client caches.",
    "code": "The following are the type options:\n  <ul>\n    <li>events:  A dump of the loaded events</li>    <li>counts:  This will log various cache statistics</li>    <li>all:  This will log all of the types</li>  </ul>    </PressPerform>",
    "icon": "üì§"
  },
  {
    "title": "commandDumpDataStoreCommand",
    "description": "Command to dump a datastore's contents (for debugging purposes).",
    "code": "<PressPerform>\n        <Command value=\"DumpDataStoreCommand\">\n            <Config name=\"datastore_name\" value=\"DS_WA_ALARMS\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandEditCopyCommand",
    "description": "Copies the row from one datastore to another.",
    "code": "<PressPerform>\n        <Command value=\"EditCopyCommand\">\n            <Config name=\"from\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT_1\"/>\n            <Config name=\"to\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandEditNewCommand",
    "description": "Adds a new row to a datastore.",
    "code": "<PressPerform>\n        <Command value=\"EditNewCommand\">\n            <Config name=\"datastore\" value=\"DS_CURRENT_CREW_MEMBERS_EDIT_1\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandEmailFileCommand",
    "description": "Sends an email for a switch plan.",
    "code": "<PressPerform>\n        <Command value=\"EmailReportCommand\" when=\"GENERATE_REPORT\">\n            <Config name=\"source_datastore\" value=\"DS_PLANNED_REPORT_CONTENT\"/>\n            <Config name=\"source_file_reference\" value=\"REPORT_FILE_REF\"/>\n            <Config name=\"parameter_datastore\" value=\"DS_PLANNED_REPORT_CONTENT\"/>\n            <Config name=\"email_subject\" value=\"Switch plan {DS_SWITCHING_SHEET.switchSheetIdx}\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandEmailLogFilesCommand",
    "description": "Sends a request to the user's default email client asking to create an email with the environment logs attached. This command is only supported on Microsoft Windows operating systems.  Initiating the command from the application running on any other platform will generate a OmsClientException.EMAIL_LOG_FILES_NOT_SUPPORTED exception.  The configuation for thesubject, destination email address, and body are defined in Global_en_US.properties",
    "code": "<PressPerform>\n        <Command value=\"EmailLogFilesCommand\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandEmptyDatastoreCommand",
    "description": "Delete All rows from a datastore.",
    "code": "<PressPerform>\n        <Command value=\"EmptyDatastoreCommand\">\n            <Config name=\"datastore\" value=\"DS_FAILED_LOCKS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandEnableFiltersCommand",
    "description": "Enables or disables filtering for the DataStore and JTable. This can be useful in cases like the Work Agenda where there are too many columns to scroll through, and the user would just like to toggle off all filtering with a check box. This sets or clears the \"ENABLE_FILTERS\" status flag.",
    "code": "<MenuItem name=\"MNU_TEST1\">\n         <PressPerform>\n             <Command value=\"EnableFiltersCommand\" >\n                 <Config name=\"datastore\" value=\"DS_WA_ALARMS\"/>\n                 <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n                 <Config name=\"enable\" value=\"true\"/>\n             </Command>\n         </PressPerform>\n     </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandEnsureSpaceForEditorCommand",
    "description": "This command used to verify there was enough space for switch sheets.  However, instead the frameworkwill automatically use the size configured for the tool.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n    <Command value=\"EnsureSpaceForEditorCommand\">\n        <Config name=\"width\" value=\"600\"/>\n        <Config name=\"height\" value=\"400\"/>\n    </Command>\n </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteActionCommand",
    "description": "This runs an action.",
    "code": "<PressPerform>\n        <Command value=\"ExecuteActionCommand\">\n            <Config name=\"action\" value=\"SAVE\"/>\n            <Config name=\"runInActiveTab\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteActionOnRowCommand",
    "description": "This command is used to run specific commands against each selected row in a datastore.  If the \"all_rows\" option is set to true, then all the rows in the datastore will be processed instead of just the selected rows.  This command allows projects to run a list of commands as if the user were selecting each row one by one and executing the commands. When an action aborts on a row, then this command terminates and selects the row that resulted in the aborted action.",
    "code": "In this example, we call the action ACT_CLEAR_STEP_COMMENTS on each of the steps that are selected. The comments field for each of the steps will be cleared when the step is not executed in Real Time and the step does not have a safety document association. Here is an example:\n    <PressPerform>\n        <Command value=\"ExecuteActionOnRowCommand\">\n            <Config name=\"action\"\n                    value=\"ACT_CLEAR_STEP_COMMENTS\"/>\n            <Config name=\"datastore\"\n                    value=\"DS_STEPS_LOCAL\"/>\n            <Config name=\"all_rows\"\n                    value=\"false\"/>\n        </Command>\n    </PressPerform>\n     <Action name=\"ACT_CLEAR_STEP_COMMENTS\">\n        <Command value=\"SetDataStoreValuesCommand\" when=\"!DS_STEPS_LOCAL.isExecutedRT and DS_STEPS_LOCAL.swmanStep.safetyDocId == null\">\n            <Config name=\"sources\" value=\"null\"/>\n            <Config name=\"targets\" value=\"DS_STEPS_LOCAL.swmanStep.comments\"/>\n        </Command>\n    </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandExecuteSystemCommand",
    "description": "Runs a system command. If the std_err, std_out, retval, or abort_on_non_zero are set the command will wait for the script to execute. Otherwise it will return immediately.  Environment variables can be specified for the command and arg_xx parameters by surrounding them with %.  For example, the home directory can be specified by using %HOME%.  If a literal % is desired, double it, for example, 100%%",
    "code": "<PressPerform>\n  <Command value=\"ExecuteSystemCommand\">\n   <Config name=\"command\" value=\"nohup nms-model-build &amp;\"/>\n    <Config name=\"run_on_cgw_server\" value=\"true\"/>\n  </Command>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExitSystemCommand",
    "description": "This command exits the application.",
    "code": "<PressPerform>\n        <Command value=\"ExitSystemCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExpandAllTreeNodesCommand",
    "description": "Command to expand all nodes in a tree.",
    "code": "<PressPerform>\n        <Command value=\"ExpandAllTreeNodesCommand\">\n            <Config name=\"tree_name\" value=\"TRE_FOO_BAR\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandExpandTreeCommand",
    "description": "Command to expand all nodes in a tree or TreeTable.",
    "code": "<PressPerform>\n        <Command value=\"ExpandTreeCommand\">\n            <Config name=\"tree_name\" value=\"TRE_CLASSES\"/>\n            <Config name=\"depth\" value=\"2\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFCAStartCommand",
    "description": "This command starts the Feeder Contingency Analysis for the specified amount of time.",
    "code": "<PressPerform>\n       <Command value=\"FCAStartCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFCAStopCommand",
    "description": "This command stops the Feeder Contingency Analysis.",
    "code": "<PressPerform>\n       <Command value=\"FCAStopCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFDAStartCommand",
    "description": "This command starts the Feeder Data Analysis for the specified amount of time.",
    "code": "<PressPerform>\n       <Command value=\"FDAStartCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandFDAStopCommand",
    "description": "This command stops the Feeder Data Analysis.",
    "code": "<PressPerform>\n       <Command value=\"FDAStopCommand\"/>    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetApplicationServerBuildInfoCommand",
    "description": "This retrieves server build information from version.xml",
    "code": "<PressPerform>\n        <Command value=\"GetApplicationServerBuildInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetClientToolBuildInfoCommand",
    "description": "This retrieves client build information from version.xml",
    "code": "<PressPerform>\n        <Command value=\"GetClientToolBuildInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandGetCurrentTimeCommand",
    "description": "This command gets the current time and puts it into a datastore.",
    "code": "Note that the time is stored in the datastore as a FormattedDate.\n\n    <PressPerform>\n        <Command value=\"GetCurrentTimeCommand\">\n            <Config name=\"target\" value=\"DS_TARGET1.TVAL1\"/>\n            <Config name=\"time_source\" value=\"SERVER\"/>\n        </Command>\n    <PressPerform>\n\nThe time_source property can be either \"CLIENT\" or \"SERVER\" (default is \"SERVER\").",
    "icon": "üíª"
  },
  {
    "title": "commandGetUnixServerBuildInfoCommand",
    "description": "This retrieves server build information from version.xml",
    "code": "<PressPerform>\n        <Command value=\"GetUnixServerBuildInfoCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandHideToolCommand",
    "description": "This command hides the JBot tool, which it was called from.",
    "code": "<PressPerform>\n        <Command value=\"HideToolCommand\">\n            <Config name=\"use_tool_name\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandIgnoreVerificationCommand",
    "description": "Sets a component so that it can be selected even if another component is not valid.",
    "code": "This is called for cancel buttons.",
    "icon": "üíª"
  },
  {
    "title": "commandInitializeFiltersCommand",
    "description": "Display the filter dialog.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"InitializeFiltersCommand\">\n            <Config name=\"menu\" value=\"MNU_FILTER\"/>\n            <Config name=\"config_table\" value=\"work_agenda\"/>\n            <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n            <Config name=\"config_datastore\" value=\"DS_FILTERS\"/>\n            <Config name=\"datastore\" value=\"DS_TABLE_FILTER\"/>\n            <Config name=\"columns\" value=\"STATUS,EVENT_IDX,FEEDER_ALIAS,EMERGENCY,OUTAGE_TIME,CUSTOMERS_OUT,\"/>\n            <Config name=\"dialog\" value=\"DLG_FILTER\"/>\n            <Config name=\"save_dialog\" value=\"DLG_SAVE_FILTER\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandInitializeSortsCommand",
    "description": "Initializes the sort dialog for a table.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"InitializeSortsCommand\">\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n            <Config name=\"table\" value=\"TBL_NOTES\"/>\n            <Config name=\"sort_01_default\"\n                    value=\"handle.instanceNumber\"/>\n            <Config name=\"sort_02\" value=\"affectedDeviceAlias\"/>\n            <Config name=\"sort_03\" value=\"!whenCreated\"/>\n            <Config name=\"columns\"\n                    value=\"handle.instanceNumber,whenCreated,createdByUser,affectedDeviceAlias,text\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandInsertCommand",
    "description": "Insert the rows to the JTable.",
    "code": "<PressPerform>\n        <Command value=\"InsertCommand\">\n            <Config name=\"table\" value=\"TBL_STORM_ADMIN\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandJDBCRepopulateCommand",
    "description": "Repopulates the JDBC datastore.",
    "code": "<PressPerform>      <Command value=\"JDBCRepopulateCommand\">\n        <Config name=\"datastore\" value=\"DS_STORM_ADMIN\"/>\n      </Command>\n </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandJDBCSaveCommand",
    "description": "Saves the JDBC datastore.",
    "code": "<PressPerform>      <Command value=\"JDBCSaveCommand\">\n        <Config name=\"datastore\" value=\"DS_STORM_ADMIN\"/>\n      </Command>\n </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandLockColumnsCommand",
    "description": "Locks or unlocks columns in a table.  It is meant to work with a popopmenu, as it uses the mouse position to determine the column to lock",
    "code": "<PressPerform>      <Command value=\"LockColumnsCommand\">\n        <Config name=\"enable\" value=\"true\"/>\n      </Command>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandMouseCommand",
    "description": "An abstract class that handles processing mouse events.",
    "code": "It should be added to a comand using the\n    <Perform name=\"mouse\" > tag.\n    \n    If the calling event is not a mouse event, then it still calls MouseExecute,\n    but the passed event is null.",
    "icon": "üíª"
  },
  {
    "title": "commandOpenURLCommand",
    "description": "Opens URL in the default system browser. Datastore values can be used in the url parameter by enclosing them in curly braces. Environment variables can be used in the url parameter by surrounding them with %. For example, the home directory can be specified by using %HOME%. If a literal % is desired, double it, for example, 100%%",
    "code": "<PressPerform>\n  <Command value=\"OpenURLCommand\">\n   <Config name=\"url\" value=\"https://maps.google.com/maps?q={DS_GOOGLE_MAPS.LATITUDE},{DS_GOOGLE_MAPS.LONGITUDE}&amp;z=15\"/>\n  </Command>\n </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPasteCommand",
    "description": "Paste the rows to the JTable.",
    "code": "<PressPerform>\n        <Command value=\"PasteCommand\">\n            <Config name=\"table\" value=\"TBL_STORM_ADMIN\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPingCommand",
    "description": "Checks network connectivity",
    "code": "<PressPerform>\n        <Command value=\"PingCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateDeviceViolationsHistoryCommand",
    "description": "This command populates the violations history of a device",
    "code": "<PressPerform>\n        <Command value=\"PopulateDeviceViolationsHistoryCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandPopulateFilterDialogCommand",
    "description": "Update the filter dialog.",
    "code": "<Perform>                \n        <Command value=\"PopulateFilterDialogCommand\"> \n            <Config name=\"menu\" value=\"MNU_FILTER\"/> \n            <Config name=\"filter\" value=\"To Do\"/> \n        </Command>\n    </Perform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandPrintFileCommand",
    "description": "Prints a file.",
    "code": "This prints using Desktop.print(File) or the command configured in ConfigurePrintCommand",
    "icon": "üìÇ"
  },
  {
    "title": "commandPrintPreviewCommand",
    "description": "Launches a print preview window for a set of JBot components.",
    "code": "<PressPerform>\n        <Command value=\"PrintPreviewCommand\">\n            <Config name=\"target\" value=\"TBP_EVENT_DETAILS:TAB_EQUIP_FAIL\"/>\n            <Config name=\"components\" value=\"PNL_MAIN_EVT_DTLS,PNL_EQUIP_FAIL\"/>\n            <Config name=\"page_break\" value=\"true\"/>\n            <Config name=\"ignore_visibility\" value=\"true,true\"/>\n            <Config name=\"scale\" value=\"0.5\"/>\n            <Config name=\"zoom\" value=\"1.0\"/>\n            <Config anme=\"adjust_by_display_size\" value=\"true\"/>\n            <Config name=\"orientation\" value=\"LANDSCAPE\"/>\n            <Config name=\"job\" value=\"EVENT_DETAILS_PRINT_JOB\"/>\n            <Config name=\"before_rule\" value=\"THINK_TWICE\"/>\n            <Config name=\"after_rule\" value=\"PRINT_FORM\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandProcessFilterDialogCommand",
    "description": "Turns on a custom filter.",
    "code": "<SelectPerform>\n  <Command value=\"PopulateFilterDialogCommand\"/>\n</SelectPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandQuitCommand",
    "description": "This is the general quit command which when executed closes the tool window. This Command provides the common functionality which is being used in almost all the tools.  Normally it just hides the tool, unless the forceclose config option is chosen.",
    "code": "<Perform>\n        <Command value=\"QuitCommand\">\n            <Config name=\"forceClose\" value=\"true\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandRadioGroupEnforcerCommand",
    "description": "Defines a list of jbot status flags that should work as radio buttons. This will ensure that only the last selected status is true.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"RadioGroupEnforcerCommand\">\n            <Config name=\"status_list\" value=\"CALLS_VIEW,CUSTOMER_VIEW,CONTROL_VIEW,SUPPLY_NODES_VIEW,SUPPLY_VIEW\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandReadPipeCommand",
    "description": "Sends a HLM message to this client from an external system over a named pipe",
    "code": "This should be called on a windowOpened perform block on the WorkspaceMenuBarTool",
    "icon": "üíª"
  },
  {
    "title": "commandRegisterKeyActionCommand",
    "description": "This adds a keystroke listener to a JBot component.  This should be configured as part of a tool or dialog windowOpened Perform block",
    "code": "<Command value=\"RegisterKeyActionCommand\">\n        <Config name=\"keystroke\" value=\"ENTER\"/>\n        <Config name=\"component\" value=\"TBL_WA_ALARMS\"/>\n        <Config name=\"action\" value=\"ACT_DO_SOMETHING\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandRemoveDynamicFiltersCommand",
    "description": "Removes all the dynamic column filters for a JBot table.",
    "code": "<PressPerform>\n        <Command value=\"RemoveDynamicFiltersCommand\">\n             <Config name=\"table\" value=\"TBL_SAFETY_DEVICE_SEARCH_RESULT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRequestFocusCommand",
    "description": "Command to request focus for a component.",
    "code": "<PressPerform>\n        <Command value=\"RequestFocusCommand\">\n            <Config name=\"component\" value=\"TXTF_SEARCH_TEXT\"/>\n        </Command>\n    <PressPerform>\n    \nIf a tab should be selected it should be in the form of: TAB_MASTER_NAME.TAB_NAME",
    "icon": "üåê"
  },
  {
    "title": "commandRestoreSpecificPrefsCommand",
    "description": "Restores specified user preference items to their default states.",
    "code": "<PressPerform>\n        <Command value=\"RestoreSpecificPrefsCommand\">\n            <Config name=\"site\" value=\"FLAG:CB_CONDITIONAL_FORMATTING_SELECTED\"/>\n            <Config name=\"conditional_formatting\" value=\"FLAG:CB_CONDITIONAL_FORMATTING_SELECTED\"/>\n            <Config name=\"filters\" value=\"FLAG:CB_FILTERS_SELECTED\"/>\n            <Config name=\"custom_sorts\" value=\"FLAG:CB_CUSTOM_SORTS_SELECTED\"/>\n            <Config name=\"table_layouts\" value=\"FLAG:CB_TABLE_LAYOUTS_SELECTED\"/>\n            <Config name=\"font_size\" value=\"FLAG:CB_FONT_SIZE_SELECTED\"/>\n            <Config name=\"other\" value=\"FLAG:CB_OTHER_SELECTED\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandRevertSortCommand",
    "description": "Removes unsaved changes from a sort.",
    "code": "<PressPerform>\n        <Command value=\"RevertSortCommand\">\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandRunValidationCommand",
    "description": "Runs a validation group and if it was not successful, aborts processing.",
    "code": "<PressPerform>\n        <Command value=\"RunValidationCommand\">\n            <Config name=\"group\" value=\"validate_stuff\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveFilterCommand",
    "description": "Saves a filter.",
    "code": "<PressPerform>\n        <Command value=\"SaveFilterCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSavePreferencesCommand",
    "description": "Saves the preferences of a user.",
    "code": "<PressPerform>\n        <Command value=\"SavePreferencesCommand\">\n            <Config name=\"remove\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSaveSortCommand",
    "description": "Saves a sort.",
    "code": "<PressPerform>\n        <Command value=\"SaveSortCommand\">\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectDisplayColumnsCommand",
    "description": "Populates the DLG_SELECT_COLUMNS dialog.  This is called beforedisplaying that dialog.",
    "code": "This should be followed by the following to bring up the Dialog:     <PressPerform>\n         <Command value=\"SelectDisplayColumnsCommand\"/>\n            <Command value=\"DisplayDialogCommand\">\n                <Config name=\"dialog\" value=\"DLG_SELECT_COLUMNS\"/>\n            </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectNextRowCommand",
    "description": "Sets the next row selected for a DataStore.  If no row is currently selected and the \"default_select\" parameter is set to true, then select the first row.",
    "code": "<PressPerform>\n        <Command value=\"SelectNextRowCommand\">\n            <Config name=\"data_store\" value=\"DS_STEPS_LOCAL\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectRowsCommand",
    "description": "Selects rows based on matching data",
    "code": "<SelectPerform>\n        <Command value=\"SelectRowsCommand\">\n            <Config name=\"table\"> value=\"TBL_ALARMS\">            <Config name=\"when\" value=\"DEVICE_ALIAS == 'BR2411'\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSelectTabCommand",
    "description": "Select the specified tab name.  This will look first in the active tool, and if not found, will next look in the current switch plan.",
    "code": "<PressPerform>\n        <Command value=\"SelectTabCommand\">\n            <Config name=\"tabbed_pane\" value=\"TBP_MASTER\"/>\n            <Config name=\"tab\" value=\"TAB_STEPS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetAppNameCommand",
    "description": "Set application name that invoke filter/sort dialog.",
    "code": "<MenuItem name=\"MNU_SHOW_FILTER_DIALOG\">\n         <PressPerform>\n             <Command value=\"SetAppNameCommand\"/>\n         </PressPerform>\n     </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandSetButtonDefaultEnabled",
    "description": "This command is used to set default button to selected.",
    "code": "<SelectPerform>\n        <Command value=\"SetButtonDefaultEnabled\"/>\n            <Config name=\"button_on\" value=\"BTN_VIOLATION_ALL\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetComponentColorCommand",
    "description": "Command to set the foreground and background of a JComponent.",
    "code": "<PressPerform>\n        <Command value=\"SetComponentColorCommand\">\n            <Config name=\"components\"\n                    value=\"BTN_VIEWER_REFRESH,BTN_SHOW_CREWS\"/>\n            <Config name=\"foreground_color\" value=\"red\"/>\n            <Config name=\"background_color\" value=\"192,192,192\"/>\n        </Command>\n    <PressPerform>\n    \n    If the COMPONENTS Config element is\n    omitted, the component is assumed to be the source object which\n    generated the JBotEvent associated with this command.",
    "icon": "üíª"
  },
  {
    "title": "commandSetCursorCommand",
    "description": "Sets the cursor of a datastore to the first selected row.",
    "code": "<PressPerform>\n        <Command value=\"SetCursorCommand\">\n            <Config name=\"datastore\" value=\"DS_STEPS_LOCAL\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetDataStoreValuesCommand",
    "description": "Command to set a list of datastore values given one of the following:",
    "code": "<PressPerform>\n        <Command value=\"SetDataStoreValuesCommand\">\n            <Config name=\"sources\" value=\"'hello world',DS_SOURCE2.SVAL2,DS_SOURCE3.SVAL3,DS_SOURCE4.SVAL4,'null',null\"/>\n            <Config name=\"targets\" value=\"DS_TARGET1.TVAL1,DS_TARGET2.TVAL2,DS_TARGET3.TVAL3,DS_TARGET4.TVAL4,DS_TARGET5.TVAL5,DS_TARGET6.TVAL6\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandSetDataStoreValuesIfUnsetCommand",
    "description": "Command to set a list of datastore values, that will save only if not current set.Otherwise it works the same as SetDataStoreValuesCommand,.",
    "code": "<PressPerform>\n        <Command value=\"SetDataStoreValuesIfUnsetCommand\">\n            <Config name=\"sources\" value=\"'hello world',DS_SOURCE2.SVAL2,DS_SOURCE3.SVAL3,DS_SOURCE4.SVAL4,'null',null\"/>\n            <Config name=\"targets\" value=\"DS_TARGET1.TVAL1,DS_TARGET2.TVAL2,DS_TARGET3.TVAL3,DS_TARGET4.TVAL4,DS_TARGET5.TVAL5,DS_TARGET6.TVAL6\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandSetDialogSizeCommand",
    "description": "Command to change a dialog's size.",
    "code": "<PressPerform>\n        <Command value=\"SetDialogSizeCommand\">\n            <Config name=\"dialog_name\" value=\"DLG_VIEWER_TRACE\"/>\n            <Config name=\"width\" value=\"320\"/>\n            <Config name=\"height\" value=\"200\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "commandSetEventResultCommand",
    "description": "Sets result field in the JBotEvent object",
    "code": "<Command value=\"SetEventResultCommand\">\n    <Config name=\"data_source\" value=\"DS_DEVICE_INFO.#global:SELECTED_OBJECT\" />\n </Command>",
    "icon": "üëÇ"
  },
  {
    "title": "commandSetFilterCommand",
    "description": "Sets a filter on the given table.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"SetFilterCommand\">\n            <Config name=\"table\" value=\"TBL_COUNT_OPEN\"/>\n            <Config name=\"column\" value=\"id\"/>\n            <Config name=\"values\" value=\"NUMCUST,CRITCUST,CRITK,CRITC,CRITD\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetHiddenColumnFlagCommand",
    "description": "This command sets the HIDDEN_COLUMN_FLAG to TRUE/FALSE.This is use to enable/disable ballon icon used to display hidden columns.",
    "code": "<Button name=\"BTN_OK\">\n         <ButtonPlacement start=\"0,2\" weight=\"1,0\" anchor=\"CENTER\"/>\n         <ButtonBehavior>\n             <PressPerform>\n                 <Command value=\"SaveDisplayColumnsCommand\"/>\n                 <Command value=\"CloseDialogCommand\"/>\n                 <Command value=\"SetHiddenColumnFlagCommand\"/>\n             </PressPerform>\n         </ButtonBehavior>\n     </Button>",
    "icon": "üíª"
  },
  {
    "title": "commandSetStatusFlagCommand",
    "description": "Command to set a status flag.",
    "code": "<PressPerform>\n        <Command value=\"SetStatusFlagCommand\">\n            <Config name=\"flag_names\" value=\"FOOBAR,CESI,VIEW_ONLY\"/>\n            <Config name=\"flag_values\" value=\"true,false,VIEW_ONLY\"/>\n            <Config name=\"global\" value=\"false\"/>\n            <Config name=\"from_tool\" value=\"SwmanMenuBarTool\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "commandSetTableSelectionCommand",
    "description": "Sets the selection for any JBot table.",
    "code": "<SelectPerform>\n        <Command value=\"SetTableSelectionCommand\">\n            <Config name=\"h_cls\" value=\"swmanStep.devCls\"/>\n            <Config name=\"h_idx\" value=\"swmanStep.devIdx\"/>\n            <Config name=\"alias\" value=\"swmanStep.deviceAlias\"/>\n            <Config name=\"ncg\" value=\"swmanStep.ncg\"/>\n            <Config name=\"event_idx\" value=\"swmanStep.job.jobIdx\"/>\n            <Config name=\"multi_select\" value=\"false\"/>\n            <Config name=\"step_select\" value=\"true\"/>\n            <Config name=\"include_tool\" value=\"false\"/>\n            <Config name=\"data_store\" value=\"DS_INSTRUCTS\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetToggleDefaultCommand",
    "description": "This command is used to toggle checkbox and set default toggle button.",
    "code": "<SelectPerform>\n        <Command value=\"SetToggleDefaultCommand\"/>\n            <Config name=\"toggle_buttons\" value=\"CB_DEVICE_ALL, CB_DEVICE_CONDUCTOR, CB_DEVICE_FEEDER_IMBALANCE\"/>\n            <Config name=\"button_off\" value=\"CB_DEVICE_ALL\"/>\n            <Config name=\"default_button\" value=\"CB_DEVICE_ALL\"/>\n        </Command>\n    </SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetToolStartedStatusCommand",
    "description": "Command to set a status flag based on whether a specific tool has started.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"SetToolStartedStatusCommand\">\n            <Config name=\"flag_name\" value=\"USING_WEB_SWITCHING\"/>\n            <Config name=\"tool\" value=\"SwmanMenuBarTool\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandSetToolTitleCommand",
    "description": "Sets the title of the current tool.",
    "code": "<Perform name=\"Filter\" category=\"filterChanged\">\n     <Command value=\"SetToolTitleCommand\">\n         <Config name=\"datasource\" value=\"DS_WA_LOCAL.##global:filter_name%JBotFormat.WA.TITLE\"/>\n     </Command>\n </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandSetUserTypeStatusCommand",
    "description": "Command to set a status flag based on a list of login types passed in and the user's login type.",
    "code": "<Command value=\"SetUserTypeStatusCommand\">\n        <Config name=\"flag_name\" value=\"USER_VIEW_ONLY\"/>\n        <Config name=\"user_type\" value=\"View Only\"/>\n    </Command>\n    \n    If there is a match, then the status flag is set to true.\n    This can be used to enable or disable a control tool actions based on a user type.",
    "icon": "üìä"
  },
  {
    "title": "commandSetWildcardSearchingCommand",
    "description": "Sets the wildcard searching option for the passed data store. and stores it in the data store's \"#global:WILDCARD\" field.",
    "code": "<Command value=\"SetWildcardSearchingCommand\">\n     <Config name=\"datastore\" value=\"DS_SEARCH_SWITCHING_SHEET_LIST\"/>\n     <Config name=\"wildcard_option\" value=\"{DS_SEARCH_SWITCHING_SHEET_LIST.#global:WILDCARD}\"/>\n </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandShowHelpCommand",
    "description": "Launches context sensitive help.  If a target is defined, it will only display help if that tab is displayed.  If a target is not definedit will display regardless of what tab is displayed (or if a tab isn't displayed",
    "code": "<PressPerform>\n        <Command value=\"ShowHelpCommand\">\n            <Config name=\"topic\" value=\"WWEman\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandShowRestorePrefsDialogCommand",
    "description": "Shows the DLG_RESTORE_PREFS dialog.",
    "code": "<SelectPerform>\n  <Command value=\"ShowRestorePrefsDialogCommand\">\n      <Config name=\"restore_site_prefs\" value=\"true\"/>\n  </Command>\n</SelectPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "commandSortCommand",
    "description": "Sort the rows of a JTable or JList",
    "code": "<PressPerform>\n        <Command value=\"SortCommand\">\n            <Config name=\"component\" value=\"TBL_SWITCHING_SHEET_OK\"/>\n            <Config name=\"column\" value=\"switchSheetDisplayOrder\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandStopTableEditCommand",
    "description": "Stop table editing.",
    "code": "<Table name='TBL_COMPLETION_LOG'>\n         <TablePlacement start='0,0' height='2' width='5' anchor='NORTHWEST'/>\n         <TableBehavior data_source='DS_COMPLETION_LOG' auto_resize_columns='true' component_height='60'>\n             <Column key=\"WHO\"/>\n             <Column key=\"WHEN\"/>\n             <Column key=\"REASON_FOR_UPDATE\"/>\n         </TableBehavior>\n     </Table>\n     <MenuItem name='MNU_EXIT' icon='Stop16.gif'>\n         <PressPerform>\n             <Command value='StopTableEditCommand'>\n                 <Config name='table' value='TBL_COMPLETION_LOG'/>\n             </Command>\n         </PressPerform>\n     </MenuItem>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleCellFilterCommand",
    "description": "Toggle Cell filter on or off.",
    "code": "<PressPerform>\n        <Command value=\"ToggleCellFilterCommand\">\n            <Config name=\"table\" value=\"TBL_WA_ALARMS\"/>\n            <Config name=\"enable\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandToggleStatusFlagCommand",
    "description": "This will set a property flag to true or false depending on it's current value.",
    "code": "<CheckBoxMenuItem name='MNU_ENABLE_TEST'>\n       <PressPerform>\n           <Command value='ToggleStatusFlagCommand'>\n               <Config name='statusFlag' value='BALLOON_ON'/>\n           </Command>\n       </PressPerform>\n   </CheckBoxMenuItem>",
    "icon": "üìä"
  },
  {
    "title": "commandToolMethodCommand",
    "description": "Runs a method on the tool that calls this method.",
    "code": "<Perform name=\"Window\" category=\"windowOpened\">\n        <Command value=\"ToolMethodCommand\">\n            <Config name=\"method\" value=\"initStormAdmin\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateFilterMultiMatchCommand",
    "description": "This command is used to construct multiple filter match.",
    "code": "<CheckBox name=\"CB_DEVICE_ALL\">\n         <CheckBoxPlacement start=\"relative,0\" height=\"1\" width=\"1\"/>\n         <CheckBoxBehavior data_source=\"DS_WARNINGS_VIOLATIONS_OPTIONS.ALL\">\n             <PressPerform>\n                 <Command value=\"UpdateFilterMultiMatchCommand\">\n                     <Config name=\"filter_type\" value=\"VIOLATIONS_CB_FILTER\"/>\n                     <Config name=\"table\" value=\"TBL_VIOLATIONS_LIST\"/>\n                     <Config name=\"column\" value=\"VIOLATION_CODE\"/>\n                     <Config name=\"toggle_buttons\" value=\"CB_DEVICE_ALL, CB_DEVICE_CONDUCTOR\"/>\n                     <Config name=\"toggle_button_matches\" value=\"1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19, 8 18\"/>\n                 </Command>\n             </PressPerform>\n         </CheckBoxBehavior>\n     </CheckBox>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateFilterViolationTypeCommand",
    "description": "This command is used to construct a violation type filter match.",
    "code": "<Action name=\"UPDATE_VIOLATIONS_FILTERS\">\n         <Command value=\"UpdateFilterViolationTypeCommand\">\n             <Config name=\"filter_type\" value=\"VIOLATIONS_CB_FILTER\"/>\n             <Config name=\"table\" value=\"TBL_VIOLATIONS_LIST\"/>\n             <Config name=\"column\" value=\"VIOLATION_CODE\"/>\n             <Config name=\"toggle_buttons\" value=\"MNU_ALL_TYPES, MNU_PROTECTION_TYPE, MNU_CONDUCTOR_TYPE, MNU_DISTGEN_TYPE, MNU_POWERTRANS_TYPE, MNU_DISTTRANS_TYPE, MNU_SWITCH_TYPE, MNU_VOLTAGE_TYPE, MNU_BACKFEED_TYPE, MNU_FEEDER_CB_TYPE\"/>\n             <Config name=\"class_type\" value=\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"/>\n         </Command>\n     </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateGenericFieldCommand",
    "description": "Saves a generic field to the system.",
    "code": "<PressPerform>\n        <Command value=\"UpdateGenericFieldCommand\">\n            <Config name=\"datastore\" value=\"DS_EVAL\"/>\n            <Config name=\"column\" value=\"crew_type\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateSelectedConditionCommand",
    "description": "Update the selected condition.",
    "code": "<Command value=\"UpdateSelectedConditionCommand\">\n       <Config name=\"datastore\" value=\"DS_NOTE_SUMMARY\"/>\n    </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateSortMenuCommand",
    "description": "This will set the menu to the selected sort, or if a sort that doesn't exist in the menu is chosen, it will hide the selection.",
    "code": "<Perform name=\"Sort\" category=\"sortChanged\">\n        <Command value=\"UpdateSortMenuCommand\">\n            <Config name=\"menu\" value=\"MNU_SORT\"/>\n        </Command>\n    </Perform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateTabTitleCommand",
    "description": "Updates title of the tab.",
    "code": "<PressPerform>\n        <Command value=\"UpdateTabTitleCommand\">\n            <Config name=\"tab_name\" value=\"TBP_LOOKAHEAD:TAB_VIOLATIONS\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "commandUpdateVisibleStatusCommand",
    "description": "This will set datasource to true or false to indicate when the component is visible",
    "code": "<Perform name=\"Window\">\n        <Command value=\"UpdateVisibleStatusCommand\">\n            <Config name=\"datasource\" value=\"DS_CONTROL_TOOL.SECONDARY_SELECTION_MODE\"/>\n        </Command>\n    </Perform>",
    "icon": "üìä"
  },
  {
    "title": "commandUseDispatchThreadCommand",
    "description": "Forces the other commands for this event to be run in the dispatch thread",
    "code": "<Action name=\"CLEAR_SEARCHES\">\n        <Command value=\"UseDispatchThreadCommand\"/>\n   </Action>",
    "icon": "üíª"
  },
  {
    "title": "commandVerifyClipboardActionCommand",
    "description": "Verifies a cut, copy, or drag is allowed.  This command only is valid for PreDrags. If an an parameter is not configured, the action is assumed to be valid.  It is possibleto configure either jbot status field that must be set to true,or a componet name that must be enabled.",
    "code": "<Command value=\"VerifyClipboardActionCommand\">\n            <Config name=\"cut_component\" value=\"BTN_CUT_STEPS\"/>\n            <Config name=\"copy_component\" value=\"BTN_COPY_STEPS\"/>\n        </Command>",
    "icon": "üíª"
  },
  {
    "title": "commandVerifyCommand",
    "description": "Displays a dialog for the user to verify an action (such as asking \"are you sure?\", \"do you want to save your changes?\").",
    "code": "<PressPerform>\n        <Command value=\"VerifyCommand\">\n            <Config name=\"message_code\" value=\"VERIFY_SOMETHING\"/>\n            <Config name=\"data_source_0\" value=\"DS_SOMETHING.column_0\"/>\n            <Config name=\"data_source_1\" value=\"DS_SOMETHING.column_1\"/>\n            <Config name=\"use_flags\" value=\"true\"/>\n        </Command>\n    <PressPerform>\n    \n    If the user cancels the dialog, then the remainder of the commands\n    for the action will not be run.\n    \n    The dialog type and content is defined in the Message_code_en_US.properties:\n    VERIFY_SOMETHING.severity  - type of the dialog, possible values:\n                                 ERROR, WARNING, INFO, QUESTION or QUESTION_3WAY\n    VERIFY_SOMETHING.title  - the dialog's title\n    VERIFY_SOMETHING  -  the actual message with \n    \n    The <name>_YES flag will be set to true if the user presses the OK button.\n    The <name>_NO flag will be set to true if the user presses the NO button.\n    The <name>_CANCEL flag will be set to true if the user calcels the dialog.",
    "icon": "üíª"
  },
  {
    "title": "commandVerifyDateCommand",
    "description": "This command will verify a date field.  This should be used in place of the built-in date verifier as that one will not set the JBot abort flag if the date is invalid.  If you require the abort flag to be set so as not to execute additional JBot commands, then initiate this command prior to any of your other configured JBot commands.",
    "code": "Here are examples:\n\n<DateTimeSelectorBehavior disable_date_verifier=\"true\">\n    <Editable initial=\"true\"/>\n    <Perform name=\"Action\" category=\"actionPerformed\">\n         <Command value=\"VerifyDateCommand\"/>\n         <Command value=\"StepExecutedDateEditedCommand\" when=\"!STUDY_MODE\" />\n    </Perform>\n</DateTimeSelectorBehavior>\n\nor\n\n<Command value=\"VerifyDateCommand\" />\n    <Config name=\"component_name\" value=\"DTS_BEGIN_DATE\"/>\n    <Config name=\"message_code\" value=\"CUSTOM_INVALID_DATE\"/>\n</Command>",
    "icon": "üíª"
  },
  {
    "title": "commandVerifyMouseEventCommand",
    "description": "This will verify that a mouse event matches the mouse configuration.\n If it does not match then setAbort() is called to cancel the remaining\n commands.",
    "code": "<Perform name=\"Mouse\" category=\"mouseClicked\">\n       <Command value=\"VerifyMouseEventCommand\">\n            <Config name=\"button\" value=\"2\"/>\n        </Command>\n    </Perform>",
    "icon": "üëÇ"
  },
  {
    "title": "commandViewerSelectedConditionCommand",
    "description": "Forward the device name to the viewer for the selected condition. The conditions are expected to be in an ObjectDataStore and displayed as part of a JBot table.",
    "code": "<PressPerform>\n        <Command value=\"ViewerSelectedConditionCommand\">\n           <Config name=\"datastore\" value=\"DS_NOTE_SUMMARY\"/>\n        </Command>\n    <PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "internalGetSelectedConditionCommand",
    "description": "Get the selected condition.",
    "code": "This is not meant to be configured in to JBot, thus the package internal.",
    "icon": "üíª"
  },
  {
    "title": "conditional_formatApplyConditionalFormattingCommand",
    "description": "Applies the changes to conditional formatting made in the DLG_CONDITIONAL_FORMATTING dialog. NOTE: can only be used from within that dialog",
    "code": "<SelectPerform>\n  <Command value=\"ApplyConditionalFormattingCommand\"/>\n</SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "conditional_formatEditConditionalFormattingCommand",
    "description": "Shows the DLG_CONDITIONAL_FORMATTING dialog.",
    "code": "<SelectPerform>\n  <Command value=\"EditConditionalFormattingCommand\">\n      <Config name=\"table_name\" value=\"TBL_WA_ALARMS\"/>\n      <Config name=\"global\" value=\"true\"/>\n      <Config name=\"default_column\" value=\"STATUS\"/>\n  </Command>\n</SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "conditional_formatModifyConditionalFormattingListCommand",
    "description": "Edit/add/remove entries in the conditional formatting list of the DLG_CONDITIONAL_FORMATTING dialog. NOTE: can only be used from within that dialog",
    "code": "<SelectPerform>\n  <Command value=\"ModifyConditionalFormattingListCommand\">\n    <Config name=\"action\" value=\"edit\"/>\n  </Command>\n</SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "conditional_formatSaveConditionalFormatCommand",
    "description": "Saves the changes to a conditional format made in the DLG_EDIT_CONDITIONAL_FORMAT dialog. NOTE: can only be used from within that dialog",
    "code": "<SelectPerform>\n  <Command value=\"SaveConditionalFormatCommand\"/>\n</SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "filterSaveEditedFilterCommand",
    "description": "Saves the filter being edited in the DLG_EDIT_FILTER dialog. NOTE: can only be used from within that dialog",
    "code": "<SelectPerform>\n  <Command value=\"SaveEditedFilterCommand\"/>\n</SelectPerform>",
    "icon": "üíª"
  },
  {
    "title": "swmanpfCmdAbortSwmanPf",
    "description": "Aborts power flow analysis for a switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"CmdAbortSwmanPf\">\n        </Command>\n    </PressPerform>",
    "icon": "üîç"
  },
  {
    "title": "swmanpfCmdGetSwmanSheetPFStatus",
    "description": "Gets status of power flow for a switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"CmdGetSwmanSheetPFStatus\">\n         </Command>\n    </PressPerform>",
    "icon": "üìä"
  },
  {
    "title": "swmanpfCmdInitDerData",
    "description": "Populates DERs data for the plan.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitDerData\">\n            <Config name=\"dataSource\" value=\"DS_SWPF_FEEDERS\"/>\n            <Config name=\"dataDestination\" value=\"DS_SWPF.FeederDers\"/\n         </Command>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "swmanpfCmdInitPlanDetails",
    "description": "Initializes power flow plan details for a switch sheet.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitPlanDetails\">\n         </Command>\n    </PressPerform>",
    "icon": "üöÄ"
  },
  {
    "title": "voltvarCmdInitLoadData",
    "description": "This command initialize dataset for Load summaries tab on the PlanDetails dialog.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitLoadData\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "voltvarCmdInitScadaData",
    "description": "This command initialize dataset for SCADA measurements tab on the PlanDetails dialog.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitScadaData\"/>\n    </PressPerform>",
    "icon": "üóÑÔ∏è"
  },
  {
    "title": "voltvarCmdInitVoltGraph",
    "description": "This command initialize dataset for voltage distribution graph on the PlanDetails dialog.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitVoltGraph\"/>\n    </PressPerform>",
    "icon": "üöÄ"
  },
  {
    "title": "voltvarCmdInitVoltProfileGraph",
    "description": "This command initialize dataset for voltage profile graph on the PlanDetails dialog.",
    "code": "<PressPerform>\n        <Command value=\"CmdInitVoltProfileGraph\"/>\n    </PressPerform>",
    "icon": "üìÇ"
  },
  {
    "title": "voltvarCmdVoltVarWizard",
    "description": "This command controls the wizard dialog for the Volt/Var tool.",
    "code": "<PressPerform>\n        <Command value=\"CmdVoltVarWizard\"/>\n    </PressPerform>",
    "icon": "‚öôÔ∏è"
  },
  {
    "title": "voltvarGenerateStudyVoltvarPlanCommand",
    "description": "This Command will generate a VV Switch Sheet using the selected restoration options in the DS_VV_PLANS.",
    "code": "<PressPerform>\n        <Command value=\"GenerateStudyVoltVarPlanCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "voltvarGenerateVoltvarPlanCommand",
    "description": "This Command will generate a VV Switch Sheet using the selected restoration options in the DS_VV_PLANS.",
    "code": "<PressPerform>\n        <Command value=\"GenerateVoltVarPlanCommand\"/>\n                <Config name=\"switch_sheet_cls\" value=\"3111\"/>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "voltvarPopulateVoltvarCommand",
    "description": "This Command populates the VVO Tool using the tool's load() method.",
    "code": "<PressPerform>\n        <Command value=\"PopulateVVOCommand\">\n                <Config name=\"repopulate\" value=\"true\"/>\n        </Command>\n    </PressPerform>",
    "icon": "üíª"
  },
  {
    "title": "voltvarUpdateSelectedPlanGroupCommand",
    "description": "This Command should be triggered when a row in the DS_VVO_PLANis checked. This will then un-select the other restore plans for the common isolation switch and update the DS_VV_PLAN table accordingly.",
    "code": "<PressPerform>\n        <Command value=\"UpdatePlanSelectedCommand\"/>\n    </PressPerform>",
    "icon": "üíª"
  }
]